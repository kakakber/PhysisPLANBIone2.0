
provah7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172d8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  08017588  08017588  00027588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017d2c  08017d2c  00027d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017d34  08017d34  00027d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017d38  08017d38  00027d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  08017d3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b18  240001fc  08017f38  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002d14  08017f38  00032d14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022e3e  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d62  00000000  00000000  00053068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a58  00000000  00000000  00056dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001910  00000000  00000000  00058828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003634c  00000000  00000000  0005a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022a9e  00000000  00000000  00090484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a1ca  00000000  00000000  000b2f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020d0ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000855c  00000000  00000000  0020d13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001fc 	.word	0x240001fc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08017570 	.word	0x08017570

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000200 	.word	0x24000200
 80002ec:	08017570 	.word	0x08017570

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000728:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800072c:	f000 b9ac 	b.w	8000a88 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	4604      	mov	r4, r0
 80007c0:	468e      	mov	lr, r1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d14d      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c6:	428a      	cmp	r2, r1
 80007c8:	4694      	mov	ip, r2
 80007ca:	d969      	bls.n	80008a0 <__udivmoddi4+0xe8>
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	b152      	cbz	r2, 80007e8 <__udivmoddi4+0x30>
 80007d2:	fa01 f302 	lsl.w	r3, r1, r2
 80007d6:	f1c2 0120 	rsb	r1, r2, #32
 80007da:	fa20 f101 	lsr.w	r1, r0, r1
 80007de:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e2:	ea41 0e03 	orr.w	lr, r1, r3
 80007e6:	4094      	lsls	r4, r2
 80007e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ec:	0c21      	lsrs	r1, r4, #16
 80007ee:	fbbe f6f8 	udiv	r6, lr, r8
 80007f2:	fa1f f78c 	uxth.w	r7, ip
 80007f6:	fb08 e316 	mls	r3, r8, r6, lr
 80007fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007fe:	fb06 f107 	mul.w	r1, r6, r7
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800080e:	f080 811f 	bcs.w	8000a50 <__udivmoddi4+0x298>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 811c 	bls.w	8000a50 <__udivmoddi4+0x298>
 8000818:	3e02      	subs	r6, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb3 f0f8 	udiv	r0, r3, r8
 8000824:	fb08 3310 	mls	r3, r8, r0, r3
 8000828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800082c:	fb00 f707 	mul.w	r7, r0, r7
 8000830:	42a7      	cmp	r7, r4
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x92>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800083c:	f080 810a 	bcs.w	8000a54 <__udivmoddi4+0x29c>
 8000840:	42a7      	cmp	r7, r4
 8000842:	f240 8107 	bls.w	8000a54 <__udivmoddi4+0x29c>
 8000846:	4464      	add	r4, ip
 8000848:	3802      	subs	r0, #2
 800084a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800084e:	1be4      	subs	r4, r4, r7
 8000850:	2600      	movs	r6, #0
 8000852:	b11d      	cbz	r5, 800085c <__udivmoddi4+0xa4>
 8000854:	40d4      	lsrs	r4, r2
 8000856:	2300      	movs	r3, #0
 8000858:	e9c5 4300 	strd	r4, r3, [r5]
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d909      	bls.n	800087a <__udivmoddi4+0xc2>
 8000866:	2d00      	cmp	r5, #0
 8000868:	f000 80ef 	beq.w	8000a4a <__udivmoddi4+0x292>
 800086c:	2600      	movs	r6, #0
 800086e:	e9c5 0100 	strd	r0, r1, [r5]
 8000872:	4630      	mov	r0, r6
 8000874:	4631      	mov	r1, r6
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f683 	clz	r6, r3
 800087e:	2e00      	cmp	r6, #0
 8000880:	d14a      	bne.n	8000918 <__udivmoddi4+0x160>
 8000882:	428b      	cmp	r3, r1
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd4>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80f9 	bhi.w	8000a7e <__udivmoddi4+0x2c6>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb61 0303 	sbc.w	r3, r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	469e      	mov	lr, r3
 8000896:	2d00      	cmp	r5, #0
 8000898:	d0e0      	beq.n	800085c <__udivmoddi4+0xa4>
 800089a:	e9c5 4e00 	strd	r4, lr, [r5]
 800089e:	e7dd      	b.n	800085c <__udivmoddi4+0xa4>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xec>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 8092 	bne.w	80009d2 <__udivmoddi4+0x21a>
 80008ae:	eba1 010c 	sub.w	r1, r1, ip
 80008b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b6:	fa1f fe8c 	uxth.w	lr, ip
 80008ba:	2601      	movs	r6, #1
 80008bc:	0c20      	lsrs	r0, r4, #16
 80008be:	fbb1 f3f7 	udiv	r3, r1, r7
 80008c2:	fb07 1113 	mls	r1, r7, r3, r1
 80008c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ca:	fb0e f003 	mul.w	r0, lr, r3
 80008ce:	4288      	cmp	r0, r1
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x12c>
 80008d2:	eb1c 0101 	adds.w	r1, ip, r1
 80008d6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x12a>
 80008dc:	4288      	cmp	r0, r1
 80008de:	f200 80cb 	bhi.w	8000a78 <__udivmoddi4+0x2c0>
 80008e2:	4643      	mov	r3, r8
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ec:	fb07 1110 	mls	r1, r7, r0, r1
 80008f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008f4:	fb0e fe00 	mul.w	lr, lr, r0
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x156>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000904:	d202      	bcs.n	800090c <__udivmoddi4+0x154>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f200 80bb 	bhi.w	8000a82 <__udivmoddi4+0x2ca>
 800090c:	4608      	mov	r0, r1
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000916:	e79c      	b.n	8000852 <__udivmoddi4+0x9a>
 8000918:	f1c6 0720 	rsb	r7, r6, #32
 800091c:	40b3      	lsls	r3, r6
 800091e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000922:	ea4c 0c03 	orr.w	ip, ip, r3
 8000926:	fa20 f407 	lsr.w	r4, r0, r7
 800092a:	fa01 f306 	lsl.w	r3, r1, r6
 800092e:	431c      	orrs	r4, r3
 8000930:	40f9      	lsrs	r1, r7
 8000932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000936:	fa00 f306 	lsl.w	r3, r0, r6
 800093a:	fbb1 f8f9 	udiv	r8, r1, r9
 800093e:	0c20      	lsrs	r0, r4, #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fb09 1118 	mls	r1, r9, r8, r1
 8000948:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800094c:	fb08 f00e 	mul.w	r0, r8, lr
 8000950:	4288      	cmp	r0, r1
 8000952:	fa02 f206 	lsl.w	r2, r2, r6
 8000956:	d90b      	bls.n	8000970 <__udivmoddi4+0x1b8>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000960:	f080 8088 	bcs.w	8000a74 <__udivmoddi4+0x2bc>
 8000964:	4288      	cmp	r0, r1
 8000966:	f240 8085 	bls.w	8000a74 <__udivmoddi4+0x2bc>
 800096a:	f1a8 0802 	sub.w	r8, r8, #2
 800096e:	4461      	add	r1, ip
 8000970:	1a09      	subs	r1, r1, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb1 f0f9 	udiv	r0, r1, r9
 8000978:	fb09 1110 	mls	r1, r9, r0, r1
 800097c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000980:	fb00 fe0e 	mul.w	lr, r0, lr
 8000984:	458e      	cmp	lr, r1
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x1e2>
 8000988:	eb1c 0101 	adds.w	r1, ip, r1
 800098c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000990:	d26c      	bcs.n	8000a6c <__udivmoddi4+0x2b4>
 8000992:	458e      	cmp	lr, r1
 8000994:	d96a      	bls.n	8000a6c <__udivmoddi4+0x2b4>
 8000996:	3802      	subs	r0, #2
 8000998:	4461      	add	r1, ip
 800099a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800099e:	fba0 9402 	umull	r9, r4, r0, r2
 80009a2:	eba1 010e 	sub.w	r1, r1, lr
 80009a6:	42a1      	cmp	r1, r4
 80009a8:	46c8      	mov	r8, r9
 80009aa:	46a6      	mov	lr, r4
 80009ac:	d356      	bcc.n	8000a5c <__udivmoddi4+0x2a4>
 80009ae:	d053      	beq.n	8000a58 <__udivmoddi4+0x2a0>
 80009b0:	b15d      	cbz	r5, 80009ca <__udivmoddi4+0x212>
 80009b2:	ebb3 0208 	subs.w	r2, r3, r8
 80009b6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ba:	fa01 f707 	lsl.w	r7, r1, r7
 80009be:	fa22 f306 	lsr.w	r3, r2, r6
 80009c2:	40f1      	lsrs	r1, r6
 80009c4:	431f      	orrs	r7, r3
 80009c6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ca:	2600      	movs	r6, #0
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	fa21 f303 	lsr.w	r3, r1, r3
 80009e0:	4091      	lsls	r1, r2
 80009e2:	4301      	orrs	r1, r0
 80009e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e8:	fa1f fe8c 	uxth.w	lr, ip
 80009ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80009f0:	fb07 3610 	mls	r6, r7, r0, r3
 80009f4:	0c0b      	lsrs	r3, r1, #16
 80009f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009fa:	fb00 f60e 	mul.w	r6, r0, lr
 80009fe:	429e      	cmp	r6, r3
 8000a00:	fa04 f402 	lsl.w	r4, r4, r2
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x260>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a0e:	d22f      	bcs.n	8000a70 <__udivmoddi4+0x2b8>
 8000a10:	429e      	cmp	r6, r3
 8000a12:	d92d      	bls.n	8000a70 <__udivmoddi4+0x2b8>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1b9b      	subs	r3, r3, r6
 8000a1a:	b289      	uxth	r1, r1
 8000a1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a20:	fb07 3316 	mls	r3, r7, r6, r3
 8000a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a28:	fb06 f30e 	mul.w	r3, r6, lr
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x28a>
 8000a30:	eb1c 0101 	adds.w	r1, ip, r1
 8000a34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a38:	d216      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d914      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3e:	3e02      	subs	r6, #2
 8000a40:	4461      	add	r1, ip
 8000a42:	1ac9      	subs	r1, r1, r3
 8000a44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a48:	e738      	b.n	80008bc <__udivmoddi4+0x104>
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e705      	b.n	800085c <__udivmoddi4+0xa4>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e3      	b.n	800081c <__udivmoddi4+0x64>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6f8      	b.n	800084a <__udivmoddi4+0x92>
 8000a58:	454b      	cmp	r3, r9
 8000a5a:	d2a9      	bcs.n	80009b0 <__udivmoddi4+0x1f8>
 8000a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7a3      	b.n	80009b0 <__udivmoddi4+0x1f8>
 8000a68:	4646      	mov	r6, r8
 8000a6a:	e7ea      	b.n	8000a42 <__udivmoddi4+0x28a>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e2>
 8000a70:	4640      	mov	r0, r8
 8000a72:	e7d1      	b.n	8000a18 <__udivmoddi4+0x260>
 8000a74:	46d0      	mov	r8, sl
 8000a76:	e77b      	b.n	8000970 <__udivmoddi4+0x1b8>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	e732      	b.n	80008e4 <__udivmoddi4+0x12c>
 8000a7e:	4630      	mov	r0, r6
 8000a80:	e709      	b.n	8000896 <__udivmoddi4+0xde>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	e742      	b.n	800090e <__udivmoddi4+0x156>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <loRaWriteRegister>:
//datasheet da sx a dx 7...0
/**
 * Takes a defined register as input, puts a '1' first to signal write mode to lora module
 * ex: reg=0x42 -> 1 0x42 = 11000010
 */
void loRaWriteRegister(uint8_t reg, uint8_t data){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
	//writes to register, pooling mode
	uint8_t inpData[2];
	inpData[0] = reg | 0x80, //sets first bit to 0
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	733b      	strb	r3, [r7, #12]
	inpData[1] = data;
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(LORA_SPI_CS_Port, LORA_SPI_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <loRaWriteRegister+0x58>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <loRaWriteRegister+0x5c>)
 8000ab0:	8811      	ldrh	r1, [r2, #0]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 fd3b 	bl	8009530 <HAL_GPIO_WritePin>

	//read the register in pooling mode and not interrupting
	HAL_SPI_Transmit(loRa_hspi, inpData, 2, 10);
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <loRaWriteRegister+0x60>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f107 010c 	add.w	r1, r7, #12
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	f00c fa93 	bl	800cff0 <HAL_SPI_Transmit>

	//end of transaction
	HAL_GPIO_WritePin(LORA_SPI_CS_Port, LORA_SPI_CS_Pin, GPIO_PIN_SET);
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <loRaWriteRegister+0x58>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <loRaWriteRegister+0x5c>)
 8000ad0:	8811      	ldrh	r1, [r2, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f008 fd2b 	bl	8009530 <HAL_GPIO_WritePin>

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000218 	.word	0x24000218
 8000ae8:	2400021c 	.word	0x2400021c
 8000aec:	24000230 	.word	0x24000230

08000af0 <loRaSendPacket>:
 * Set up to be asynchronous, sends packet and the response to the di0 txdone interrupt HAS to be handled by the user
 * In order to write packet data into FIFO user should: (page 36)
	1 Set FifoPtrAddr to FifoTxPtrBase.
	2 Write PayloadLength bytes to the FIFO (RegFifo)
 */
int loRaSendPacket(int explicitHeader, const uint8_t *buffer, size_t size){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	//first check if not already transmitting

	if ((loRaReadRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 f883 	bl	8000c08 <loRaReadRegister>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d101      	bne.n	8000b10 <loRaSendPacket+0x20>
	    return 0;//cannot send packet, already sending!
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e052      	b.n	8000bb6 <loRaSendPacket+0xc6>
	}
	if (loRaReadRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 8000b10:	2012      	movs	r0, #18
 8000b12:	f000 f879 	bl	8000c08 <loRaReadRegister>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <loRaSendPacket+0x38>
	    // clear IRQ's
	    loRaWriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000b20:	2108      	movs	r1, #8
 8000b22:	2012      	movs	r0, #18
 8000b24:	f7ff ffb2 	bl	8000a8c <loRaWriteRegister>
	}
	loRaIdle();
 8000b28:	f000 fb04 	bl	8001134 <loRaIdle>
	if(explicitHeader){
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <loRaSendPacket+0x54>
		loRaWriteRegister(REG_MODEM_CONFIG_1, loRaReadRegister(REG_MODEM_CONFIG_1) | 0x00);
 8000b32:	201d      	movs	r0, #29
 8000b34:	f000 f868 	bl	8000c08 <loRaReadRegister>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	201d      	movs	r0, #29
 8000b3e:	f7ff ffa5 	bl	8000a8c <loRaWriteRegister>
 8000b42:	e00a      	b.n	8000b5a <loRaSendPacket+0x6a>
		/*
		 *In certain scenarios, where the payload, coding rate and CRC presence are fixed or known in advance, it may be advantageous
		 *to reduce transmission time by invoking implicit header mode. In this mode the header is removed from the packet.
		 *to In this case the payload length, error coding rate and presence of the payload CRC must be manually configured on both sides of the radio link.
		 */
		loRaWriteRegister(REG_MODEM_CONFIG_1, loRaReadRegister(REG_MODEM_CONFIG_1) | 0x01);
 8000b44:	201d      	movs	r0, #29
 8000b46:	f000 f85f 	bl	8000c08 <loRaReadRegister>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	201d      	movs	r0, #29
 8000b56:	f7ff ff99 	bl	8000a8c <loRaWriteRegister>
	}
	/*The actual location to be read from, or written to, over the SPI interface is defined by the address pointer FifoAddrPtr.
	 * Before any read or write operation it is hence necessary to initialise this pointer to the corresponding base value.
	*/
	//every time we transmit we initialize the FIFO buffer, the uC will handle bigger buffers itself
	loRaWriteRegister(REG_FIFO_ADDR_PTR, 0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	200d      	movs	r0, #13
 8000b5e:	f7ff ff95 	bl	8000a8c <loRaWriteRegister>
	loRaWriteRegister(REG_PAYLOAD_LENGTH, 0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2022      	movs	r0, #34	; 0x22
 8000b66:	f7ff ff91 	bl	8000a8c <loRaWriteRegister>

	//send the data
	//int actualLen = readRegister(REG_PAYLOAD_LENGTH);//not useful for now
	if(size > MAX_PKT_LENGTH){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d901      	bls.n	8000b74 <loRaSendPacket+0x84>
		return 1; //fail
 8000b70:	2301      	movs	r3, #1
 8000b72:	e020      	b.n	8000bb6 <loRaSendPacket+0xc6>

	//write data to fifo
	/*
	 * From docs: Upon reading or writing to the FIFO data buffer (RegFifo) the address pointer will then increment automatically.
	 */
	 for (size_t i = 0; i < size; i++) {
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <loRaSendPacket+0xa0>
	    loRaWriteRegister(REG_FIFO, buffer[i]);
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff81 	bl	8000a8c <loRaWriteRegister>
	 for (size_t i = 0; i < size; i++) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3f0      	bcc.n	8000b7a <loRaSendPacket+0x8a>
	  }
	 //update the payload
	 loRaWriteRegister(REG_PAYLOAD_LENGTH, size);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2022      	movs	r0, #34	; 0x22
 8000ba0:	f7ff ff74 	bl	8000a8c <loRaWriteRegister>

	 //be sure that DIO0 has the right mapping, otherwise no interrupt and tx state forever!
	 //in tx has to be mapped 01 => updates on tx done
	 loRaWriteRegister(REG_DIO_MAPPING_1, 0x40);
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2040      	movs	r0, #64	; 0x40
 8000ba8:	f7ff ff70 	bl	8000a8c <loRaWriteRegister>
	 //set mode to tx
	 loRaWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000bac:	2183      	movs	r1, #131	; 0x83
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff6c 	bl	8000a8c <loRaWriteRegister>
	 return 1;
 8000bb4:	2301      	movs	r3, #1

}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <loRaIsTrasmitting>:
	//clear irq flags, writing one on the 1's clears the irq
	loRaWriteRegister(REG_IRQ_FLAGS, irqFlags);
}


int loRaIsTrasmitting(){
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
	if((loRaReadRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) != IRQ_TX_DONE_MASK){
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f000 f820 	bl	8000c08 <loRaReadRegister>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d001      	beq.n	8000bd6 <loRaIsTrasmitting+0x18>
		//trasmitting
		return 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <loRaIsTrasmitting+0x1a>
	}else{
		return 0;
 8000bd6:	2300      	movs	r3, #0
	}
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <loRaClearIRQReceive>:
	 loRaWriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	 return 1;

}

void loRaClearIRQReceive(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	loRaWriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000be0:	2108      	movs	r1, #8
 8000be2:	2012      	movs	r0, #18
 8000be4:	f7ff ff52 	bl	8000a8c <loRaWriteRegister>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <loRaFullyTransmitMode>:

}



void loRaFullyTransmitMode(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	//the user just wants to transmit, set the base of the FIFO buffer to 0x00 to use all the available 256 byte buffer
	loRaWriteRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f7ff ff4a 	bl	8000a8c <loRaWriteRegister>
	FifoTxBaseAddr = 0x00;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <loRaFullyTransmitMode+0x18>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000000 	.word	0x24000000

08000c08 <loRaReadRegister>:
/**
 * Takes a defined register as input, puts a '0' first to signal read mode to lora module
 * ex: reg=0x42 -> 0 0x42 = 01000010
 * Puts 8 more dummy bits while receiving in MISO
 */
uint8_t loRaReadRegister(uint8_t reg){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	//accepts the 7 bits of address, MSB first
	uint8_t inpData[2];
	inpData[0] = reg & 0x7F; //sets first bit to 0 and the rest as requested
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	733b      	strb	r3, [r7, #12]
	inpData[1] = 0x00; //dummy data when receiving
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	737b      	strb	r3, [r7, #13]
	uint8_t rxData[2];


	//lora CS to low to begin
	HAL_GPIO_WritePin(LORA_SPI_CS_Port, LORA_SPI_CS_Pin, GPIO_PIN_RESET);
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <loRaReadRegister+0x58>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <loRaReadRegister+0x5c>)
 8000c26:	8811      	ldrh	r1, [r2, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fc80 	bl	8009530 <HAL_GPIO_WritePin>

	//read the register in pooling mode and not interrupting
	HAL_SPI_TransmitReceive(loRa_hspi, inpData, rxData, 2, 10);
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <loRaReadRegister+0x60>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f107 0208 	add.w	r2, r7, #8
 8000c38:	f107 010c 	add.w	r1, r7, #12
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2302      	movs	r3, #2
 8000c42:	f00c fbd1 	bl	800d3e8 <HAL_SPI_TransmitReceive>

	//end of transaction
	HAL_GPIO_WritePin(LORA_SPI_CS_Port, LORA_SPI_CS_Pin, GPIO_PIN_SET);
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <loRaReadRegister+0x58>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <loRaReadRegister+0x5c>)
 8000c4c:	8811      	ldrh	r1, [r2, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4618      	mov	r0, r3
 8000c52:	f008 fc6d 	bl	8009530 <HAL_GPIO_WritePin>

	return rxData[1];
 8000c56:	7a7b      	ldrb	r3, [r7, #9]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	24000218 	.word	0x24000218
 8000c64:	2400021c 	.word	0x2400021c
 8000c68:	24000230 	.word	0x24000230

08000c6c <loRaSetOCP>:
/**
 * Sets over current protection, right trim for chosen maximum mA
 * Trimming of OCP current:
 * Imax = 45+5*OcpTrim [mA] if OcpTrim <= 15 (120 mA) / Imax = -30+10*OcpTrim [mA] if 15 < OcpTrim <= 27 (130 to 240 mA)
 */
void loRaSetOCP(uint8_t mA){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8000c76:	231b      	movs	r3, #27
 8000c78:	73fb      	strb	r3, [r7, #15]
	if (mA <= 120) {
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b78      	cmp	r3, #120	; 0x78
 8000c7e:	d809      	bhi.n	8000c94 <loRaSetOCP+0x28>
	   ocpTrim = (mA - 45) / 5;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	3b2d      	subs	r3, #45	; 0x2d
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <loRaSetOCP+0x60>)
 8000c86:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8a:	1052      	asrs	r2, r2, #1
 8000c8c:	17db      	asrs	r3, r3, #31
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e00b      	b.n	8000cac <loRaSetOCP+0x40>
	 } else if (mA <=240) {
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2bf0      	cmp	r3, #240	; 0xf0
 8000c98:	d808      	bhi.n	8000cac <loRaSetOCP+0x40>
	   ocpTrim = (mA + 30) / 10;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	331e      	adds	r3, #30
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <loRaSetOCP+0x60>)
 8000ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca4:	1092      	asrs	r2, r2, #2
 8000ca6:	17db      	asrs	r3, r3, #31
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	73fb      	strb	r3, [r7, #15]
	}
	loRaWriteRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	200b      	movs	r0, #11
 8000cbe:	f7ff fee5 	bl	8000a8c <loRaWriteRegister>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	66666667 	.word	0x66666667

08000cd0 <loRaSetSyncWord>:



void loRaSetSyncWord(int syncWord){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	loRaWriteRegister(REG_SYNC_WORD, syncWord);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2039      	movs	r0, #57	; 0x39
 8000ce0:	f7ff fed4 	bl	8000a8c <loRaWriteRegister>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <loRaInit>:


/**
 * Initializes the lora for trasmit ops
 */
int loRaInit(SPI_HandleTypeDef* hspi_in, GPIO_TypeDef* spi_cs_port, uint16_t spi_cs_pin, GPIO_TypeDef* di0_port, uint16_t di0_pin, GPIO_TypeDef* rst_port, uint16_t rst_pin){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80fb      	strh	r3, [r7, #6]
	loRa_hspi = hspi_in;
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <loRaInit+0xb8>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6013      	str	r3, [r2, #0]

	LORA_SPI_CS_Port = spi_cs_port;
 8000d02:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <loRaInit+0xbc>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6013      	str	r3, [r2, #0]
	LORA_SPI_CS_Pin = spi_cs_pin;
 8000d08:	4a28      	ldr	r2, [pc, #160]	; (8000dac <loRaInit+0xc0>)
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	8013      	strh	r3, [r2, #0]

	LORA_DI0_Port = di0_port;
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <loRaInit+0xc4>)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6013      	str	r3, [r2, #0]
	LORA_DIO_Pin = di0_pin;
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <loRaInit+0xc8>)
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	8013      	strh	r3, [r2, #0]

	LORA_RST_Port = rst_port;
 8000d1a:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <loRaInit+0xcc>)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	6013      	str	r3, [r2, #0]
	LORA_RST_Pin = rst_pin;
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <loRaInit+0xd0>)
 8000d22:	8c3b      	ldrh	r3, [r7, #32]
 8000d24:	8013      	strh	r3, [r2, #0]

	//important! pu after gpio and spi init
	//put cs high (dont write)
	HAL_GPIO_WritePin(LORA_RST_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <loRaInit+0xcc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <loRaInit+0xd0>)
 8000d2c:	8811      	ldrh	r1, [r2, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 fbfd 	bl	8009530 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f003 f970 	bl	800401c <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <loRaInit+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <loRaInit+0xd0>)
 8000d42:	8811      	ldrh	r1, [r2, #0]
 8000d44:	2201      	movs	r2, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f008 fbf2 	bl	8009530 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f003 f965 	bl	800401c <HAL_Delay>
	HAL_GPIO_WritePin(LORA_SPI_CS_Port, LORA_SPI_CS_Pin, GPIO_PIN_SET);
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <loRaInit+0xbc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <loRaInit+0xc0>)
 8000d58:	8811      	ldrh	r1, [r2, #0]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 fbe7 	bl	8009530 <HAL_GPIO_WritePin>
	//random check to see if chip is working, otherwise done
	while (loRaReadRegister(REG_VERSION) != 0x12){
 8000d62:	bf00      	nop
 8000d64:	2042      	movs	r0, #66	; 0x42
 8000d66:	f7ff ff4f 	bl	8000c08 <loRaReadRegister>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d001      	beq.n	8000d74 <loRaInit+0x88>

		return 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e013      	b.n	8000d9c <loRaInit+0xb0>
	}
	//MODES: 000 SLEEP 001 STDBY 010 Frequency synthesis TX (FSTX) 011 Transmit (TX) 100 Frequency synthesis RX (FSRX) 101 Receive continuous (RXCONTINUOUS) 110receive single (RXSINGLE) 111Channel activity detection (CAD)
	loRaSleep();
 8000d74:	f000 f9d6 	bl	8001124 <loRaSleep>
	loRaSetFrequency(0);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f9e5 	bl	8001148 <loRaSetFrequency>
	//LoRa fifo base addr
	//loRaWriteRegister(REG_FIFO_TX_BASE_ADDR, 0);
	//loRaWriteRegister(REG_FIFO_RX_BASE_ADDR, 0);

	//set LNA boost
	loRaWriteRegister(REG_LNA, 0x23); //maximum gain, default current, boost on TO CHECK!!
 8000d7e:	2123      	movs	r1, #35	; 0x23
 8000d80:	200c      	movs	r0, #12
 8000d82:	f7ff fe83 	bl	8000a8c <loRaWriteRegister>

	//set modem config (Low data rate optimuze enabled?)
	loRaWriteRegister(REG_MODEM_CONFIG_3, 0x04);
 8000d86:	2104      	movs	r1, #4
 8000d88:	2026      	movs	r0, #38	; 0x26
 8000d8a:	f7ff fe7f 	bl	8000a8c <loRaWriteRegister>

	//set tx power, defaults at 15 dbm (boost set to true!)
	loRaSetTxPower(15, TRUE);
 8000d8e:	2101      	movs	r1, #1
 8000d90:	200f      	movs	r0, #15
 8000d92:	f000 f979 	bl	8001088 <loRaSetTxPower>

	// put in standby mode
	loRaIdle();
 8000d96:	f000 f9cd 	bl	8001134 <loRaIdle>
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000230 	.word	0x24000230
 8000da8:	24000218 	.word	0x24000218
 8000dac:	2400021c 	.word	0x2400021c
 8000db0:	24000220 	.word	0x24000220
 8000db4:	24000224 	.word	0x24000224
 8000db8:	24000228 	.word	0x24000228
 8000dbc:	2400022c 	.word	0x2400022c

08000dc0 <loRaEnableCRC>:


void loRaEnableCRC(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  uint8_t prevValue = loRaReadRegister(REG_MODEM_CONFIG_2);
 8000dc6:	201e      	movs	r0, #30
 8000dc8:	f7ff ff1e 	bl	8000c08 <loRaReadRegister>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  loRaWriteRegister(REG_MODEM_CONFIG_2, prevValue | 0x04);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	201e      	movs	r0, #30
 8000ddc:	f7ff fe56 	bl	8000a8c <loRaWriteRegister>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <loRaSetSpreadingFactor>:
 * 	- The header must be set to Implicit mode
 * 	- Write bits 2-0 of register address 0x31 to value "0b101"
 * 	- Write register address 0x37 to value 0x0C
 */

void loRaSetSpreadingFactor(int sf){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if(sf<6){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	dc02      	bgt.n	8000dfc <loRaSetSpreadingFactor+0x14>
		sf = 6;
 8000df6:	2306      	movs	r3, #6
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	e004      	b.n	8000e06 <loRaSetSpreadingFactor+0x1e>
	}else if (sf > 12){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b0c      	cmp	r3, #12
 8000e00:	dd01      	ble.n	8000e06 <loRaSetSpreadingFactor+0x1e>
		sf = 12;
 8000e02:	230c      	movs	r3, #12
 8000e04:	607b      	str	r3, [r7, #4]
	}

	if(sf == 6){
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d108      	bne.n	8000e1e <loRaSetSpreadingFactor+0x36>
		loRaWriteRegister(REG_DETECTION_OPTIMIZE, 0xc5);//or maybe 0x05
 8000e0c:	21c5      	movs	r1, #197	; 0xc5
 8000e0e:	2031      	movs	r0, #49	; 0x31
 8000e10:	f7ff fe3c 	bl	8000a8c <loRaWriteRegister>
		loRaWriteRegister(REG_DETECTION_THRESHOLD, 0x0C);
 8000e14:	210c      	movs	r1, #12
 8000e16:	2037      	movs	r0, #55	; 0x37
 8000e18:	f7ff fe38 	bl	8000a8c <loRaWriteRegister>
 8000e1c:	e007      	b.n	8000e2e <loRaSetSpreadingFactor+0x46>
		//set header to implicit mode
	}else{
		loRaWriteRegister(REG_DETECTION_OPTIMIZE, 0xc3);//or maybe 0x05
 8000e1e:	21c3      	movs	r1, #195	; 0xc3
 8000e20:	2031      	movs	r0, #49	; 0x31
 8000e22:	f7ff fe33 	bl	8000a8c <loRaWriteRegister>
		loRaWriteRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8000e26:	210a      	movs	r1, #10
 8000e28:	2037      	movs	r0, #55	; 0x37
 8000e2a:	f7ff fe2f 	bl	8000a8c <loRaWriteRegister>
	}

	uint8_t prevReg = loRaReadRegister(REG_MODEM_CONFIG_2);
 8000e2e:	201e      	movs	r0, #30
 8000e30:	f7ff feea 	bl	8000c08 <loRaReadRegister>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]

	loRaWriteRegister(REG_MODEM_CONFIG_2, (prevReg & 0x0f) | ((sf << 4) & 0xf0));//same last 4 and shift sf log2 in first 4 bits
 8000e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	201e      	movs	r0, #30
 8000e52:	f7ff fe1b 	bl	8000a8c <loRaWriteRegister>

	loRaSetLDOFlag();
 8000e56:	f000 f82c 	bl	8000eb2 <loRaSetLDOFlag>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <loRaSetCodingRate>:
 * - 010 4/6
 * - 011 4/7
 * - 100 4/8
 */

void loRaSetCodingRate(int denom){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	if (denom < 5) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	dc02      	bgt.n	8000e76 <loRaSetCodingRate+0x14>
		denom = 5;
 8000e70:	2305      	movs	r3, #5
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	e004      	b.n	8000e80 <loRaSetCodingRate+0x1e>
	  } else if (denom > 8) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	dd01      	ble.n	8000e80 <loRaSetCodingRate+0x1e>
		  denom = 8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	607b      	str	r3, [r7, #4]
	  }

	  int cr = denom - 4;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b04      	subs	r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]

	  loRaWriteRegister(REG_MODEM_CONFIG_1, (loRaReadRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8000e86:	201d      	movs	r0, #29
 8000e88:	f7ff febe 	bl	8000c08 <loRaReadRegister>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f023 030e 	bic.w	r3, r3, #14
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	201d      	movs	r0, #29
 8000ea6:	f7ff fdf1 	bl	8000a8c <loRaWriteRegister>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <loRaSetLDOFlag>:

/**
 * set low data rate optimization flag
 */
void loRaSetLDOFlag(){
 8000eb2:	b590      	push	{r4, r7, lr}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
	  // Section 4.1.1.5
	  long symbolDuration = 1000 / ( loRaGetSignalBandwidth() / (1L << loRaGetSpreadingFactor()) ) ;
 8000eb8:	f000 f890 	bl	8000fdc <loRaGetSignalBandwidth>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	f000 f8d9 	bl	8001074 <loRaGetSpreadingFactor>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	fb94 f3f3 	sdiv	r3, r4, r3
 8000ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	603b      	str	r3, [r7, #0]

	  // Section 4.1.1.6

	  uint8_t config3 = loRaReadRegister(REG_MODEM_CONFIG_3);
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f7ff fe95 	bl	8000c08 <loRaReadRegister>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	  if(symbolDuration > 16){
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	dd04      	ble.n	8000ef2 <loRaSetLDOFlag+0x40>
		  config3 |= 0x08; //set LowDataRateOptimize to true
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e003      	b.n	8000efa <loRaSetLDOFlag+0x48>
	  }else{
		  config3 &= 0xF7; //set LowDataRateOptimize to false
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f023 0308 	bic.w	r3, r3, #8
 8000ef8:	71fb      	strb	r3, [r7, #7]
	  }
	  loRaWriteRegister(REG_MODEM_CONFIG_3, config3);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f7ff fdc4 	bl	8000a8c <loRaWriteRegister>
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}

08000f0c <loRaSetSignalBandwidth>:


void loRaSetSignalBandwidth(long sbw){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  int bw;

  if (sbw <= 7.8E3) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f641 6278 	movw	r2, #7800	; 0x1e78
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	dc02      	bgt.n	8000f24 <loRaSetSignalBandwidth+0x18>
    bw = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e03f      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 10.4E3) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	dc02      	bgt.n	8000f34 <loRaSetSignalBandwidth+0x28>
    bw = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e037      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 15.6E3) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	dc02      	bgt.n	8000f44 <loRaSetSignalBandwidth+0x38>
    bw = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e02f      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 20.8E3) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f245 1240 	movw	r2, #20800	; 0x5140
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	dc02      	bgt.n	8000f54 <loRaSetSignalBandwidth+0x48>
    bw = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e027      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 31.25E3) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dc02      	bgt.n	8000f64 <loRaSetSignalBandwidth+0x58>
    bw = 4;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e01f      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 41.7E3) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	dc02      	bgt.n	8000f74 <loRaSetSignalBandwidth+0x68>
    bw = 5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e017      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 62.5E3) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	dc02      	bgt.n	8000f84 <loRaSetSignalBandwidth+0x78>
    bw = 6;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e00f      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 125E3) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <loRaSetSignalBandwidth+0xc8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	dc02      	bgt.n	8000f92 <loRaSetSignalBandwidth+0x86>
    bw = 7;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e008      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else if (sbw <= 250E3) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <loRaSetSignalBandwidth+0xcc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	dc02      	bgt.n	8000fa0 <loRaSetSignalBandwidth+0x94>
    bw = 8;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e001      	b.n	8000fa4 <loRaSetSignalBandwidth+0x98>
  } else{
    bw = 9;
 8000fa0:	2309      	movs	r3, #9
 8000fa2:	60fb      	str	r3, [r7, #12]
  }

  loRaWriteRegister(REG_MODEM_CONFIG_1, (loRaReadRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8000fa4:	201d      	movs	r0, #29
 8000fa6:	f7ff fe2f 	bl	8000c08 <loRaReadRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f7ff fd62 	bl	8000a8c <loRaWriteRegister>
  loRaSetLDOFlag();
 8000fc8:	f7ff ff73 	bl	8000eb2 <loRaSetLDOFlag>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0001e848 	.word	0x0001e848
 8000fd8:	0003d090 	.word	0x0003d090

08000fdc <loRaGetSignalBandwidth>:


long loRaGetSignalBandwidth(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

	  uint8_t bw = (loRaReadRegister(REG_MODEM_CONFIG_1) >> 4);
 8000fe2:	201d      	movs	r0, #29
 8000fe4:	f7ff fe10 	bl	8000c08 <loRaReadRegister>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	71fb      	strb	r3, [r7, #7]

	  switch (bw) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d832      	bhi.n	800105a <loRaGetSignalBandwidth+0x7e>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <loRaGetSignalBandwidth+0x20>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	08001025 	.word	0x08001025
 8001000:	0800102b 	.word	0x0800102b
 8001004:	08001031 	.word	0x08001031
 8001008:	08001037 	.word	0x08001037
 800100c:	0800103d 	.word	0x0800103d
 8001010:	08001043 	.word	0x08001043
 8001014:	08001049 	.word	0x08001049
 8001018:	0800104f 	.word	0x0800104f
 800101c:	08001053 	.word	0x08001053
 8001020:	08001057 	.word	0x08001057
	    case 0: return 7.8E3;
 8001024:	f641 6378 	movw	r3, #7800	; 0x1e78
 8001028:	e019      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 1: return 10.4E3;
 800102a:	f642 03a0 	movw	r3, #10400	; 0x28a0
 800102e:	e016      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 2: return 15.6E3;
 8001030:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8001034:	e013      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 3: return 20.8E3;
 8001036:	f245 1340 	movw	r3, #20800	; 0x5140
 800103a:	e010      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 4: return 31.25E3;
 800103c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001040:	e00d      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 5: return 41.7E3;
 8001042:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 8001046:	e00a      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 6: return 62.5E3;
 8001048:	f24f 4324 	movw	r3, #62500	; 0xf424
 800104c:	e007      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 7: return 125E3;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <loRaGetSignalBandwidth+0x8c>)
 8001050:	e005      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 8: return 250E3;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <loRaGetSignalBandwidth+0x90>)
 8001054:	e003      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	    case 9: return 500E3;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <loRaGetSignalBandwidth+0x94>)
 8001058:	e001      	b.n	800105e <loRaGetSignalBandwidth+0x82>
	  }
	  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0001e848 	.word	0x0001e848
 800106c:	0003d090 	.word	0x0003d090
 8001070:	0007a120 	.word	0x0007a120

08001074 <loRaGetSpreadingFactor>:

int loRaGetSpreadingFactor(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	return loRaReadRegister(REG_MODEM_CONFIG_2) >> 4;
 8001078:	201e      	movs	r0, #30
 800107a:	f7ff fdc5 	bl	8000c08 <loRaReadRegister>
 800107e:	4603      	mov	r3, r0
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	b2db      	uxtb	r3, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}

08001088 <loRaSetTxPower>:


//TODO: think about continuous mode


void loRaSetTxPower(int level, int boosted){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	 * 			with RFO: Pout=Pmax-(15-OutputPower)
	 * 			with PA_BOOST: Pout=17-(15-OutputPower)
	 *
	 * high and power settings from page 80 of datasheet (REG_PA_DAC settings)
	 */
	if(boosted == FALSE){
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d115      	bne.n	80010c4 <loRaSetTxPower+0x3c>
		if(level < 0){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da02      	bge.n	80010a4 <loRaSetTxPower+0x1c>
			level = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e004      	b.n	80010ae <loRaSetTxPower+0x26>
		}else if (level > 14){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b0e      	cmp	r3, #14
 80010a8:	dd01      	ble.n	80010ae <loRaSetTxPower+0x26>
			level = 14;
 80010aa:	230e      	movs	r3, #14
 80010ac:	607b      	str	r3, [r7, #4]
		}
		loRaWriteRegister(REG_PA_CONFIG, 0x70 | level);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	2009      	movs	r0, #9
 80010be:	f7ff fce5 	bl	8000a8c <loRaWriteRegister>
		   loRaWriteRegister(REG_PA_DAC, 0x84);
		   loRaSetOCP(100);
		}
		loRaWriteRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
	}
}
 80010c2:	e02b      	b.n	800111c <loRaSetTxPower+0x94>
		if (level > 17) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b11      	cmp	r3, #17
 80010c8:	dd0f      	ble.n	80010ea <loRaSetTxPower+0x62>
		   if (level > 20) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b14      	cmp	r3, #20
 80010ce:	dd01      	ble.n	80010d4 <loRaSetTxPower+0x4c>
			   level = 20;
 80010d0:	2314      	movs	r3, #20
 80010d2:	607b      	str	r3, [r7, #4]
		   level = level - 3;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b03      	subs	r3, #3
 80010d8:	607b      	str	r3, [r7, #4]
		   loRaWriteRegister(REG_PA_DAC, 0x87);
 80010da:	2187      	movs	r1, #135	; 0x87
 80010dc:	204d      	movs	r0, #77	; 0x4d
 80010de:	f7ff fcd5 	bl	8000a8c <loRaWriteRegister>
		   loRaSetOCP(140);
 80010e2:	208c      	movs	r0, #140	; 0x8c
 80010e4:	f7ff fdc2 	bl	8000c6c <loRaSetOCP>
 80010e8:	e00b      	b.n	8001102 <loRaSetTxPower+0x7a>
		   if (level < 2) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	dc01      	bgt.n	80010f4 <loRaSetTxPower+0x6c>
			  level = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
		   loRaWriteRegister(REG_PA_DAC, 0x84);
 80010f4:	2184      	movs	r1, #132	; 0x84
 80010f6:	204d      	movs	r0, #77	; 0x4d
 80010f8:	f7ff fcc8 	bl	8000a8c <loRaWriteRegister>
		   loRaSetOCP(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f7ff fdb5 	bl	8000c6c <loRaSetOCP>
		loRaWriteRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3b02      	subs	r3, #2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	2009      	movs	r0, #9
 8001118:	f7ff fcb8 	bl	8000a8c <loRaWriteRegister>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <loRaSleep>:


void loRaSleep(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	//sets the reg op to sleep (001 on last 3 bits)
	loRaWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff fcae 	bl	8000a8c <loRaWriteRegister>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <loRaIdle>:

void loRaIdle(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	//sets the reg op to idle (001 on last 3 bits)
	loRaWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001138:	2181      	movs	r1, #129	; 0x81
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff fca6 	bl	8000a8c <loRaWriteRegister>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	0000      	movs	r0, r0
	...

08001148 <loRaSetFrequency>:


/**
 * input is the value of .x MHZ ex: loRaSetFrequency(3) sets 868.3MHZ working freq
 */
void loRaSetFrequency(uint8_t value){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	//only to set when in SLEEP or STBY
	//formula: f=F(xosc)*frf/2^19 where F(xosc)=32Mhz
	uint32_t frf = (((uint64_t)(LORA_BASE_FREQ + value*100000))<<19)/32000000;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <loRaSetFrequency+0x88>)
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001162:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80011c8 <loRaSetFrequency+0x80>
 8001166:	ee37 7b06 	vadd.f64	d7, d7, d6
 800116a:	ec51 0b17 	vmov	r0, r1, d7
 800116e:	f7ff fb03 	bl	8000778 <__aeabi_d2ulz>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	f04f 0100 	mov.w	r1, #0
 800117e:	04d9      	lsls	r1, r3, #19
 8001180:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001184:	04d0      	lsls	r0, r2, #19
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <loRaSetFrequency+0x8c>)
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f7ff fac4 	bl	8000718 <__aeabi_uldivmod>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4613      	mov	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

	//the freq is set in 3 registers, MSB, MID, LSB
	//24 bit di dato 0x112233
	loRaWriteRegister(REG_FRF_MSB, (uint8_t)(frf>>16)); //11 in casting
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	2006      	movs	r0, #6
 80011a2:	f7ff fc73 	bl	8000a8c <loRaWriteRegister>
	loRaWriteRegister(REG_FRF_MID, (uint8_t)(frf>>8)); //22 in casting
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4619      	mov	r1, r3
 80011ae:	2007      	movs	r0, #7
 80011b0:	f7ff fc6c 	bl	8000a8c <loRaWriteRegister>
	loRaWriteRegister(REG_FRF_LSB, (uint8_t)(frf>>0)); //33 in casting
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	2008      	movs	r0, #8
 80011bc:	f7ff fc66 	bl	8000a8c <loRaWriteRegister>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	80000000 	.word	0x80000000
 80011cc:	41c9de50 	.word	0x41c9de50
 80011d0:	000186a0 	.word	0x000186a0
 80011d4:	01e84800 	.word	0x01e84800

080011d8 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <SELECT+0x18>)
 80011e2:	f008 f9a5 	bl	8009530 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f002 ff18 	bl	800401c <HAL_Delay>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58021000 	.word	0x58021000

080011f4 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2108      	movs	r1, #8
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <DESELECT+0x18>)
 80011fe:	f008 f997 	bl	8009530 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001202:	2001      	movs	r0, #1
 8001204:	f002 ff0a 	bl	800401c <HAL_Delay>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58021000 	.word	0x58021000

08001210 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800121a:	bf00      	nop
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SPI_TxByte+0x30>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d1f8      	bne.n	800121c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800122a:	1df9      	adds	r1, r7, #7
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	2201      	movs	r2, #1
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <SPI_TxByte+0x30>)
 8001232:	f00b fedd 	bl	800cff0 <HAL_SPI_Transmit>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000440 	.word	0x24000440

08001244 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001250:	bf00      	nop
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <SPI_TxBuffer+0x30>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b02      	cmp	r3, #2
 800125e:	d1f8      	bne.n	8001252 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <SPI_TxBuffer+0x30>)
 8001268:	f00b fec2 	bl	800cff0 <HAL_SPI_Transmit>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	24000440 	.word	0x24000440

08001278 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001282:	bf00      	nop
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <SPI_RxByte+0x34>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d1f8      	bne.n	8001284 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001292:	1dba      	adds	r2, r7, #6
 8001294:	1df9      	adds	r1, r7, #7
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <SPI_RxByte+0x34>)
 800129e:	f00c f8a3 	bl	800d3e8 <HAL_SPI_TransmitReceive>
  return data;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000440 	.word	0x24000440

080012b0 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012b8:	f7ff ffde 	bl	8001278 <SPI_RxByte>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	701a      	strb	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <SD_ReadyWait+0x30>)
 80012d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d8:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80012da:	f7ff ffcd 	bl	8001278 <SPI_RxByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d003      	beq.n	80012f0 <SD_ReadyWait+0x24>
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SD_ReadyWait+0x30>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f4      	bne.n	80012da <SD_ReadyWait+0xe>
  return res;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000236 	.word	0x24000236

08001300 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8001306:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800130a:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800130c:	f7ff ff72 	bl	80011f4 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e005      	b.n	8001322 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f7ff ff7a 	bl	8001210 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b09      	cmp	r3, #9
 8001326:	ddf6      	ble.n	8001316 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8001328:	f7ff ff56 	bl	80011d8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001340:	2395      	movs	r3, #149	; 0x95
 8001342:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8001344:	463b      	mov	r3, r7
 8001346:	2106      	movs	r1, #6
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff7b 	bl	8001244 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800134e:	e002      	b.n	8001356 <SD_PowerOn+0x56>
  {
    cnt--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b01      	subs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001356:	f7ff ff8f 	bl	8001278 <SPI_RxByte>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d002      	beq.n	8001366 <SD_PowerOn+0x66>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f4      	bne.n	8001350 <SD_PowerOn+0x50>
  }
  DESELECT();
 8001366:	f7ff ff45 	bl	80011f4 <DESELECT>
  SPI_TxByte(0XFF);
 800136a:	20ff      	movs	r0, #255	; 0xff
 800136c:	f7ff ff50 	bl	8001210 <SPI_TxByte>
  PowerFlag = 1;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <SD_PowerOn+0x80>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	24000239 	.word	0x24000239

08001384 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <SD_PowerOff+0x14>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	24000239 	.word	0x24000239

0800139c <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return PowerFlag;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <SD_CheckPower+0x14>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	24000239 	.word	0x24000239

080013b4 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <SD_RxDataBlock+0x58>)
 80013c0:	22c8      	movs	r2, #200	; 0xc8
 80013c2:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80013c4:	f7ff ff58 	bl	8001278 <SPI_RxByte>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d103      	bne.n	80013da <SD_RxDataBlock+0x26>
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <SD_RxDataBlock+0x58>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f4      	bne.n	80013c4 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2bfe      	cmp	r3, #254	; 0xfe
 80013de:	d001      	beq.n	80013e4 <SD_RxDataBlock+0x30>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e00f      	b.n	8001404 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff60 	bl	80012b0 <SPI_RxBytePtr>
  } while(len--);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	603a      	str	r2, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f4      	bne.n	80013e4 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80013fa:	f7ff ff3d 	bl	8001278 <SPI_RxByte>
  SPI_RxByte();
 80013fe:	f7ff ff3b 	bl	8001278 <SPI_RxByte>
  return TRUE;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	24000234 	.word	0x24000234

08001410 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001420:	f7ff ff54 	bl	80012cc <SD_ReadyWait>
 8001424:	4603      	mov	r3, r0
 8001426:	2bff      	cmp	r3, #255	; 0xff
 8001428:	d001      	beq.n	800142e <SD_TxDataBlock+0x1e>
 800142a:	2300      	movs	r3, #0
 800142c:	e02f      	b.n	800148e <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff feed 	bl	8001210 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	2bfd      	cmp	r3, #253	; 0xfd
 800143a:	d020      	beq.n	800147e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff feff 	bl	8001244 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8001446:	f7ff ff17 	bl	8001278 <SPI_RxByte>
    SPI_RxByte();
 800144a:	f7ff ff15 	bl	8001278 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800144e:	e00b      	b.n	8001468 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001450:	f7ff ff12 	bl	8001278 <SPI_RxByte>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2b05      	cmp	r3, #5
 8001460:	d006      	beq.n	8001470 <SD_TxDataBlock+0x60>
      i++;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	3301      	adds	r3, #1
 8001466:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b40      	cmp	r3, #64	; 0x40
 800146c:	d9f0      	bls.n	8001450 <SD_TxDataBlock+0x40>
 800146e:	e000      	b.n	8001472 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001470:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001472:	bf00      	nop
 8001474:	f7ff ff00 	bl	8001278 <SPI_RxByte>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0fa      	beq.n	8001474 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2b05      	cmp	r3, #5
 8001486:	d101      	bne.n	800148c <SD_TxDataBlock+0x7c>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <SD_TxDataBlock+0x7e>
  return FALSE;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	6039      	str	r1, [r7, #0]
 80014a0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014a2:	f7ff ff13 	bl	80012cc <SD_ReadyWait>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2bff      	cmp	r3, #255	; 0xff
 80014aa:	d001      	beq.n	80014b0 <SD_SendCmd+0x1a>
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	e042      	b.n	8001536 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff feac 	bl	8001210 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	0e1b      	lsrs	r3, r3, #24
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fea6 	bl	8001210 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fea0 	bl	8001210 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe9a 	bl	8001210 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe95 	bl	8001210 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	d102      	bne.n	80014f2 <SD_SendCmd+0x5c>
 80014ec:	2395      	movs	r3, #149	; 0x95
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e007      	b.n	8001502 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b48      	cmp	r3, #72	; 0x48
 80014f6:	d102      	bne.n	80014fe <SD_SendCmd+0x68>
 80014f8:	2387      	movs	r3, #135	; 0x87
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <SD_SendCmd+0x6c>
  else crc = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe83 	bl	8001210 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b4c      	cmp	r3, #76	; 0x4c
 800150e:	d101      	bne.n	8001514 <SD_SendCmd+0x7e>
 8001510:	f7ff feb2 	bl	8001278 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8001514:	230a      	movs	r3, #10
 8001516:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001518:	f7ff feae 	bl	8001278 <SPI_RxByte>
 800151c:	4603      	mov	r3, r0
 800151e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001520:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da05      	bge.n	8001534 <SD_SendCmd+0x9e>
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	3b01      	subs	r3, #1
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f1      	bne.n	8001518 <SD_SendCmd+0x82>
  return res;
 8001534:	7b7b      	ldrb	r3, [r7, #13]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_initialize+0x14>
 8001550:	2301      	movs	r3, #1
 8001552:	e0d1      	b.n	80016f8 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <SD_disk_initialize+0x1c0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <SD_disk_initialize+0x2a>
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <SD_disk_initialize+0x1c0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	e0c6      	b.n	80016f8 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800156a:	f7ff fec9 	bl	8001300 <SD_PowerOn>
  /* slave select */
  SELECT();
 800156e:	f7ff fe33 	bl	80011d8 <SELECT>
  /* check disk type */
  type = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001576:	2100      	movs	r1, #0
 8001578:	2040      	movs	r0, #64	; 0x40
 800157a:	f7ff ff8c 	bl	8001496 <SD_SendCmd>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	f040 80a1 	bne.w	80016c8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001586:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <SD_disk_initialize+0x1c4>)
 8001588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800158e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001592:	2048      	movs	r0, #72	; 0x48
 8001594:	f7ff ff7f 	bl	8001496 <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d155      	bne.n	800164a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e00c      	b.n	80015be <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80015a4:	7bfc      	ldrb	r4, [r7, #15]
 80015a6:	f7ff fe67 	bl	8001278 <SPI_RxByte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	f104 0310 	add.w	r3, r4, #16
 80015b2:	443b      	add	r3, r7
 80015b4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d9ef      	bls.n	80015a4 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d17e      	bne.n	80016c8 <SD_disk_initialize+0x188>
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	2baa      	cmp	r3, #170	; 0xaa
 80015ce:	d17b      	bne.n	80016c8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015d0:	2100      	movs	r1, #0
 80015d2:	2077      	movs	r0, #119	; 0x77
 80015d4:	f7ff ff5f 	bl	8001496 <SD_SendCmd>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d807      	bhi.n	80015ee <SD_disk_initialize+0xae>
 80015de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015e2:	2069      	movs	r0, #105	; 0x69
 80015e4:	f7ff ff57 	bl	8001496 <SD_SendCmd>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <SD_disk_initialize+0x1c4>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ec      	bne.n	80015d0 <SD_disk_initialize+0x90>
 80015f6:	e000      	b.n	80015fa <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015f8:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <SD_disk_initialize+0x1c4>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d062      	beq.n	80016c8 <SD_disk_initialize+0x188>
 8001602:	2100      	movs	r1, #0
 8001604:	207a      	movs	r0, #122	; 0x7a
 8001606:	f7ff ff46 	bl	8001496 <SD_SendCmd>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d15b      	bne.n	80016c8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e00c      	b.n	8001630 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001616:	7bfc      	ldrb	r4, [r7, #15]
 8001618:	f7ff fe2e 	bl	8001278 <SPI_RxByte>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	f104 0310 	add.w	r3, r4, #16
 8001624:	443b      	add	r3, r7
 8001626:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	3301      	adds	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d9ef      	bls.n	8001616 <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001636:	7a3b      	ldrb	r3, [r7, #8]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SD_disk_initialize+0x104>
 8001640:	230c      	movs	r3, #12
 8001642:	e000      	b.n	8001646 <SD_disk_initialize+0x106>
 8001644:	2304      	movs	r3, #4
 8001646:	73bb      	strb	r3, [r7, #14]
 8001648:	e03e      	b.n	80016c8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800164a:	2100      	movs	r1, #0
 800164c:	2077      	movs	r0, #119	; 0x77
 800164e:	f7ff ff22 	bl	8001496 <SD_SendCmd>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d808      	bhi.n	800166a <SD_disk_initialize+0x12a>
 8001658:	2100      	movs	r1, #0
 800165a:	2069      	movs	r0, #105	; 0x69
 800165c:	f7ff ff1b 	bl	8001496 <SD_SendCmd>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d801      	bhi.n	800166a <SD_disk_initialize+0x12a>
 8001666:	2302      	movs	r3, #2
 8001668:	e000      	b.n	800166c <SD_disk_initialize+0x12c>
 800166a:	2301      	movs	r3, #1
 800166c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d10e      	bne.n	8001692 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001674:	2100      	movs	r1, #0
 8001676:	2077      	movs	r0, #119	; 0x77
 8001678:	f7ff ff0d 	bl	8001496 <SD_SendCmd>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d80e      	bhi.n	80016a0 <SD_disk_initialize+0x160>
 8001682:	2100      	movs	r1, #0
 8001684:	2069      	movs	r0, #105	; 0x69
 8001686:	f7ff ff06 	bl	8001496 <SD_SendCmd>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <SD_disk_initialize+0x160>
 8001690:	e00c      	b.n	80016ac <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001692:	2100      	movs	r1, #0
 8001694:	2041      	movs	r0, #65	; 0x41
 8001696:	f7ff fefe 	bl	8001496 <SD_SendCmd>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <SD_disk_initialize+0x1c4>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e2      	bne.n	800166e <SD_disk_initialize+0x12e>
 80016a8:	e000      	b.n	80016ac <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016aa:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <SD_disk_initialize+0x1c4>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <SD_disk_initialize+0x184>
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	2050      	movs	r0, #80	; 0x50
 80016ba:	f7ff feec 	bl	8001496 <SD_SendCmd>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SD_disk_initialize+0x188>
 80016c4:	2300      	movs	r3, #0
 80016c6:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <SD_disk_initialize+0x1c8>)
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80016ce:	f7ff fd91 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80016d2:	f7ff fdd1 	bl	8001278 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <SD_disk_initialize+0x1c0>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SD_disk_initialize+0x1c0>)
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e001      	b.n	80016f2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016ee:	f7ff fe49 	bl	8001384 <SD_PowerOff>
  }
  return Stat;
 80016f2:	4b03      	ldr	r3, [pc, #12]	; (8001700 <SD_disk_initialize+0x1c0>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	24000001 	.word	0x24000001
 8001704:	24000234 	.word	0x24000234
 8001708:	24000238 	.word	0x24000238

0800170c <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SD_disk_status+0x14>
 800171c:	2301      	movs	r3, #1
 800171e:	e002      	b.n	8001726 <SD_disk_status+0x1a>
  return Stat;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SD_disk_status+0x28>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	24000001 	.word	0x24000001

08001738 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <SD_disk_read+0x1c>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <SD_disk_read+0x20>
 8001754:	2304      	movs	r3, #4
 8001756:	e051      	b.n	80017fc <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <SD_disk_read+0xcc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SD_disk_read+0x32>
 8001766:	2303      	movs	r3, #3
 8001768:	e048      	b.n	80017fc <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <SD_disk_read+0xd0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <SD_disk_read+0x44>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	607b      	str	r3, [r7, #4]
  SELECT();
 800177c:	f7ff fd2c 	bl	80011d8 <SELECT>
  if (count == 1)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d111      	bne.n	80017aa <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	2051      	movs	r0, #81	; 0x51
 800178a:	f7ff fe84 	bl	8001496 <SD_SendCmd>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d129      	bne.n	80017e8 <SD_disk_read+0xb0>
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	68b8      	ldr	r0, [r7, #8]
 800179a:	f7ff fe0b 	bl	80013b4 <SD_RxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <SD_disk_read+0xb0>
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	e01e      	b.n	80017e8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2052      	movs	r0, #82	; 0x52
 80017ae:	f7ff fe72 	bl	8001496 <SD_SendCmd>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d117      	bne.n	80017e8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	68b8      	ldr	r0, [r7, #8]
 80017be:	f7ff fdf9 	bl	80013b4 <SD_RxDataBlock>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <SD_disk_read+0xa6>
        buff += 512;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ce:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ed      	bne.n	80017b8 <SD_disk_read+0x80>
 80017dc:	e000      	b.n	80017e0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80017de:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80017e0:	2100      	movs	r1, #0
 80017e2:	204c      	movs	r0, #76	; 0x4c
 80017e4:	f7ff fe57 	bl	8001496 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 80017e8:	f7ff fd04 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80017ec:	f7ff fd44 	bl	8001278 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000001 	.word	0x24000001
 8001808:	24000238 	.word	0x24000238

0800180c <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <SD_disk_write+0x1c>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <SD_disk_write+0x20>
 8001828:	2304      	movs	r3, #4
 800182a:	e06b      	b.n	8001904 <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <SD_disk_write+0x100>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SD_disk_write+0x32>
 800183a:	2303      	movs	r3, #3
 800183c:	e062      	b.n	8001904 <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <SD_disk_write+0x100>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SD_disk_write+0x44>
 800184c:	2302      	movs	r3, #2
 800184e:	e059      	b.n	8001904 <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <SD_disk_write+0x104>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <SD_disk_write+0x56>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	607b      	str	r3, [r7, #4]
  SELECT();
 8001862:	f7ff fcb9 	bl	80011d8 <SELECT>
  if (count == 1)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d110      	bne.n	800188e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	2058      	movs	r0, #88	; 0x58
 8001870:	f7ff fe11 	bl	8001496 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d13a      	bne.n	80018f0 <SD_disk_write+0xe4>
 800187a:	21fe      	movs	r1, #254	; 0xfe
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7ff fdc7 	bl	8001410 <SD_TxDataBlock>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d033      	beq.n	80018f0 <SD_disk_write+0xe4>
      count = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e030      	b.n	80018f0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <SD_disk_write+0x104>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	2077      	movs	r0, #119	; 0x77
 800189e:	f7ff fdfa 	bl	8001496 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	2057      	movs	r0, #87	; 0x57
 80018a6:	f7ff fdf6 	bl	8001496 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	2059      	movs	r0, #89	; 0x59
 80018ae:	f7ff fdf2 	bl	8001496 <SD_SendCmd>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11b      	bne.n	80018f0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018b8:	21fc      	movs	r1, #252	; 0xfc
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f7ff fda8 	bl	8001410 <SD_TxDataBlock>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <SD_disk_write+0xd0>
        buff += 512;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018cc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ee      	bne.n	80018b8 <SD_disk_write+0xac>
 80018da:	e000      	b.n	80018de <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018dc:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80018de:	21fd      	movs	r1, #253	; 0xfd
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fd95 	bl	8001410 <SD_TxDataBlock>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <SD_disk_write+0xe4>
      {
        count = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80018f0:	f7ff fc80 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80018f4:	f7ff fcc0 	bl	8001278 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	24000001 	.word	0x24000001
 8001910:	24000238 	.word	0x24000238

08001914 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	603a      	str	r2, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	460b      	mov	r3, r1
 8001922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SD_disk_ioctl+0x1e>
 800192e:	2304      	movs	r3, #4
 8001930:	e115      	b.n	8001b5e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ctrl == CTRL_POWER)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d124      	bne.n	8001988 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d012      	beq.n	800196c <SD_disk_ioctl+0x58>
 8001946:	2b02      	cmp	r3, #2
 8001948:	dc1a      	bgt.n	8001980 <SD_disk_ioctl+0x6c>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <SD_disk_ioctl+0x40>
 800194e:	2b01      	cmp	r3, #1
 8001950:	d006      	beq.n	8001960 <SD_disk_ioctl+0x4c>
 8001952:	e015      	b.n	8001980 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001954:	f7ff fd16 	bl	8001384 <SD_PowerOff>
      res = RES_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800195e:	e0fc      	b.n	8001b5a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001960:	f7ff fcce 	bl	8001300 <SD_PowerOn>
      res = RES_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800196a:	e0f6      	b.n	8001b5a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	1c5c      	adds	r4, r3, #1
 8001970:	f7ff fd14 	bl	800139c <SD_CheckPower>
 8001974:	4603      	mov	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800197e:	e0ec      	b.n	8001b5a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001980:	2304      	movs	r3, #4
 8001982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001986:	e0e8      	b.n	8001b5a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001988:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <SD_disk_ioctl+0x254>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SD_disk_ioctl+0x86>
 8001996:	2303      	movs	r3, #3
 8001998:	e0e1      	b.n	8001b5e <SD_disk_ioctl+0x24a>
    SELECT();
 800199a:	f7ff fc1d 	bl	80011d8 <SELECT>
    switch (ctrl)
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	2b0d      	cmp	r3, #13
 80019a2:	f200 80cb 	bhi.w	8001b3c <SD_disk_ioctl+0x228>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <SD_disk_ioctl+0x98>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001aa7 	.word	0x08001aa7
 80019b0:	080019e5 	.word	0x080019e5
 80019b4:	08001a97 	.word	0x08001a97
 80019b8:	08001b3d 	.word	0x08001b3d
 80019bc:	08001b3d 	.word	0x08001b3d
 80019c0:	08001b3d 	.word	0x08001b3d
 80019c4:	08001b3d 	.word	0x08001b3d
 80019c8:	08001b3d 	.word	0x08001b3d
 80019cc:	08001b3d 	.word	0x08001b3d
 80019d0:	08001b3d 	.word	0x08001b3d
 80019d4:	08001b3d 	.word	0x08001b3d
 80019d8:	08001ab9 	.word	0x08001ab9
 80019dc:	08001add 	.word	0x08001add
 80019e0:	08001b01 	.word	0x08001b01
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019e4:	2100      	movs	r1, #0
 80019e6:	2049      	movs	r0, #73	; 0x49
 80019e8:	f7ff fd55 	bl	8001496 <SD_SendCmd>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80a8 	bne.w	8001b44 <SD_disk_ioctl+0x230>
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2110      	movs	r1, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fcda 	bl	80013b4 <SD_RxDataBlock>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 809e 	beq.w	8001b44 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10e      	bne.n	8001a30 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a12:	7d7b      	ldrb	r3, [r7, #21]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	7d3b      	ldrb	r3, [r7, #20]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a26:	8bfb      	ldrh	r3, [r7, #30]
 8001a28:	029a      	lsls	r2, r3, #10
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e02e      	b.n	8001a8e <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a30:	7c7b      	ldrb	r3, [r7, #17]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	7dbb      	ldrb	r3, [r7, #22]
 8001a3a:	09db      	lsrs	r3, r3, #7
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	7d7b      	ldrb	r3, [r7, #21]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0306 	and.w	r3, r3, #6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3302      	adds	r3, #2
 8001a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a58:	7d3b      	ldrb	r3, [r7, #20]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	7cfb      	ldrb	r3, [r7, #19]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	7cbb      	ldrb	r3, [r7, #18]
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a80:	8bfa      	ldrh	r2, [r7, #30]
 8001a82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a86:	3b09      	subs	r3, #9
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001a94:	e056      	b.n	8001b44 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aa4:	e055      	b.n	8001b52 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001aa6:	f7ff fc11 	bl	80012cc <SD_ReadyWait>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d14b      	bne.n	8001b48 <SD_disk_ioctl+0x234>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ab6:	e047      	b.n	8001b48 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2049      	movs	r0, #73	; 0x49
 8001abc:	f7ff fceb 	bl	8001496 <SD_SendCmd>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d142      	bne.n	8001b4c <SD_disk_ioctl+0x238>
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f7ff fc73 	bl	80013b4 <SD_RxDataBlock>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03b      	beq.n	8001b4c <SD_disk_ioctl+0x238>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ada:	e037      	b.n	8001b4c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001adc:	2100      	movs	r1, #0
 8001ade:	204a      	movs	r0, #74	; 0x4a
 8001ae0:	f7ff fcd9 	bl	8001496 <SD_SendCmd>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d132      	bne.n	8001b50 <SD_disk_ioctl+0x23c>
 8001aea:	2110      	movs	r1, #16
 8001aec:	6a38      	ldr	r0, [r7, #32]
 8001aee:	f7ff fc61 	bl	80013b4 <SD_RxDataBlock>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02b      	beq.n	8001b50 <SD_disk_ioctl+0x23c>
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001afe:	e027      	b.n	8001b50 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b00:	2100      	movs	r1, #0
 8001b02:	207a      	movs	r0, #122	; 0x7a
 8001b04:	f7ff fcc7 	bl	8001496 <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b14:	e00b      	b.n	8001b2e <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001b16:	6a3c      	ldr	r4, [r7, #32]
 8001b18:	1c63      	adds	r3, r4, #1
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	f7ff fbac 	bl	8001278 <SPI_RxByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ef      	bls.n	8001b16 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b42:	e006      	b.n	8001b52 <SD_disk_ioctl+0x23e>
      break;
 8001b44:	bf00      	nop
 8001b46:	e004      	b.n	8001b52 <SD_disk_ioctl+0x23e>
      break;
 8001b48:	bf00      	nop
 8001b4a:	e002      	b.n	8001b52 <SD_disk_ioctl+0x23e>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e000      	b.n	8001b52 <SD_disk_ioctl+0x23e>
      break;
 8001b50:	bf00      	nop
    }
    DESELECT();
 8001b52:	f7ff fb4f 	bl	80011f4 <DESELECT>
    SPI_RxByte();
 8001b56:	f7ff fb8f 	bl	8001278 <SPI_RxByte>
  }
  return res;
 8001b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	372c      	adds	r7, #44	; 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000001 	.word	0x24000001

08001b6c <assignUShort>:

vitalSystemInfoStruct vitalSystemInfo;

//LORA

void assignUShort(uint8_t *out_packet, int *ind, unsigned short ass) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
	union {
		unsigned short a;
		uint8_t bytes[2];
	} thing;
	thing.a = ass;
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	823b      	strh	r3, [r7, #16]
	for (int i = 0; i < 2; i++) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e00f      	b.n	8001ba4 <assignUShort+0x38>
		out_packet[i + *ind] = thing.bytes[i];
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	f107 0110 	add.w	r1, r7, #16
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	440a      	add	r2, r1
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	ddec      	ble.n	8001b84 <assignUShort+0x18>
	}
	(*ind) += 2;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <createLoRaPacket>:

void createLoRaPacket(uint8_t *out_packet) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	//turns the struct into composed uint array. Total 30 bytes
	int ind = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
	assignUShort(out_packet, &ind, vitalSystemInfo.DCDCData.outVoltage);
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001bce:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffc8 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.DCDCData.outCurrent);
 8001bdc:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001bde:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffc0 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.DCDCData.outPower);
 8001bec:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001bee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffb8 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.DCDCData.inputTension);
 8001bfc:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001bfe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb0 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.DCDCData.dissipatoreTemp);
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001c0e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa6 	bl	8001b6c <assignUShort>

	//TODO: SAVE THE RAW, DONT DO CALCULATIONS
	assignUShort(out_packet, &ind,
			(unsigned short) ((vitalSystemInfo.psValues.ps1 * ADC16BIT) / ADCVDD));
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001c22:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c2a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001d58 <createLoRaPacket+0x198>
 8001c2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c32:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001d60 <createLoRaPacket+0x1a0>
 8001c36:	ee86 7b05 	vdiv.f64	d7, d6, d5
	assignUShort(out_packet, &ind,
 8001c3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff8e 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind,
			(unsigned short) ((vitalSystemInfo.psValues.ps2 * ADC16BIT) / ADCVDD));
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001c52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c5a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001d58 <createLoRaPacket+0x198>
 8001c5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c62:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8001d60 <createLoRaPacket+0x1a0>
 8001c66:	ee86 7b05 	vdiv.f64	d7, d6, d5
	assignUShort(out_packet, &ind,
 8001c6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c6e:	ee17 3a90 	vmov	r3, s15
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff76 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind,
			(unsigned short) ((vitalSystemInfo.psValues.ps3 * ADC16BIT) / ADCVDD));
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001c82:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c8a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001d58 <createLoRaPacket+0x198>
 8001c8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c92:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001d60 <createLoRaPacket+0x1a0>
 8001c96:	ee86 7b05 	vdiv.f64	d7, d6, d5
	assignUShort(out_packet, &ind,
 8001c9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c9e:	ee17 3a90 	vmov	r3, s15
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff5e 	bl	8001b6c <assignUShort>

	assignUShort(out_packet, &ind, vitalSystemInfo.controllerData.temp);
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff55 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.controllerData.temp); //TODO: put speed here
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff4c 	bl	8001b6c <assignUShort>

	assignUShort(out_packet, &ind,
			(unsigned short) ((vitalSystemInfo.h2SensorValue * ADC16BIT)
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001cd6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001cda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cde:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001d58 <createLoRaPacket+0x198>
 8001ce2:	ee27 6b06 	vmul.f64	d6, d7, d6
					/ ADCVDD));
 8001ce6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001d60 <createLoRaPacket+0x1a0>
 8001cea:	ee86 7b05 	vdiv.f64	d7, d6, d5
	assignUShort(out_packet, &ind,
 8001cee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff34 	bl	8001b6c <assignUShort>

	assignUShort(out_packet, &ind, vitalSystemInfo.BMSData.voltage);
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff2b 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.BMSData.current);
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff22 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.BMSData.soc);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff19 	bl	8001b6c <assignUShort>
	assignUShort(out_packet, &ind, vitalSystemInfo.BMSData.temperature);
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <createLoRaPacket+0x1a8>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff10 	bl	8001b6c <assignUShort>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	f3af 8000 	nop.w
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40efffe0 	.word	0x40efffe0
 8001d60:	e76c8b44 	.word	0xe76c8b44
 8001d64:	400aa9fb 	.word	0x400aa9fb
 8001d68:	240007ac 	.word	0x240007ac

08001d6c <bytesToUShort>:

//UART

static unsigned short bytesToUShort(uint8_t b1, uint8_t b2) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
	unsigned short wd = ((unsigned short) b1 << 8) | b2;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	81fb      	strh	r3, [r7, #14]
	return wd;
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <bytesToSShort>:

static signed short bytesToSShort(uint8_t b1, uint8_t b2) {
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	460a      	mov	r2, r1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	4613      	mov	r3, r2
 8001da8:	71bb      	strb	r3, [r7, #6]
	signed short wd = ((signed short) b1 << 8) | b2;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	81fb      	strh	r3, [r7, #14]
	return wd;
 8001db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <bytesToInt>:

static int bytesToInt(uint8_t b1, uint8_t b2) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	71bb      	strb	r3, [r7, #6]
	int wd = ((int) b1 << 8) | b2;
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	021a      	lsls	r2, r3, #8
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
	return wd;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <decodeDCDCReceivedData>:

void decodeDCDCReceivedData(uint8_t *rdata) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	//i get 10 bytes
	vitalSystemInfo.DCDCData.outVoltage = bytesToUShort(rdata[2], rdata[1]);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7ff ffb0 	bl	8001d6c <bytesToUShort>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <decodeDCDCReceivedData+0x9c>)
 8001e12:	849a      	strh	r2, [r3, #36]	; 0x24
	vitalSystemInfo.DCDCData.outCurrent = bytesToUShort(rdata[4], rdata[3]);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f7ff ffa2 	bl	8001d6c <bytesToUShort>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <decodeDCDCReceivedData+0x9c>)
 8001e2e:	84da      	strh	r2, [r3, #38]	; 0x26
	vitalSystemInfo.DCDCData.outPower = bytesToUShort(rdata[6], rdata[5]);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3306      	adds	r3, #6
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3305      	adds	r3, #5
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7ff ff94 	bl	8001d6c <bytesToUShort>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <decodeDCDCReceivedData+0x9c>)
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
	vitalSystemInfo.DCDCData.inputTension = bytesToUShort(rdata[8], rdata[7]);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3307      	adds	r3, #7
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7ff ff86 	bl	8001d6c <bytesToUShort>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <decodeDCDCReceivedData+0x9c>)
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
	vitalSystemInfo.DCDCData.dissipatoreTemp = bytesToSShort(rdata[10],
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	330a      	adds	r3, #10
 8001e6c:	781a      	ldrb	r2, [r3, #0]
			rdata[9]);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3309      	adds	r3, #9
	vitalSystemInfo.DCDCData.dissipatoreTemp = bytesToSShort(rdata[10],
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f7ff ff8f 	bl	8001d9a <bytesToSShort>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <decodeDCDCReceivedData+0x9c>)
 8001e82:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	240007ac 	.word	0x240007ac

08001e90 <readBMSData>:

//BMS
#define XFER_BUFFER_LENGTH 13
#define BMS_CURRENT_OFFSET 30000

void readBMSData() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	//HAL_UART_Receive(&huart5, receivedBMSUartData, 13, 1000);
	if (receivedBMSUartData[0] == 0xA5) {
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <readBMSData+0x90>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2ba5      	cmp	r3, #165	; 0xa5
 8001e9a:	d13d      	bne.n	8001f18 <readBMSData+0x88>
		//right data
		switch (receivedBMSUartData[2]) {
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <readBMSData+0x90>)
 8001e9e:	789b      	ldrb	r3, [r3, #2]
 8001ea0:	2b96      	cmp	r3, #150	; 0x96
 8001ea2:	d02a      	beq.n	8001efa <readBMSData+0x6a>
 8001ea4:	2b96      	cmp	r3, #150	; 0x96
 8001ea6:	dc38      	bgt.n	8001f1a <readBMSData+0x8a>
 8001ea8:	2b90      	cmp	r3, #144	; 0x90
 8001eaa:	d002      	beq.n	8001eb2 <readBMSData+0x22>
 8001eac:	2b94      	cmp	r3, #148	; 0x94
 8001eae:	d02a      	beq.n	8001f06 <readBMSData+0x76>
			vitalSystemInfo.BMSData.noOfCells = receivedBMSUartData[4];
			vitalSystemInfo.BMSData.noOfTempSensors = receivedBMSUartData[5];
			break;
		}
	}
}
 8001eb0:	e033      	b.n	8001f1a <readBMSData+0x8a>
			vitalSystemInfo.BMSData.voltage = bytesToInt(receivedBMSUartData[4],
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <readBMSData+0x90>)
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <readBMSData+0x90>)
 8001eb8:	7952      	ldrb	r2, [r2, #5]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff83 	bl	8001dc8 <bytesToInt>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <readBMSData+0x94>)
 8001ec6:	6113      	str	r3, [r2, #16]
			vitalSystemInfo.BMSData.current = bytesToInt(receivedBMSUartData[8],
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <readBMSData+0x90>)
 8001eca:	7a1b      	ldrb	r3, [r3, #8]
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <readBMSData+0x90>)
 8001ece:	7a52      	ldrb	r2, [r2, #9]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff78 	bl	8001dc8 <bytesToInt>
 8001ed8:	4602      	mov	r2, r0
					receivedBMSUartData[9]) - BMS_CURRENT_OFFSET;
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <readBMSData+0x98>)
 8001edc:	4413      	add	r3, r2
			vitalSystemInfo.BMSData.current = bytesToInt(receivedBMSUartData[8],
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <readBMSData+0x94>)
 8001ee0:	6153      	str	r3, [r2, #20]
			vitalSystemInfo.BMSData.soc = bytesToInt(receivedBMSUartData[10],
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <readBMSData+0x90>)
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <readBMSData+0x90>)
 8001ee8:	7ad2      	ldrb	r2, [r2, #11]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff6b 	bl	8001dc8 <bytesToInt>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <readBMSData+0x94>)
 8001ef6:	6193      	str	r3, [r2, #24]
			break;
 8001ef8:	e00f      	b.n	8001f1a <readBMSData+0x8a>
			vitalSystemInfo.BMSData.temperature = receivedBMSUartData[4];
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <readBMSData+0x90>)
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <readBMSData+0x94>)
 8001f02:	621a      	str	r2, [r3, #32]
			break;
 8001f04:	e009      	b.n	8001f1a <readBMSData+0x8a>
			vitalSystemInfo.BMSData.noOfCells = receivedBMSUartData[4];
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <readBMSData+0x90>)
 8001f08:	791a      	ldrb	r2, [r3, #4]
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <readBMSData+0x94>)
 8001f0c:	771a      	strb	r2, [r3, #28]
			vitalSystemInfo.BMSData.noOfTempSensors = receivedBMSUartData[5];
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <readBMSData+0x90>)
 8001f10:	795a      	ldrb	r2, [r3, #5]
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <readBMSData+0x94>)
 8001f14:	775a      	strb	r2, [r3, #29]
			break;
 8001f16:	e000      	b.n	8001f1a <readBMSData+0x8a>
	}
 8001f18:	bf00      	nop
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2400082c 	.word	0x2400082c
 8001f24:	240007ac 	.word	0x240007ac
 8001f28:	ffff8ad0 	.word	0xffff8ad0

08001f2c <requestBMSData>:

int BMSDataDelay;
bool tempDataReq;

void requestBMSData() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
	//Requesting

	if (tempDataReq == false) {
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <requestBMSData+0xc8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d026      	beq.n	8001f8e <requestBMSData+0x62>
		//first here

		uint8_t txData[13];
		txData[0] = 0xA5;
 8001f40:	23a5      	movs	r3, #165	; 0xa5
 8001f42:	743b      	strb	r3, [r7, #16]
		txData[1] = 0x40;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	747b      	strb	r3, [r7, #17]
		txData[2] = 0x90;
 8001f48:	2390      	movs	r3, #144	; 0x90
 8001f4a:	74bb      	strb	r3, [r7, #18]
		txData[3] = 0x08;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	74fb      	strb	r3, [r7, #19]

		txData[4] = 0x00;
 8001f50:	2300      	movs	r3, #0
 8001f52:	753b      	strb	r3, [r7, #20]
		txData[5] = 0x00;
 8001f54:	2300      	movs	r3, #0
 8001f56:	757b      	strb	r3, [r7, #21]
		txData[6] = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75bb      	strb	r3, [r7, #22]
		txData[7] = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
		txData[8] = 0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	763b      	strb	r3, [r7, #24]
		txData[9] = 0x00;
 8001f64:	2300      	movs	r3, #0
 8001f66:	767b      	strb	r3, [r7, #25]
		txData[10] = 0x00;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	76bb      	strb	r3, [r7, #26]
		txData[11] = 0x00;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	76fb      	strb	r3, [r7, #27]

		txData[12] = 0x7d;			//checksum
 8001f70:	237d      	movs	r3, #125	; 0x7d
 8001f72:	773b      	strb	r3, [r7, #28]
		HAL_UART_Transmit(&huart5, txData, XFER_BUFFER_LENGTH, 30);
 8001f74:	f107 0110 	add.w	r1, r7, #16
 8001f78:	231e      	movs	r3, #30
 8001f7a:	220d      	movs	r2, #13
 8001f7c:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <requestBMSData+0xcc>)
 8001f7e:	f00b fd88 	bl	800da92 <HAL_UART_Transmit>
		BMSDataDelay = HAL_GetTick();
 8001f82:	f002 f83f 	bl	8004004 <HAL_GetTick>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <requestBMSData+0xd0>)
 8001f8c:	601a      	str	r2, [r3, #0]
		tempDataReq == true;
	}

	if ((HAL_GetTick() - BMSDataDelay >= 30) && (tempDataReq == true)) {
 8001f8e:	f002 f839 	bl	8004004 <HAL_GetTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <requestBMSData+0xd0>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	2b1d      	cmp	r3, #29
 8001f9c:	d926      	bls.n	8001fec <requestBMSData+0xc0>
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <requestBMSData+0xc8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d022      	beq.n	8001fec <requestBMSData+0xc0>
		uint8_t txData[13];
		txData[0] = 0xA5;
 8001fa6:	23a5      	movs	r3, #165	; 0xa5
 8001fa8:	703b      	strb	r3, [r7, #0]
		txData[1] = 0x40;
 8001faa:	2340      	movs	r3, #64	; 0x40
 8001fac:	707b      	strb	r3, [r7, #1]
		txData[2] = 0x96;
 8001fae:	2396      	movs	r3, #150	; 0x96
 8001fb0:	70bb      	strb	r3, [r7, #2]
		txData[3] = 0x08;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	70fb      	strb	r3, [r7, #3]

		txData[4] = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	713b      	strb	r3, [r7, #4]
		txData[5] = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	717b      	strb	r3, [r7, #5]
		txData[6] = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71bb      	strb	r3, [r7, #6]
		txData[7] = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]
		txData[8] = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	723b      	strb	r3, [r7, #8]
		txData[9] = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	727b      	strb	r3, [r7, #9]
		txData[10] = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	72bb      	strb	r3, [r7, #10]
		txData[11] = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	72fb      	strb	r3, [r7, #11]

		txData[12] = 0x83;			//checksum
 8001fd6:	2383      	movs	r3, #131	; 0x83
 8001fd8:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(&huart5, txData, XFER_BUFFER_LENGTH, 30);
 8001fda:	4639      	mov	r1, r7
 8001fdc:	231e      	movs	r3, #30
 8001fde:	220d      	movs	r2, #13
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <requestBMSData+0xcc>)
 8001fe2:	f00b fd56 	bl	800da92 <HAL_UART_Transmit>
		tempDataReq = false;
 8001fe6:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <requestBMSData+0xc8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
	}

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	24000840 	.word	0x24000840
 8001ff8:	2400055c 	.word	0x2400055c
 8001ffc:	2400083c 	.word	0x2400083c

08002000 <mount_sd_card>:

FATFS FatFs; //Fatfs handle
FIL fil; //File handle
FRESULT fres; //Result after operations

void mount_sd_card() {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002006:	2201      	movs	r2, #1
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <mount_sd_card+0x30>)
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <mount_sd_card+0x34>)
 800200c:	f010 f99e 	bl	801234c <f_mount>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <mount_sd_card+0x38>)
 8002016:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <mount_sd_card+0x38>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <mount_sd_card+0x26>
		//printf("No SD Card found : (%i)\r\n", fres);
		return;
	} else {
		int a = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	e000      	b.n	8002028 <mount_sd_card+0x28>
		return;
 8002026:	bf00      	nop
	}
}
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	08017588 	.word	0x08017588
 8002034:	24000844 	.word	0x24000844
 8002038:	240028a8 	.word	0x240028a8

0800203c <write_to_file>:
int BUSVoltage;
int BUSCurrent;
int engineSpeed;
int alarm; //?????? è questo?

void write_to_file() {
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8002042:	af16      	add	r7, sp, #88	; 0x58

	do {
		uint32_t currentTime = HAL_GetTick();
 8002044:	f001 ffde 	bl	8004004 <HAL_GetTick>
 8002048:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
		char dataString[200];
		char headerString[327];
		sprintf(dataString,
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <write_to_file+0x15c>)
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <write_to_file+0x15c>)
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	6239      	str	r1, [r7, #32]
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <write_to_file+0x15c>)
 800205a:	6a19      	ldr	r1, [r3, #32]
 800205c:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <write_to_file+0x15c>)
 800205e:	699c      	ldr	r4, [r3, #24]
				"%d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %d, %d, %d, %d, %d, %lu\n",
				vitalSystemInfo.BMSData.current,
				vitalSystemInfo.BMSData.voltage,
				vitalSystemInfo.BMSData.temperature,
				vitalSystemInfo.BMSData.soc,
				vitalSystemInfo.DCDCData.outVoltage,
 8002060:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <write_to_file+0x15c>)
 8002062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		sprintf(dataString,
 8002064:	61fb      	str	r3, [r7, #28]
				vitalSystemInfo.DCDCData.outCurrent,
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <write_to_file+0x15c>)
 8002068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
		sprintf(dataString,
 800206a:	61bb      	str	r3, [r7, #24]
				vitalSystemInfo.DCDCData.outPower,
 800206c:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <write_to_file+0x15c>)
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		sprintf(dataString,
 8002070:	617b      	str	r3, [r7, #20]
				vitalSystemInfo.DCDCData.inputTension,
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <write_to_file+0x15c>)
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
		sprintf(dataString,
 8002076:	613b      	str	r3, [r7, #16]
				vitalSystemInfo.DCDCData.dissipatoreTemp,
 8002078:	4b47      	ldr	r3, [pc, #284]	; (8002198 <write_to_file+0x15c>)
 800207a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
		sprintf(dataString,
 800207e:	60fb      	str	r3, [r7, #12]
				vitalSystemInfo.h2SensorValue, vitalSystemInfo.psValues.ps1,
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <write_to_file+0x15c>)
 8002082:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
		sprintf(dataString,
 8002086:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				vitalSystemInfo.h2SensorValue, vitalSystemInfo.psValues.ps1,
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <write_to_file+0x15c>)
 800208c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
		sprintf(dataString,
 8002090:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				vitalSystemInfo.psValues.ps2, vitalSystemInfo.psValues.ps3,
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <write_to_file+0x15c>)
 8002096:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
		sprintf(dataString,
 800209a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				vitalSystemInfo.psValues.ps2, vitalSystemInfo.psValues.ps3,
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <write_to_file+0x15c>)
 80020a0:	edd3 4a0f 	vldr	s9, [r3, #60]	; 0x3c
		sprintf(dataString,
 80020a4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <write_to_file+0x15c>)
 80020aa:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <write_to_file+0x15c>)
 80020ae:	681e      	ldr	r6, [r3, #0]
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <write_to_file+0x15c>)
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	60b8      	str	r0, [r7, #8]
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <write_to_file+0x15c>)
 80020b8:	6898      	ldr	r0, [r3, #8]
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <write_to_file+0x15c>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80020c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80020c8:	9315      	str	r3, [sp, #84]	; 0x54
 80020ca:	9214      	str	r2, [sp, #80]	; 0x50
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	9213      	str	r2, [sp, #76]	; 0x4c
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	9212      	str	r2, [sp, #72]	; 0x48
 80020d4:	9611      	str	r6, [sp, #68]	; 0x44
 80020d6:	9510      	str	r5, [sp, #64]	; 0x40
 80020d8:	ed8d 4b0e 	vstr	d4, [sp, #56]	; 0x38
 80020dc:	ed8d 5b0c 	vstr	d5, [sp, #48]	; 0x30
 80020e0:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 80020e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80020e8:	68fd      	ldr	r5, [r7, #12]
 80020ea:	9506      	str	r5, [sp, #24]
 80020ec:	693d      	ldr	r5, [r7, #16]
 80020ee:	9505      	str	r5, [sp, #20]
 80020f0:	697d      	ldr	r5, [r7, #20]
 80020f2:	9504      	str	r5, [sp, #16]
 80020f4:	69bd      	ldr	r5, [r7, #24]
 80020f6:	9503      	str	r5, [sp, #12]
 80020f8:	69fd      	ldr	r5, [r7, #28]
 80020fa:	9502      	str	r5, [sp, #8]
 80020fc:	9401      	str	r4, [sp, #4]
 80020fe:	9100      	str	r1, [sp, #0]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	4925      	ldr	r1, [pc, #148]	; (800219c <write_to_file+0x160>)
 8002106:	f011 fd29 	bl	8013b5c <siprintf>
				vitalSystemInfo.controllerData.temp,
				vitalSystemInfo.engineInfo.BUSVoltage,
				vitalSystemInfo.engineInfo.BUSCurrent,
				vitalSystemInfo.engineInfo.engineSpeed,
				vitalSystemInfo.engineInfo.alarm, currentTime);
		bool newFileTitle = false;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (!setFilename) {
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <write_to_file+0x164>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <write_to_file+0xf8>
			//begin
			newFileTitle = true;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			snprintf(filename, sizeof(filename), "%ld.txt", HAL_GetTick());
 800211e:	f001 ff71 	bl	8004004 <HAL_GetTick>
 8002122:	4603      	mov	r3, r0
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <write_to_file+0x168>)
 8002126:	2114      	movs	r1, #20
 8002128:	481f      	ldr	r0, [pc, #124]	; (80021a8 <write_to_file+0x16c>)
 800212a:	f011 fce3 	bl	8013af4 <sniprintf>
			setFilename = 1;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <write_to_file+0x164>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
		}

		//Open the file
		fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	491c      	ldr	r1, [pc, #112]	; (80021a8 <write_to_file+0x16c>)
 8002138:	481c      	ldr	r0, [pc, #112]	; (80021ac <write_to_file+0x170>)
 800213a:	f010 f94d 	bl	80123d8 <f_open>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <write_to_file+0x174>)
 8002144:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <write_to_file+0x174>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <write_to_file+0x118>
			//printf("File creation/open Error : (%i)\r\n", fres);
			//HAL_Delay(700);
			mount_sd_card();
 800214e:	f7ff ff57 	bl	8002000 <mount_sd_card>
		f_puts(dataString, &fil);

		f_close(&fil);

	} while (0);
}
 8002152:	e01b      	b.n	800218c <write_to_file+0x150>
		if (newFileTitle) {
 8002154:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <write_to_file+0x13e>
			newFileTitle = false;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			sprintf(headerString,
 8002162:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002166:	4913      	ldr	r1, [pc, #76]	; (80021b4 <write_to_file+0x178>)
 8002168:	4618      	mov	r0, r3
 800216a:	f011 fcf7 	bl	8013b5c <siprintf>
			f_puts(headerString, &fil);
 800216e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <write_to_file+0x170>)
 8002174:	4618      	mov	r0, r3
 8002176:	f010 fdae 	bl	8012cd6 <f_puts>
		f_puts(dataString, &fil);
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	490b      	ldr	r1, [pc, #44]	; (80021ac <write_to_file+0x170>)
 8002180:	4618      	mov	r0, r3
 8002182:	f010 fda8 	bl	8012cd6 <f_puts>
		f_close(&fil);
 8002186:	4809      	ldr	r0, [pc, #36]	; (80021ac <write_to_file+0x170>)
 8002188:	f010 fd04 	bl	8012b94 <f_close>
}
 800218c:	bf00      	nop
 800218e:	f507 7711 	add.w	r7, r7, #580	; 0x244
 8002192:	46bd      	mov	sp, r7
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	bf00      	nop
 8002198:	240007ac 	.word	0x240007ac
 800219c:	0801758c 	.word	0x0801758c
 80021a0:	240028ac 	.word	0x240028ac
 80021a4:	080175dc 	.word	0x080175dc
 80021a8:	240028b0 	.word	0x240028b0
 80021ac:	24001878 	.word	0x24001878
 80021b0:	240028a8 	.word	0x240028a8
 80021b4:	080175e4 	.word	0x080175e4

080021b8 <HAL_UARTEx_RxEventCallback>:
 float hoursRemaining = totalRemainingW/totalPowerNOW;
 }*/

//UART callbacks
/*UART received data handling*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
	if (huart == &huart7) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_UARTEx_RxEventCallback+0x70>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10c      	bne.n	80021e6 <HAL_UARTEx_RxEventCallback+0x2e>
		//received form dcdc uart
		if (receivedDCDCUartData[0] == 0x18) {
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_UARTEx_RxEventCallback+0x74>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b18      	cmp	r3, #24
 80021d2:	d102      	bne.n	80021da <HAL_UARTEx_RxEventCallback+0x22>
			//we received the data we wanted
			decodeDCDCReceivedData(receivedDCDCUartData);
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <HAL_UARTEx_RxEventCallback+0x74>)
 80021d6:	f7ff fe0b 	bl	8001df0 <decodeDCDCReceivedData>
		}
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, receivedDCDCUartData, 20);
 80021da:	2214      	movs	r2, #20
 80021dc:	4913      	ldr	r1, [pc, #76]	; (800222c <HAL_UARTEx_RxEventCallback+0x74>)
 80021de:	4812      	ldr	r0, [pc, #72]	; (8002228 <HAL_UARTEx_RxEventCallback+0x70>)
 80021e0:	f00e f9ab 	bl	801053a <HAL_UARTEx_ReceiveToIdle_IT>
		readBMSData();
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, receivedBMSUartData, 13);
	} else if (huart == &huart8) {
		//Data from GPS
	}
}
 80021e4:	e01b      	b.n	800221e <HAL_UARTEx_RxEventCallback+0x66>
	} else if (huart == &huart4) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_UARTEx_RxEventCallback+0x78>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10c      	bne.n	8002208 <HAL_UARTEx_RxEventCallback+0x50>
		vitalSystemInfo.controllerData.temp = receivedControllerUARTData[7] / 2;
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_UARTEx_RxEventCallback+0x7c>)
 80021f0:	79db      	ldrb	r3, [r3, #7]
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_UARTEx_RxEventCallback+0x80>)
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart4, receivedControllerUARTData, 12);
 80021fc:	220c      	movs	r2, #12
 80021fe:	490d      	ldr	r1, [pc, #52]	; (8002234 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_UARTEx_RxEventCallback+0x78>)
 8002202:	f00b fd9d 	bl	800dd40 <HAL_UART_Receive_IT>
}
 8002206:	e00a      	b.n	800221e <HAL_UARTEx_RxEventCallback+0x66>
	} else if (huart == &huart5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_UARTEx_RxEventCallback+0x84>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d106      	bne.n	800221e <HAL_UARTEx_RxEventCallback+0x66>
		readBMSData();
 8002210:	f7ff fe3e 	bl	8001e90 <readBMSData>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, receivedBMSUartData, 13);
 8002214:	220d      	movs	r2, #13
 8002216:	490a      	ldr	r1, [pc, #40]	; (8002240 <HAL_UARTEx_RxEventCallback+0x88>)
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <HAL_UARTEx_RxEventCallback+0x84>)
 800221a:	f00e f98e 	bl	801053a <HAL_UARTEx_ReceiveToIdle_IT>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	240005f0 	.word	0x240005f0
 800222c:	240007f0 	.word	0x240007f0
 8002230:	240004c8 	.word	0x240004c8
 8002234:	24000824 	.word	0x24000824
 8002238:	240007ac 	.word	0x240007ac
 800223c:	2400055c 	.word	0x2400055c
 8002240:	2400082c 	.word	0x2400082c
 8002244:	00000000 	.word	0x00000000

08002248 <HAL_ADC_ConvCpltCallback>:

uint16_t adc1Buff[500]; //100 reads per adc channel, 16 bits prec
uint16_t adc2Buff[200]; //50 reads per adc channel, 16 bits prec
uint16_t adc3Buff[200]; //50 reads per adc channel, 16 bits prec

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a6b      	ldr	r2, [pc, #428]	; (8002400 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	f040 80bf 	bne.w	80023d8 <HAL_ADC_ConvCpltCallback+0x190>
		//adc 1 gets ps1, ps2,ps3, psfc1, h2
		float ps1sum = 0;
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
		float ps2sum = 0;
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
		float ps3sum = 0;
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
		float psfcsum = 0;
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
		float h2sum = 0;
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]

		for (int i = 0; i < ADC1BUFSIZE; i += ADC1Channels) {
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	e04c      	b.n	8002318 <HAL_ADC_ConvCpltCallback+0xd0>
			ps1sum += adc1Buff[i + 0];
 800227e:	4a61      	ldr	r2, [pc, #388]	; (8002404 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc7 7a07 	vstr	s15, [r7, #28]
			ps2sum += adc1Buff[i + 2];
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3302      	adds	r3, #2
 800229e:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80022b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b4:	edc7 7a06 	vstr	s15, [r7, #24]
			ps3sum += adc1Buff[i + 1];
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80022ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d2:	edc7 7a05 	vstr	s15, [r7, #20]
			h2sum += adc1Buff[i + 3];
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3303      	adds	r3, #3
 80022da:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	edc7 7a03 	vstr	s15, [r7, #12]
			psfcsum += adc1Buff[i + 4];
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4a42      	ldr	r2, [pc, #264]	; (8002404 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002306:	ed97 7a04 	vldr	s14, [r7, #16]
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	edc7 7a04 	vstr	s15, [r7, #16]
		for (int i = 0; i < ADC1BUFSIZE; i += ADC1Channels) {
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3305      	adds	r3, #5
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800231e:	dbae      	blt.n	800227e <HAL_ADC_ConvCpltCallback+0x36>
		}
		//we got the values, the adc is 16 bits
		//computes ((sum /100)/65535)*3.3 50 microvolts precision!

		vitalSystemInfo.psValues.ps1 = ((((ps1sum
				/ ((ADC1BUFSIZE / ADC1Channels))) / ADC16BIT) * 5.0) - 0.0709)
 8002320:	ed97 7a07 	vldr	s14, [r7, #28]
 8002324:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002408 <HAL_ADC_ConvCpltCallback+0x1c0>
 8002328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800232c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002330:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80023e8 <HAL_ADC_ConvCpltCallback+0x1a0>
 8002334:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002338:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800233c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002340:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80023f0 <HAL_ADC_ConvCpltCallback+0x1a8>
 8002344:	ee37 6b46 	vsub.f64	d6, d7, d6
				/ 1.0146;
 8002348:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80023f8 <HAL_ADC_ConvCpltCallback+0x1b0>
 800234c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002350:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		vitalSystemInfo.psValues.ps1 = ((((ps1sum
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002356:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vitalSystemInfo.psValues.ps2 =
				((ps2sum / ((ADC1BUFSIZE / ADC1Channels))) / ADC16BIT) * 5.0;
 800235a:	ed97 7a06 	vldr	s14, [r7, #24]
 800235e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002408 <HAL_ADC_ConvCpltCallback+0x1c0>
 8002362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002366:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800236a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80023e8 <HAL_ADC_ConvCpltCallback+0x1a0>
 800236e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002372:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8002376:	ee27 7b06 	vmul.f64	d7, d7, d6
 800237a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		vitalSystemInfo.psValues.ps2 =
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002380:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		vitalSystemInfo.psValues.ps3 =
				((ps3sum / ((ADC1BUFSIZE / ADC1Channels))) / ADC16BIT) * 5.0;
 8002384:	ed97 7a05 	vldr	s14, [r7, #20]
 8002388:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002408 <HAL_ADC_ConvCpltCallback+0x1c0>
 800238c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002390:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002394:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80023e8 <HAL_ADC_ConvCpltCallback+0x1a0>
 8002398:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800239c:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80023a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		vitalSystemInfo.psValues.ps3 =
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_ADC_ConvCpltCallback+0x1c4>)
 80023aa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		vitalSystemInfo.h2SensorValue =
				((h2sum / ((ADC1BUFSIZE / ADC1Channels))) / ADC16BIT) * 5.0;
 80023ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80023b2:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002408 <HAL_ADC_ConvCpltCallback+0x1c0>
 80023b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023be:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80023e8 <HAL_ADC_ConvCpltCallback+0x1a0>
 80023c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c6:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80023ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		vitalSystemInfo.h2SensorValue =
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_ADC_ConvCpltCallback+0x1c4>)
 80023d4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	}

}
 80023d8:	bf00      	nop
 80023da:	3724      	adds	r7, #36	; 0x24
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	f3af 8000 	nop.w
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40efffe0 	.word	0x40efffe0
 80023f0:	9d495183 	.word	0x9d495183
 80023f4:	3fb22680 	.word	0x3fb22680
 80023f8:	35a85879 	.word	0x35a85879
 80023fc:	3ff03bcd 	.word	0x3ff03bcd
 8002400:	2400023c 	.word	0x2400023c
 8002404:	240028c4 	.word	0x240028c4
 8002408:	42c80000 	.word	0x42c80000
 800240c:	240007ac 	.word	0x240007ac

08002410 <emergencyGeneralActions>:
enum NUCLEOSTate status;

bool fansOn = false;
long int fansOnCounter;

void emergencyGeneralActions() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	//start the fans and open the relay
	fansOn = true;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <emergencyGeneralActions+0x24>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	fansOnCounter = HAL_GetTick();
 800241a:	f001 fdf3 	bl	8004004 <HAL_GetTick>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <emergencyGeneralActions+0x28>)
 8002424:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <emergencyGeneralActions+0x2c>)
 800242c:	f007 f880 	bl	8009530 <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	24002cad 	.word	0x24002cad
 8002438:	24002cb0 	.word	0x24002cb0
 800243c:	58021000 	.word	0x58021000

08002440 <checkAlarms>:

//3.3 is 1000 ppm.
#define H2_ALARM_TRESHOLD 4.5 //900 ppm
#define H2_ALARM_RESET_VALUE 2.0 //400 ppm

void checkAlarms() {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

	if (vitalSystemInfo.h2SensorValue > H2_ALARM_TRESHOLD) {
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <checkAlarms+0x34>)
 8002446:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800244a:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	dc00      	bgt.n	800245a <checkAlarms+0x1a>
	}


	//TODO: check killcord activation (probably to manage in callback)

}
 8002458:	e009      	b.n	800246e <checkAlarms+0x2e>
		HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <checkAlarms+0x38>)
 8002460:	f007 f866 	bl	8009530 <HAL_GPIO_WritePin>
		emergencyGeneralActions();
 8002464:	f7ff ffd4 	bl	8002410 <emergencyGeneralActions>
		status = h2Emergency;
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <checkAlarms+0x3c>)
 800246a:	2202      	movs	r2, #2
 800246c:	701a      	strb	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	240007ac 	.word	0x240007ac
 8002478:	58021000 	.word	0x58021000
 800247c:	24002cac 	.word	0x24002cac

08002480 <backToNominalState>:

void backToNominalState() {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	//switch power on
	HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <backToNominalState+0x40>)
 800248a:	f007 f851 	bl	8009530 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800248e:	2064      	movs	r0, #100	; 0x64
 8002490:	f001 fdc4 	bl	800401c <HAL_Delay>
	//switch controller on, switching for 3 secs (relay2)
	HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249a:	480a      	ldr	r0, [pc, #40]	; (80024c4 <backToNominalState+0x44>)
 800249c:	f007 f848 	bl	8009530 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80024a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024a4:	f001 fdba 	bl	800401c <HAL_Delay>
	HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <backToNominalState+0x44>)
 80024b0:	f007 f83e 	bl	8009530 <HAL_GPIO_WritePin>
	status = nominal;
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <backToNominalState+0x48>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	58021000 	.word	0x58021000
 80024c4:	58020c00 	.word	0x58020c00
 80024c8:	24002cac 	.word	0x24002cac

080024cc <writeDCDCData>:



void writeDCDCData() {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b096      	sub	sp, #88	; 0x58
 80024d0:	af02      	add	r7, sp, #8
	char dataString[60];
	int v = 70;
 80024d2:	2346      	movs	r3, #70	; 0x46
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	int c = 20;
 80024d6:	2314      	movs	r3, #20
 80024d8:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned int p = 1800;
 80024da:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
	sprintf(dataString, "%d %d %u\n", v, c, p);
 80024e0:	1d38      	adds	r0, r7, #4
 80024e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ea:	490b      	ldr	r1, [pc, #44]	; (8002518 <writeDCDCData+0x4c>)
 80024ec:	f011 fb36 	bl	8013b5c <siprintf>
	size_t dataLength = strlen(dataString); // Calculate the length of the data string
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fefc 	bl	80002f0 <strlen>
 80024f8:	6438      	str	r0, [r7, #64]	; 0x40

	HAL_UART_Transmit(&huart9, (uint8_t*) dataString, dataLength, 100);
 80024fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	1d39      	adds	r1, r7, #4
 8002500:	2364      	movs	r3, #100	; 0x64
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <writeDCDCData+0x50>)
 8002504:	f00b fac5 	bl	800da92 <HAL_UART_Transmit>
	HAL_Delay(10);
 8002508:	200a      	movs	r0, #10
 800250a:	f001 fd87 	bl	800401c <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3750      	adds	r7, #80	; 0x50
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0801772c 	.word	0x0801772c
 800251c:	24000718 	.word	0x24000718

08002520 <readDCDCDataPolling>:

void readDCDCDataPolling() {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart7, receivedDCDCUartData, 11, 5);
 8002524:	2305      	movs	r3, #5
 8002526:	220b      	movs	r2, #11
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <readDCDCDataPolling+0x24>)
 800252a:	4807      	ldr	r0, [pc, #28]	; (8002548 <readDCDCDataPolling+0x28>)
 800252c:	f00b fb3f 	bl	800dbae <HAL_UART_Receive>
	if (receivedDCDCUartData[0] == 0x18) {
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <readDCDCDataPolling+0x24>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b18      	cmp	r3, #24
 8002536:	d102      	bne.n	800253e <readDCDCDataPolling+0x1e>
		decodeDCDCReceivedData(receivedDCDCUartData);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <readDCDCDataPolling+0x24>)
 800253a:	f7ff fc59 	bl	8001df0 <decodeDCDCReceivedData>
	}

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	240007f0 	.word	0x240007f0
 8002548:	240005f0 	.word	0x240005f0

0800254c <manageFans>:

#define EMERGENCY_FANS_TIME_MS 60000 //60 secs delay for fans after emergency

void manageFans() {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	if (fansOn == true) {
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <manageFans+0x50>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d019      	beq.n	800258c <manageFans+0x40>
		if (HAL_GetTick() > fansOnCounter + EMERGENCY_FANS_TIME_MS) {
 8002558:	f001 fd54 	bl	8004004 <HAL_GetTick>
 800255c:	4601      	mov	r1, r0
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <manageFans+0x54>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002566:	4413      	add	r3, r2
 8002568:	4299      	cmp	r1, r3
 800256a:	d908      	bls.n	800257e <manageFans+0x32>
			//stop fans
			fansOn = false;
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <manageFans+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <manageFans+0x58>)
 800257a:	f006 ffd9 	bl	8009530 <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <manageFans+0x58>)
 8002586:	f006 ffd3 	bl	8009530 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
	}
}
 800258a:	e005      	b.n	8002598 <manageFans+0x4c>
		HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	4804      	ldr	r0, [pc, #16]	; (80025a4 <manageFans+0x58>)
 8002594:	f006 ffcc 	bl	8009530 <HAL_GPIO_WritePin>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	24002cad 	.word	0x24002cad
 80025a0:	24002cb0 	.word	0x24002cb0
 80025a4:	58021000 	.word	0x58021000

080025a8 <manageLoRaTransmission>:
bool loraActive;




void manageLoRaTransmission(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
	if (loraActive == true) {
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <manageLoRaTransmission+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d015      	beq.n	80025e2 <manageLoRaTransmission+0x3a>
		if (loRaIsTrasmitting() == FALSE) {
 80025b6:	f7fe fb02 	bl	8000bbe <loRaIsTrasmitting>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d110      	bne.n	80025e2 <manageLoRaTransmission+0x3a>
			uint8_t buff[30];
			createLoRaPacket(buff);
 80025c0:	463b      	mov	r3, r7
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fafc 	bl	8001bc0 <createLoRaPacket>
			loRaClearIRQReceive();
 80025c8:	f7fe fb08 	bl	8000bdc <loRaClearIRQReceive>
			loRaSendPacket(TRUE, buff, sizeof(buff));
 80025cc:	463b      	mov	r3, r7
 80025ce:	221e      	movs	r2, #30
 80025d0:	4619      	mov	r1, r3
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7fe fa8c 	bl	8000af0 <loRaSendPacket>
			loRaSetSpreadingFactor(cntLOR);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <manageLoRaTransmission+0x48>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fc03 	bl	8000de8 <loRaSetSpreadingFactor>
		}
	}
}
 80025e2:	bf00      	nop
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24002cbc 	.word	0x24002cbc
 80025f0:	24002cb8 	.word	0x24002cb8

080025f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025fa:	f001 fc7d 	bl	8003ef8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025fe:	f000 f917 	bl	8002830 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8002602:	f000 f98b 	bl	800291c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002606:	f000 fd0d 	bl	8003024 <MX_GPIO_Init>
	MX_DMA_Init();
 800260a:	f000 fceb 	bl	8002fe4 <MX_DMA_Init>
	MX_ADC1_Init();
 800260e:	f000 f9a3 	bl	8002958 <MX_ADC1_Init>
	MX_SPI4_Init();
 8002612:	f000 fb15 	bl	8002c40 <MX_SPI4_Init>
	MX_UART4_Init();
 8002616:	f000 fb69 	bl	8002cec <MX_UART4_Init>
	MX_UART5_Init();
 800261a:	f000 fbb3 	bl	8002d84 <MX_UART5_Init>
	MX_UART7_Init();
 800261e:	f000 fbfd 	bl	8002e1c <MX_UART7_Init>
	MX_SPI2_Init();
 8002622:	f000 fab7 	bl	8002b94 <MX_SPI2_Init>
	MX_UART8_Init();
 8002626:	f000 fc45 	bl	8002eb4 <MX_UART8_Init>
	MX_FDCAN2_Init();
 800262a:	f000 fa4f 	bl	8002acc <MX_FDCAN2_Init>
	MX_UART9_Init();
 800262e:	f000 fc8d 	bl	8002f4c <MX_UART9_Init>
	MX_FATFS_Init();
 8002632:	f00e f825 	bl	8010680 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(300);
 8002636:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800263a:	f001 fcef 	bl	800401c <HAL_Delay>

	//HAL_UART_Receive_IT(&huart4, receivedControllerUARTData, 4);
	//HAL_UART_Receive_IT(&huart7, receivedDCDCUartData, 3);
	//HAL_UART_Receive_DMA (&huart4, receivedDCDCUartData, 3);

	status = nucleoInit;
 800263e:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <main+0x1f8>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

	loraActive = false;
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <main+0x1fc>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]

	if (loRaInit(&hspi2, LORA_CS_GPIO_Port, LORA_CS_Pin, LORA_DIO0_GPIO_Port,
 800264a:	2308      	movs	r3, #8
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	4b69      	ldr	r3, [pc, #420]	; (80027f4 <main+0x200>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2310      	movs	r3, #16
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <main+0x200>)
 8002658:	2201      	movs	r2, #1
 800265a:	4967      	ldr	r1, [pc, #412]	; (80027f8 <main+0x204>)
 800265c:	4867      	ldr	r0, [pc, #412]	; (80027fc <main+0x208>)
 800265e:	f7fe fb45 	bl	8000cec <loRaInit>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01f      	beq.n	80026a8 <main+0xb4>
	LORA_DIO0_Pin, LORA_RST_GPIO_Port, LORA_RST_Pin)) {
		//LoRaSuccess
		loRaFullyTransmitMode();
 8002668:	f7fe fac0 	bl	8000bec <loRaFullyTransmitMode>
		loRaEnableCRC();
 800266c:	f7fe fba8 	bl	8000dc0 <loRaEnableCRC>
		loRaSetSyncWord(0xF4);
 8002670:	20f4      	movs	r0, #244	; 0xf4
 8002672:	f7fe fb2d 	bl	8000cd0 <loRaSetSyncWord>
		loRaSetTxPower(21, TRUE); //boost the signal to TRUW
 8002676:	2101      	movs	r1, #1
 8002678:	2015      	movs	r0, #21
 800267a:	f7fe fd05 	bl	8001088 <loRaSetTxPower>
		loRaSetSpreadingFactor(7);
 800267e:	2007      	movs	r0, #7
 8002680:	f7fe fbb2 	bl	8000de8 <loRaSetSpreadingFactor>
		loRaSetSignalBandwidth(250E3);
 8002684:	485e      	ldr	r0, [pc, #376]	; (8002800 <main+0x20c>)
 8002686:	f7fe fc41 	bl	8000f0c <loRaSetSignalBandwidth>
		loRaSetCodingRate(9);
 800268a:	2009      	movs	r0, #9
 800268c:	f7fe fbe9 	bl	8000e62 <loRaSetCodingRate>
		//start sending packet
		uint8_t buff = 0x34;
 8002690:	2334      	movs	r3, #52	; 0x34
 8002692:	71fb      	strb	r3, [r7, #7]
		loRaSendPacket(TRUE, &buff, sizeof(buff));
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	2201      	movs	r2, #1
 8002698:	4619      	mov	r1, r3
 800269a:	2001      	movs	r0, #1
 800269c:	f7fe fa28 	bl	8000af0 <loRaSendPacket>
		loraActive = true;
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <main+0x1fc>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e012      	b.n	80026ce <main+0xda>

		//LoRaFail
		//stays in loop while it cannot initialize the lora module
		//TODO: REMOVE THIS BLOCKING BIT!
		do {
			HAL_Delay(1000);
 80026a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ac:	f001 fcb6 	bl	800401c <HAL_Delay>
		} while (!loRaInit(&hspi2, LORA_CS_GPIO_Port, LORA_CS_Pin,
 80026b0:	2308      	movs	r3, #8
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <main+0x200>)
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2310      	movs	r3, #16
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <main+0x200>)
 80026be:	2201      	movs	r2, #1
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <main+0x204>)
 80026c2:	484e      	ldr	r0, [pc, #312]	; (80027fc <main+0x208>)
 80026c4:	f7fe fb12 	bl	8000cec <loRaInit>
 80026c8:	4603      	mov	r3, r0
		LORA_DIO0_GPIO_Port, LORA_DIO0_Pin, LORA_RST_GPIO_Port,
		LORA_RST_Pin));
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ec      	beq.n	80026a8 <main+0xb4>

	}

	//Initialize ADC DMA
	HAL_ADC_Start_DMA(&hadc1, adc1Buff, sizeof(adc1Buff) / sizeof(adc1Buff[0]));
 80026ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026d2:	494c      	ldr	r1, [pc, #304]	; (8002804 <main+0x210>)
 80026d4:	484c      	ldr	r0, [pc, #304]	; (8002808 <main+0x214>)
 80026d6:	f002 f807 	bl	80046e8 <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	cntLOR = 7;
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <main+0x218>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]

	dd = HAL_GetTick();
 80026e0:	f001 fc90 	bl	8004004 <HAL_GetTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <main+0x21c>)
 80026ea:	601a      	str	r2, [r3, #0]
	fansOn = false;
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <main+0x220>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
	tempDataReq = false;
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <main+0x224>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

	mount_sd_card();
 80026f8:	f7ff fc82 	bl	8002000 <mount_sd_card>

	HAL_UARTEx_ReceiveToIdle_IT(&huart5, receivedBMSUartData, 13);
 80026fc:	220d      	movs	r2, #13
 80026fe:	4947      	ldr	r1, [pc, #284]	; (800281c <main+0x228>)
 8002700:	4847      	ldr	r0, [pc, #284]	; (8002820 <main+0x22c>)
 8002702:	f00d ff1a 	bl	801053a <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_FDCAN_Start(&hfdcan2);
 8002706:	4847      	ldr	r0, [pc, #284]	; (8002824 <main+0x230>)
 8002708:	f006 f80a 	bl	8008720 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	4844      	ldr	r0, [pc, #272]	; (8002824 <main+0x230>)
 8002712:	f006 f831 	bl	8008778 <HAL_FDCAN_ActivateNotification>

	while (1) {
		//readDCDCDataPolling();
		//writeDCDCData();

		switch (status) {
 8002716:	4b35      	ldr	r3, [pc, #212]	; (80027ec <main+0x1f8>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b05      	cmp	r3, #5
 800271c:	d854      	bhi.n	80027c8 <main+0x1d4>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <main+0x130>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002775 	.word	0x08002775
 800272c:	0800277f 	.word	0x0800277f
 8002730:	080027c9 	.word	0x080027c9
 8002734:	0800279d 	.word	0x0800279d
 8002738:	080027a5 	.word	0x080027a5
		case nucleoInit:
			// Code for nucleoInit state
			HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	4839      	ldr	r0, [pc, #228]	; (8002828 <main+0x234>)
 8002742:	f006 fef5 	bl	8009530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_SET);
 8002746:	2201      	movs	r2, #1
 8002748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800274c:	4829      	ldr	r0, [pc, #164]	; (80027f4 <main+0x200>)
 800274e:	f006 feef 	bl	8009530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002758:	4833      	ldr	r0, [pc, #204]	; (8002828 <main+0x234>)
 800275a:	f006 fee9 	bl	8009530 <HAL_GPIO_WritePin>
			//generateFakeH2Eme();
			if (HAL_GPIO_ReadPin(SYSTEM_BUTTON_GPIO_Port, SYSTEM_BUTTON_Pin)
 800275e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002762:	4831      	ldr	r0, [pc, #196]	; (8002828 <main+0x234>)
 8002764:	f006 fecc 	bl	8009500 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d12f      	bne.n	80027ce <main+0x1da>
					== GPIO_PIN_RESET) {
				backToNominalState();
 800276e:	f7ff fe87 	bl	8002480 <backToNominalState>
			}
			break;
 8002772:	e02c      	b.n	80027ce <main+0x1da>
		case nominal:
			// Code for nominal state
			//int g = 0;
			readDCDCDataPolling();
 8002774:	f7ff fed4 	bl	8002520 <readDCDCDataPolling>
			writeDCDCData();
 8002778:	f7ff fea8 	bl	80024cc <writeDCDCData>
			//calculateOptimalPower();
			//HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
			break;
 800277c:	e02a      	b.n	80027d4 <main+0x1e0>
		case h2Emergency:
			// Code for h2Emergency state
			//keep checking h2 values

			if (vitalSystemInfo.h2SensorValue < H2_ALARM_RESET_VALUE) {
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <main+0x238>)
 8002780:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002784:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	d400      	bmi.n	8002794 <main+0x1a0>
				//can restart
				status = waitingStep;
			}
			break;
 8002792:	e01f      	b.n	80027d4 <main+0x1e0>
				status = waitingStep;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <main+0x1f8>)
 8002796:	2205      	movs	r2, #5
 8002798:	701a      	strb	r2, [r3, #0]
			break;
 800279a:	e01b      	b.n	80027d4 <main+0x1e0>
		case killcordEmergency:
			//TODO: Code for killcordEmergency state
			status = killcordEmergency;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <main+0x1f8>)
 800279e:	2204      	movs	r2, #4
 80027a0:	701a      	strb	r2, [r3, #0]
			break;
 80027a2:	e017      	b.n	80027d4 <main+0x1e0>
		case waitingStep:
			if (HAL_GPIO_ReadPin(SYSTEM_BUTTON_GPIO_Port, SYSTEM_BUTTON_Pin)
 80027a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a8:	481f      	ldr	r0, [pc, #124]	; (8002828 <main+0x234>)
 80027aa:	f006 fea9 	bl	8009500 <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <main+0x1de>
					== GPIO_PIN_RESET && !fansOn) {
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <main+0x220>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d007      	beq.n	80027d2 <main+0x1de>
				backToNominalState();
 80027c2:	f7ff fe5d 	bl	8002480 <backToNominalState>
			}
			break;
 80027c6:	e004      	b.n	80027d2 <main+0x1de>
		default:
			// Code for handling unknown state, should never happen
			backToNominalState();
 80027c8:	f7ff fe5a 	bl	8002480 <backToNominalState>
			break;
 80027cc:	e002      	b.n	80027d4 <main+0x1e0>
			break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <main+0x1e0>
			break;
 80027d2:	bf00      	nop
		}

		//check for alarms
		checkAlarms();
 80027d4:	f7ff fe34 	bl	8002440 <checkAlarms>

		//activate fans if needed
		manageFans();
 80027d8:	f7ff feb8 	bl	800254c <manageFans>


		//ask bms for data
		requestBMSData();
 80027dc:	f7ff fba6 	bl	8001f2c <requestBMSData>
		//readBMSDataPolling();

		//write data to sd card log
		write_to_file();
 80027e0:	f7ff fc2c 	bl	800203c <write_to_file>

		//send lora packet
		manageLoRaTransmission();
 80027e4:	f7ff fee0 	bl	80025a8 <manageLoRaTransmission>
		switch (status) {
 80027e8:	e795      	b.n	8002716 <main+0x122>
 80027ea:	bf00      	nop
 80027ec:	24002cac 	.word	0x24002cac
 80027f0:	24002cbc 	.word	0x24002cbc
 80027f4:	58020c00 	.word	0x58020c00
 80027f8:	58020800 	.word	0x58020800
 80027fc:	240003b8 	.word	0x240003b8
 8002800:	0003d090 	.word	0x0003d090
 8002804:	240028c4 	.word	0x240028c4
 8002808:	2400023c 	.word	0x2400023c
 800280c:	24002cb8 	.word	0x24002cb8
 8002810:	24002cb4 	.word	0x24002cb4
 8002814:	24002cad 	.word	0x24002cad
 8002818:	24000840 	.word	0x24000840
 800281c:	2400082c 	.word	0x2400082c
 8002820:	2400055c 	.word	0x2400055c
 8002824:	24000318 	.word	0x24000318
 8002828:	58021000 	.word	0x58021000
 800282c:	240007ac 	.word	0x240007ac

08002830 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b09c      	sub	sp, #112	; 0x70
 8002834:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	224c      	movs	r2, #76	; 0x4c
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f010 fb02 	bl	8012e48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2220      	movs	r2, #32
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f010 fafc 	bl	8012e48 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <SystemClock_Config+0xe4>)
 8002852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800285a:	2004      	movs	r0, #4
 800285c:	f006 fe82 	bl	8009564 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002860:	2300      	movs	r3, #0
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <SystemClock_Config+0xe8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <SystemClock_Config+0xe8>)
 800286a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <SystemClock_Config+0xe8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800287c:	bf00      	nop
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <SystemClock_Config+0xe8>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288a:	d1f8      	bne.n	800287e <SystemClock_Config+0x4e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800288c:	2302      	movs	r3, #2
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002890:	2301      	movs	r3, #1
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8002894:	2340      	movs	r3, #64	; 0x40
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002898:	2302      	movs	r3, #2
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800289c:	2300      	movs	r3, #0
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80028a0:	2304      	movs	r3, #4
 80028a2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 8;
 80028a4:	2308      	movs	r3, #8
 80028a6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80028ac:	2303      	movs	r3, #3
 80028ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80028b0:	2302      	movs	r3, #2
 80028b2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028b4:	230c      	movs	r3, #12
 80028b6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4618      	mov	r0, r3
 80028c6:	f006 fea7 	bl	8009618 <HAL_RCC_OscConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <SystemClock_Config+0xa4>
		Error_Handler();
 80028d0:	f000 fc80 	bl	80031d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028d4:	233f      	movs	r3, #63	; 0x3f
 80028d6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d8:	2303      	movs	r3, #3
 80028da:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80028e4:	2340      	movs	r3, #64	; 0x40
 80028e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028e8:	2340      	movs	r3, #64	; 0x40
 80028ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2102      	movs	r1, #2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f007 fabe 	bl	8009e7c <HAL_RCC_ClockConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0xda>
		Error_Handler();
 8002906:	f000 fc65 	bl	80031d4 <Error_Handler>
	}
}
 800290a:	bf00      	nop
 800290c:	3770      	adds	r7, #112	; 0x70
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400
 8002918:	58024800 	.word	0x58024800

0800291c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b0b0      	sub	sp, #192	; 0xc0
 8002920:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002922:	463b      	mov	r3, r7
 8002924:	22c0      	movs	r2, #192	; 0xc0
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f010 fa8d 	bl	8012e48 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800292e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800293a:	2300      	movs	r3, #0
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800293e:	463b      	mov	r3, r7
 8002940:	4618      	mov	r0, r3
 8002942:	f007 fe27 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <PeriphCommonClock_Config+0x34>
		Error_Handler();
 800294c:	f000 fc42 	bl	80031d4 <Error_Handler>
	}
}
 8002950:	bf00      	nop
 8002952:	37c0      	adds	r7, #192	; 0xc0
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800296a:	463b      	mov	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	615a      	str	r2, [r3, #20]
 800297a:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <MX_ADC1_Init+0x158>)
 800297e:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <MX_ADC1_Init+0x15c>)
 8002980:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8002982:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002988:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <MX_ADC1_Init+0x158>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002992:	2201      	movs	r2, #1
 8002994:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002998:	2208      	movs	r2, #8
 800299a:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800299c:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <MX_ADC1_Init+0x158>)
 800299e:	2200      	movs	r2, #0
 80029a0:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 5;
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029aa:	2205      	movs	r2, #5
 80029ac:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b4:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029c2:	2203      	movs	r2, #3
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80029cc:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80029da:	4835      	ldr	r0, [pc, #212]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029dc:	f001 fd2a 	bl	8004434 <HAL_ADC_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_ADC1_Init+0x92>
		Error_Handler();
 80029e6:	f000 fbf5 	bl	80031d4 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	482e      	ldr	r0, [pc, #184]	; (8002ab0 <MX_ADC1_Init+0x158>)
 80029f6:	f002 fc29 	bl	800524c <HAL_ADCEx_MultiModeConfigChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_ADC1_Init+0xac>
		Error_Handler();
 8002a00:	f000 fbe8 	bl	80031d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <MX_ADC1_Init+0x160>)
 8002a06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a08:	2306      	movs	r3, #6
 8002a0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a14:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a16:	2304      	movs	r3, #4
 8002a18:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a22:	463b      	mov	r3, r7
 8002a24:	4619      	mov	r1, r3
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002a28:	f001 ff26 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_ADC1_Init+0xde>
		Error_Handler();
 8002a32:	f000 fbcf 	bl	80031d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <MX_ADC1_Init+0x164>)
 8002a38:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4619      	mov	r1, r3
 8002a42:	481b      	ldr	r0, [pc, #108]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002a44:	f001 ff18 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_ADC1_Init+0xfa>
		Error_Handler();
 8002a4e:	f000 fbc1 	bl	80031d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MX_ADC1_Init+0x168>)
 8002a54:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a56:	2312      	movs	r3, #18
 8002a58:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4814      	ldr	r0, [pc, #80]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002a60:	f001 ff0a 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_ADC1_Init+0x116>
		Error_Handler();
 8002a6a:	f000 fbb3 	bl	80031d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_ADC1_Init+0x16c>)
 8002a70:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a72:	2318      	movs	r3, #24
 8002a74:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a76:	463b      	mov	r3, r7
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002a7c:	f001 fefc 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_ADC1_Init+0x132>
		Error_Handler();
 8002a86:	f000 fba5 	bl	80031d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <MX_ADC1_Init+0x170>)
 8002a8c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a92:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a94:	463b      	mov	r3, r7
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_ADC1_Init+0x158>)
 8002a9a:	f001 feed 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_ADC1_Init+0x150>
		Error_Handler();
 8002aa4:	f000 fb96 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	3728      	adds	r7, #40	; 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2400023c 	.word	0x2400023c
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	08600004 	.word	0x08600004
 8002abc:	0c900008 	.word	0x0c900008
 8002ac0:	10c00010 	.word	0x10c00010
 8002ac4:	14f00020 	.word	0x14f00020
 8002ac8:	1d500080 	.word	0x1d500080

08002acc <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <MX_FDCAN2_Init+0xc4>)
 8002ad4:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = DISABLE;
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 16;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002af6:	2210      	movs	r2, #16
 8002af8:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 2;
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 2;
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 18;
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b0e:	2212      	movs	r2, #18
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan2.Init.DataTimeSeg1 = 1;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan2.Init.DataTimeSeg2 = 1;
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan2.Init.MessageRAMOffset = 0;
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan2.Init.StdFiltersNbr = 0;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan2.Init.ExtFiltersNbr = 0;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b3e:	2204      	movs	r2, #4
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan2.Init.RxBuffersNbr = 0;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b56:	2204      	movs	r2, #4
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan2.Init.TxEventsNbr = 0;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan2.Init.TxBuffersNbr = 0;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b74:	2204      	movs	r2, #4
 8002b76:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 8002b78:	4804      	ldr	r0, [pc, #16]	; (8002b8c <MX_FDCAN2_Init+0xc0>)
 8002b7a:	f005 fbf3 	bl	8008364 <HAL_FDCAN_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_FDCAN2_Init+0xbc>
		Error_Handler();
 8002b84:	f000 fb26 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */

	/* USER CODE END FDCAN2_Init 2 */

}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	24000318 	.word	0x24000318
 8002b90:	4000a400 	.word	0x4000a400

08002b94 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002b9a:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <MX_SPI2_Init+0xa8>)
 8002b9c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002ba0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ba4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bae:	2207      	movs	r2, #7
 8002bb0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bc4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bc8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002bcc:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <MX_SPI2_Init+0xa4>)
 8002c26:	f00a f8bf 	bl	800cda8 <HAL_SPI_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_SPI2_Init+0xa0>
		Error_Handler();
 8002c30:	f000 fad0 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	240003b8 	.word	0x240003b8
 8002c3c:	40003800 	.word	0x40003800

08002c40 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c46:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <MX_SPI4_Init+0xa8>)
 8002c48:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c50:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c70:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c74:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002c78:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 0x0;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi4.Init.TxCRCInitializationPattern =
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi4.Init.RxCRCInitializationPattern =
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	649a      	str	r2, [r3, #72]	; 0x48
	hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	651a      	str	r2, [r3, #80]	; 0x50
	hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8002cd0:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <MX_SPI4_Init+0xa4>)
 8002cd2:	f00a f869 	bl	800cda8 <HAL_SPI_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_SPI4_Init+0xa0>
		Error_Handler();
 8002cdc:	f000 fa7a 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	24000440 	.word	0x24000440
 8002ce8:	40013400 	.word	0x40013400

08002cec <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <MX_UART4_Init+0x90>)
 8002cf2:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <MX_UART4_Init+0x94>)
 8002cf4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <MX_UART4_Init+0x90>)
 8002cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cfc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002d34:	4811      	ldr	r0, [pc, #68]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d36:	f00a fe5c 	bl	800d9f2 <HAL_UART_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_UART4_Init+0x58>
		Error_Handler();
 8002d40:	f000 fa48 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002d44:	2100      	movs	r1, #0
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d48:	f00d fb7b 	bl	8010442 <HAL_UARTEx_SetTxFifoThreshold>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002d52:	f000 fa3f 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002d56:	2100      	movs	r1, #0
 8002d58:	4808      	ldr	r0, [pc, #32]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d5a:	f00d fbb0 	bl	80104be <HAL_UARTEx_SetRxFifoThreshold>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002d64:	f000 fa36 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002d68:	4804      	ldr	r0, [pc, #16]	; (8002d7c <MX_UART4_Init+0x90>)
 8002d6a:	f00d fb31 	bl	80103d0 <HAL_UARTEx_DisableFifoMode>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002d74:	f000 fa2e 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	240004c8 	.word	0x240004c8
 8002d80:	40004c00 	.word	0x40004c00

08002d84 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8002d88:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <MX_UART5_Init+0x90>)
 8002d8a:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <MX_UART5_Init+0x94>)
 8002d8c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <MX_UART5_Init+0x90>)
 8002d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d94:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <MX_UART5_Init+0x90>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <MX_UART5_Init+0x90>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <MX_UART5_Init+0x90>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <MX_UART5_Init+0x90>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <MX_UART5_Init+0x90>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <MX_UART5_Init+0x90>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <MX_UART5_Init+0x90>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <MX_UART5_Init+0x90>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <MX_UART5_Init+0x90>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002dcc:	4811      	ldr	r0, [pc, #68]	; (8002e14 <MX_UART5_Init+0x90>)
 8002dce:	f00a fe10 	bl	800d9f2 <HAL_UART_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_UART5_Init+0x58>
		Error_Handler();
 8002dd8:	f000 f9fc 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	480d      	ldr	r0, [pc, #52]	; (8002e14 <MX_UART5_Init+0x90>)
 8002de0:	f00d fb2f 	bl	8010442 <HAL_UARTEx_SetTxFifoThreshold>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_UART5_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002dea:	f000 f9f3 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 8002dee:	2100      	movs	r1, #0
 8002df0:	4808      	ldr	r0, [pc, #32]	; (8002e14 <MX_UART5_Init+0x90>)
 8002df2:	f00d fb64 	bl	80104be <HAL_UARTEx_SetRxFifoThreshold>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_UART5_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002dfc:	f000 f9ea 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK) {
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <MX_UART5_Init+0x90>)
 8002e02:	f00d fae5 	bl	80103d0 <HAL_UARTEx_DisableFifoMode>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_UART5_Init+0x8c>
		Error_Handler();
 8002e0c:	f000 f9e2 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2400055c 	.word	0x2400055c
 8002e18:	40005000 	.word	0x40005000

08002e1c <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <MX_UART7_Init+0x90>)
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <MX_UART7_Init+0x94>)
 8002e24:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <MX_UART7_Init+0x90>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <MX_UART7_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_UART7_Init+0x90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <MX_UART7_Init+0x90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_RX;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <MX_UART7_Init+0x90>)
 8002e42:	2204      	movs	r2, #4
 8002e44:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <MX_UART7_Init+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MX_UART7_Init+0x90>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_UART7_Init+0x90>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
	huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_UART7_Init+0x90>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <MX_UART7_Init+0x90>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8002e64:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_UART7_Init+0x90>)
 8002e66:	f00a fdc4 	bl	800d9f2 <HAL_UART_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_UART7_Init+0x58>
		Error_Handler();
 8002e70:	f000 f9b0 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8)
 8002e74:	2100      	movs	r1, #0
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <MX_UART7_Init+0x90>)
 8002e78:	f00d fae3 	bl	8010442 <HAL_UARTEx_SetTxFifoThreshold>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_UART7_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002e82:	f000 f9a7 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8)
 8002e86:	2100      	movs	r1, #0
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <MX_UART7_Init+0x90>)
 8002e8a:	f00d fb18 	bl	80104be <HAL_UARTEx_SetRxFifoThreshold>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_UART7_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002e94:	f000 f99e 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK) {
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <MX_UART7_Init+0x90>)
 8002e9a:	f00d fa99 	bl	80103d0 <HAL_UARTEx_DisableFifoMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_UART7_Init+0x8c>
		Error_Handler();
 8002ea4:	f000 f996 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	240005f0 	.word	0x240005f0
 8002eb0:	40007800 	.word	0x40007800

08002eb4 <MX_UART8_Init>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <MX_UART8_Init+0x90>)
 8002eba:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <MX_UART8_Init+0x94>)
 8002ebc:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec4:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_UART8_Init+0x90>)
 8002eda:	220c      	movs	r2, #12
 8002edc:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <MX_UART8_Init+0x90>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_UART8_Init+0x90>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8002efc:	4811      	ldr	r0, [pc, #68]	; (8002f44 <MX_UART8_Init+0x90>)
 8002efe:	f00a fd78 	bl	800d9f2 <HAL_UART_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_UART8_Init+0x58>
		Error_Handler();
 8002f08:	f000 f964 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	480d      	ldr	r0, [pc, #52]	; (8002f44 <MX_UART8_Init+0x90>)
 8002f10:	f00d fa97 	bl	8010442 <HAL_UARTEx_SetTxFifoThreshold>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_UART8_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002f1a:	f000 f95b 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4808      	ldr	r0, [pc, #32]	; (8002f44 <MX_UART8_Init+0x90>)
 8002f22:	f00d facc 	bl	80104be <HAL_UARTEx_SetRxFifoThreshold>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_UART8_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002f2c:	f000 f952 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <MX_UART8_Init+0x90>)
 8002f32:	f00d fa4d 	bl	80103d0 <HAL_UARTEx_DisableFifoMode>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_UART8_Init+0x8c>
		Error_Handler();
 8002f3c:	f000 f94a 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	24000684 	.word	0x24000684
 8002f48:	40007c00 	.word	0x40007c00

08002f4c <MX_UART9_Init>:
/**
 * @brief UART9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART9_Init(void) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	/* USER CODE END UART9_Init 0 */

	/* USER CODE BEGIN UART9_Init 1 */

	/* USER CODE END UART9_Init 1 */
	huart9.Instance = UART9;
 8002f50:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <MX_UART9_Init+0x94>)
 8002f54:	601a      	str	r2, [r3, #0]
	huart9.Init.BaudRate = 38400;
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002f5c:	605a      	str	r2, [r3, #4]
	huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
	huart9.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
	huart9.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
	huart9.Init.Mode = UART_MODE_TX;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f72:	2208      	movs	r2, #8
 8002f74:	615a      	str	r2, [r3, #20]
	huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
	huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
	huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	621a      	str	r2, [r3, #32]
	huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
	huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart9) != HAL_OK) {
 8002f94:	4811      	ldr	r0, [pc, #68]	; (8002fdc <MX_UART9_Init+0x90>)
 8002f96:	f00a fd2c 	bl	800d9f2 <HAL_UART_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_UART9_Init+0x58>
		Error_Handler();
 8002fa0:	f000 f918 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8)
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <MX_UART9_Init+0x90>)
 8002fa8:	f00d fa4b 	bl	8010442 <HAL_UARTEx_SetTxFifoThreshold>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_UART9_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002fb2:	f000 f90f 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8)
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4808      	ldr	r0, [pc, #32]	; (8002fdc <MX_UART9_Init+0x90>)
 8002fba:	f00d fa80 	bl	80104be <HAL_UARTEx_SetRxFifoThreshold>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_UART9_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002fc4:	f000 f906 	bl	80031d4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK) {
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_UART9_Init+0x90>)
 8002fca:	f00d fa01 	bl	80103d0 <HAL_UARTEx_DisableFifoMode>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_UART9_Init+0x8c>
		Error_Handler();
 8002fd4:	f000 f8fe 	bl	80031d4 <Error_Handler>
	}
	/* USER CODE BEGIN UART9_Init 2 */

	/* USER CODE END UART9_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	24000718 	.word	0x24000718
 8002fe0:	40011800 	.word	0x40011800

08002fe4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <MX_DMA_Init+0x3c>)
 8002fec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <MX_DMA_Init+0x3c>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_DMA_Init+0x3c>)
 8002ffc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	200b      	movs	r0, #11
 800300e:	f002 fa94 	bl	800553a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003012:	200b      	movs	r0, #11
 8003014:	f002 faab 	bl	800556e <HAL_NVIC_EnableIRQ>

}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	58024400 	.word	0x58024400

08003024 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800303a:	4b62      	ldr	r3, [pc, #392]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800303c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003040:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800304a:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800304c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800305a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003068:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800306a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003076:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 8003078:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003086:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 8003088:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 8003096:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800309a:	4a4a      	ldr	r2, [pc, #296]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030a4:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030b8:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030d6:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030e0:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <MX_GPIO_Init+0x1a0>)
 80030e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, SD_CARD_CS_Pin | RELAY1_Pin | RELAY3_Pin,
 80030ee:	2200      	movs	r2, #0
 80030f0:	f44f 7122 	mov.w	r1, #648	; 0x288
 80030f4:	4834      	ldr	r0, [pc, #208]	; (80031c8 <MX_GPIO_Init+0x1a4>)
 80030f6:	f006 fa1b 	bl	8009530 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, ENABLE_RELAYS_Pin | LORA_CS_Pin, GPIO_PIN_RESET);
 80030fa:	2200      	movs	r2, #0
 80030fc:	f242 0101 	movw	r1, #8193	; 0x2001
 8003100:	4832      	ldr	r0, [pc, #200]	; (80031cc <MX_GPIO_Init+0x1a8>)
 8003102:	f006 fa15 	bl	8009530 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RELAY4_Pin | RELAY2_Pin | LORA_RST_Pin,
 8003106:	2200      	movs	r2, #0
 8003108:	f641 0108 	movw	r1, #6152	; 0x1808
 800310c:	4830      	ldr	r0, [pc, #192]	; (80031d0 <MX_GPIO_Init+0x1ac>)
 800310e:	f006 fa0f 	bl	8009530 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SD_CARD_CS_Pin RELAY1_Pin RELAY3_Pin */
	GPIO_InitStruct.Pin = SD_CARD_CS_Pin | RELAY1_Pin | RELAY3_Pin;
 8003112:	f44f 7322 	mov.w	r3, #648	; 0x288
 8003116:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003118:	2301      	movs	r3, #1
 800311a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	4619      	mov	r1, r3
 800312a:	4827      	ldr	r0, [pc, #156]	; (80031c8 <MX_GPIO_Init+0x1a4>)
 800312c:	f006 f838 	bl	80091a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_RELAYS_Pin */
	GPIO_InitStruct.Pin = ENABLE_RELAYS_Pin;
 8003130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003134:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003136:	2301      	movs	r3, #1
 8003138:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800313a:	2302      	movs	r3, #2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENABLE_RELAYS_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4820      	ldr	r0, [pc, #128]	; (80031cc <MX_GPIO_Init+0x1a8>)
 800314a:	f006 f829 	bl	80091a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_CS_Pin */
	GPIO_InitStruct.Pin = LORA_CS_Pin;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003152:	2301      	movs	r3, #1
 8003154:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LORA_CS_GPIO_Port, &GPIO_InitStruct);
 800315e:	f107 031c 	add.w	r3, r7, #28
 8003162:	4619      	mov	r1, r3
 8003164:	4819      	ldr	r0, [pc, #100]	; (80031cc <MX_GPIO_Init+0x1a8>)
 8003166:	f006 f81b 	bl	80091a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYSTEM_BUTTON_Pin */
	GPIO_InitStruct.Pin = SYSTEM_BUTTON_Pin;
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	2301      	movs	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SYSTEM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4812      	ldr	r0, [pc, #72]	; (80031c8 <MX_GPIO_Init+0x1a4>)
 8003180:	f006 f80e 	bl	80091a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RELAY4_Pin RELAY2_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = RELAY4_Pin | RELAY2_Pin | LORA_RST_Pin;
 8003184:	f641 0308 	movw	r3, #6152	; 0x1808
 8003188:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <MX_GPIO_Init+0x1ac>)
 800319e:	f005 ffff 	bl	80091a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_DIO0_Pin */
	GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80031a2:	2310      	movs	r3, #16
 80031a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	4806      	ldr	r0, [pc, #24]	; (80031d0 <MX_GPIO_Init+0x1ac>)
 80031b6:	f005 fff3 	bl	80091a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80031ba:	bf00      	nop
 80031bc:	3730      	adds	r7, #48	; 0x30
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	58024400 	.word	0x58024400
 80031c8:	58021000 	.word	0x58021000
 80031cc:	58020800 	.word	0x58020800
 80031d0:	58020c00 	.word	0x58020c00

080031d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031dc:	e7fe      	b.n	80031dc <Error_Handler+0x8>
	...

080031e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_MspInit+0x30>)
 80031e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_MspInit+0x30>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_MspInit+0x30>)
 80031f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	58024400 	.word	0x58024400

08003214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0be      	sub	sp, #248	; 0xf8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800322c:	f107 0320 	add.w	r3, r7, #32
 8003230:	22c0      	movs	r2, #192	; 0xc0
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f00f fe07 	bl	8012e48 <memset>
  if(hadc->Instance==ADC1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_ADC_MspInit+0x1f0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	f040 80db 	bne.w	80033fc <HAL_ADC_MspInit+0x1e8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003252:	2304      	movs	r3, #4
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003256:	2308      	movs	r3, #8
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800325a:	2303      	movs	r3, #3
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800325e:	2302      	movs	r3, #2
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003262:	2302      	movs	r3, #2
 8003264:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800326a:	2300      	movs	r3, #0
 800326c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	4618      	mov	r0, r3
 800327e:	f007 f989 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8003288:	f7ff ffa4 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800328c:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 800328e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003292:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800329c:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 800329e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032b0:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032ba:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032ce:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032d8:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032ec:	4a46      	ldr	r2, [pc, #280]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 80032f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003304:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 8003306:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003314:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <HAL_ADC_MspInit+0x1f4>)
 8003316:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003328:	2303      	movs	r3, #3
 800332a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003338:	4619      	mov	r1, r3
 800333a:	4834      	ldr	r0, [pc, #208]	; (800340c <HAL_ADC_MspInit+0x1f8>)
 800333c:	f005 ff30 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003340:	2310      	movs	r3, #16
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003346:	2303      	movs	r3, #3
 8003348:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003352:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003356:	4619      	mov	r1, r3
 8003358:	482d      	ldr	r0, [pc, #180]	; (8003410 <HAL_ADC_MspInit+0x1fc>)
 800335a:	f005 ff21 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800335e:	2302      	movs	r3, #2
 8003360:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003364:	2303      	movs	r3, #3
 8003366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003374:	4619      	mov	r1, r3
 8003376:	4827      	ldr	r0, [pc, #156]	; (8003414 <HAL_ADC_MspInit+0x200>)
 8003378:	f005 ff12 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800337c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	2303      	movs	r3, #3
 8003386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003390:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003394:	4619      	mov	r1, r3
 8003396:	4820      	ldr	r0, [pc, #128]	; (8003418 <HAL_ADC_MspInit+0x204>)
 8003398:	f005 ff02 	bl	80091a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_ADC_MspInit+0x208>)
 800339e:	4a20      	ldr	r2, [pc, #128]	; (8003420 <HAL_ADC_MspInit+0x20c>)
 80033a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033a4:	2209      	movs	r2, #9
 80033a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033dc:	2200      	movs	r2, #0
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033e0:	480e      	ldr	r0, [pc, #56]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033e2:	f002 f8df 	bl	80055a4 <HAL_DMA_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 80033ec:	f7ff fef2 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_ADC_MspInit+0x208>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033fc:	bf00      	nop
 80033fe:	37f8      	adds	r7, #248	; 0xf8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40022000 	.word	0x40022000
 8003408:	58024400 	.word	0x58024400
 800340c:	58020000 	.word	0x58020000
 8003410:	58020800 	.word	0x58020800
 8003414:	58020400 	.word	0x58020400
 8003418:	58021400 	.word	0x58021400
 800341c:	240002a0 	.word	0x240002a0
 8003420:	40020010 	.word	0x40020010

08003424 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b0ba      	sub	sp, #232	; 0xe8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	22c0      	movs	r2, #192	; 0xc0
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f00f fcff 	bl	8012e48 <memset>
  if(hfdcan->Instance==FDCAN2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a36      	ldr	r2, [pc, #216]	; (8003528 <HAL_FDCAN_MspInit+0x104>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d165      	bne.n	8003520 <HAL_FDCAN_MspInit+0xfc>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4618      	mov	r0, r3
 800346e:	f007 f891 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8003478:	f7ff feac 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 800347e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 800348e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 800349c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034a0:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_FDCAN_MspInit+0x108>)
 80034ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80034d2:	2309      	movs	r3, #9
 80034d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034dc:	4619      	mov	r1, r3
 80034de:	4814      	ldr	r0, [pc, #80]	; (8003530 <HAL_FDCAN_MspInit+0x10c>)
 80034e0:	f005 fe5e 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80034fe:	2309      	movs	r3, #9
 8003500:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003508:	4619      	mov	r1, r3
 800350a:	4809      	ldr	r0, [pc, #36]	; (8003530 <HAL_FDCAN_MspInit+0x10c>)
 800350c:	f005 fe48 	bl	80091a0 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	2014      	movs	r0, #20
 8003516:	f002 f810 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800351a:	2014      	movs	r0, #20
 800351c:	f002 f827 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	37e8      	adds	r7, #232	; 0xe8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	4000a400 	.word	0x4000a400
 800352c:	58024400 	.word	0x58024400
 8003530:	58020400 	.word	0x58020400

08003534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0be      	sub	sp, #248	; 0xf8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800354c:	f107 0320 	add.w	r3, r7, #32
 8003550:	22c0      	movs	r2, #192	; 0xc0
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f00f fc77 	bl	8012e48 <memset>
  if(hspi->Instance==SPI2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a5f      	ldr	r2, [pc, #380]	; (80036dc <HAL_SPI_MspInit+0x1a8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d16c      	bne.n	800363e <HAL_SPI_MspInit+0x10a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003578:	f107 0320 	add.w	r3, r7, #32
 800357c:	4618      	mov	r0, r3
 800357e:	f007 f809 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003588:	f7ff fe24 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358c:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 800358e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003592:	4a53      	ldr	r2, [pc, #332]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800359c:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 800359e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035b0:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035ce:	4a44      	ldr	r2, [pc, #272]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035d8:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 80035da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80035e6:	2306      	movs	r3, #6
 80035e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035fe:	2305      	movs	r3, #5
 8003600:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003608:	4619      	mov	r1, r3
 800360a:	4836      	ldr	r0, [pc, #216]	; (80036e4 <HAL_SPI_MspInit+0x1b0>)
 800360c:	f005 fdc8 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800362a:	2305      	movs	r3, #5
 800362c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003630:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003634:	4619      	mov	r1, r3
 8003636:	482c      	ldr	r0, [pc, #176]	; (80036e8 <HAL_SPI_MspInit+0x1b4>)
 8003638:	f005 fdb2 	bl	80091a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800363c:	e04a      	b.n	80036d4 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_SPI_MspInit+0x1b8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d145      	bne.n	80036d4 <HAL_SPI_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	4618      	mov	r0, r3
 8003660:	f006 ff98 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 800366a:	f7ff fdb3 	bl	80031d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 8003670:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003674:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 8003676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800367a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 8003680:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 800368e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003692:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 8003694:	f043 0310 	orr.w	r3, r3, #16
 8003698:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_SPI_MspInit+0x1ac>)
 800369e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80036aa:	2364      	movs	r3, #100	; 0x64
 80036ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80036c2:	2305      	movs	r3, #5
 80036c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4808      	ldr	r0, [pc, #32]	; (80036f0 <HAL_SPI_MspInit+0x1bc>)
 80036d0:	f005 fd66 	bl	80091a0 <HAL_GPIO_Init>
}
 80036d4:	bf00      	nop
 80036d6:	37f8      	adds	r7, #248	; 0xf8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40003800 	.word	0x40003800
 80036e0:	58024400 	.word	0x58024400
 80036e4:	58020800 	.word	0x58020800
 80036e8:	58020400 	.word	0x58020400
 80036ec:	40013400 	.word	0x40013400
 80036f0:	58021000 	.word	0x58021000

080036f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b0c4      	sub	sp, #272	; 0x110
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003702:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f00f fb93 	bl	8012e48 <memset>
  if(huart->Instance==UART4)
 8003722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003726:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4abf      	ldr	r2, [pc, #764]	; (8003a2c <HAL_UART_MspInit+0x338>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d14e      	bne.n	80037d2 <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003734:	f04f 0202 	mov.w	r2, #2
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800374a:	4618      	mov	r0, r3
 800374c:	f006 ff22 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8003756:	f7ff fd3d 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800375a:	4bb5      	ldr	r3, [pc, #724]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800375c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003760:	4ab3      	ldr	r2, [pc, #716]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003766:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800376a:	4bb1      	ldr	r3, [pc, #708]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800376c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003778:	4bad      	ldr	r3, [pc, #692]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800377a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800377e:	4aac      	ldr	r2, [pc, #688]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003788:	4ba9      	ldr	r3, [pc, #676]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800378a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003796:	2303      	movs	r3, #3
 8003798:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037ae:	2308      	movs	r3, #8
 80037b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037b8:	4619      	mov	r1, r3
 80037ba:	489e      	ldr	r0, [pc, #632]	; (8003a34 <HAL_UART_MspInit+0x340>)
 80037bc:	f005 fcf0 	bl	80091a0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 11, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	210b      	movs	r1, #11
 80037c4:	2034      	movs	r0, #52	; 0x34
 80037c6:	f001 feb8 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80037ca:	2034      	movs	r0, #52	; 0x34
 80037cc:	f001 fecf 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART9_MspInit 1 */

  /* USER CODE END UART9_MspInit 1 */
  }

}
 80037d0:	e1a0      	b.n	8003b14 <HAL_UART_MspInit+0x420>
  else if(huart->Instance==UART5)
 80037d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a96      	ldr	r2, [pc, #600]	; (8003a38 <HAL_UART_MspInit+0x344>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d173      	bne.n	80038cc <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80037e4:	f04f 0202 	mov.w	r2, #2
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037fa:	4618      	mov	r0, r3
 80037fc:	f006 feca 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_UART_MspInit+0x116>
      Error_Handler();
 8003806:	f7ff fce5 	bl	80031d4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800380c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003810:	4a87      	ldr	r2, [pc, #540]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003816:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800381a:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800381c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800382a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800382e:	4a80      	ldr	r2, [pc, #512]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003838:	4b7d      	ldr	r3, [pc, #500]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800383a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003846:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003848:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800384c:	4a78      	ldr	r2, [pc, #480]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800387e:	2308      	movs	r3, #8
 8003880:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003884:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003888:	4619      	mov	r1, r3
 800388a:	486c      	ldr	r0, [pc, #432]	; (8003a3c <HAL_UART_MspInit+0x348>)
 800388c:	f005 fc88 	bl	80091a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003890:	2304      	movs	r3, #4
 8003892:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038a8:	2308      	movs	r3, #8
 80038aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038b2:	4619      	mov	r1, r3
 80038b4:	4862      	ldr	r0, [pc, #392]	; (8003a40 <HAL_UART_MspInit+0x34c>)
 80038b6:	f005 fc73 	bl	80091a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 14, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	210e      	movs	r1, #14
 80038be:	2035      	movs	r0, #53	; 0x35
 80038c0:	f001 fe3b 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80038c4:	2035      	movs	r0, #53	; 0x35
 80038c6:	f001 fe52 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 80038ca:	e123      	b.n	8003b14 <HAL_UART_MspInit+0x420>
  else if(huart->Instance==UART7)
 80038cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_UART_MspInit+0x350>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d14e      	bne.n	800397c <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80038de:	f04f 0202 	mov.w	r2, #2
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 fe4d 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_MspInit+0x210>
      Error_Handler();
 8003900:	f7ff fc68 	bl	80031d4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003906:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800390a:	4a49      	ldr	r2, [pc, #292]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800390c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003910:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003916:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800391a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003928:	4a41      	ldr	r2, [pc, #260]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 800392a:	f043 0320 	orr.w	r3, r3, #32
 800392e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 8003934:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003958:	2307      	movs	r3, #7
 800395a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800395e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003962:	4619      	mov	r1, r3
 8003964:	4838      	ldr	r0, [pc, #224]	; (8003a48 <HAL_UART_MspInit+0x354>)
 8003966:	f005 fc1b 	bl	80091a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 12, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	210c      	movs	r1, #12
 800396e:	2052      	movs	r0, #82	; 0x52
 8003970:	f001 fde3 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003974:	2052      	movs	r0, #82	; 0x52
 8003976:	f001 fdfa 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 800397a:	e0cb      	b.n	8003b14 <HAL_UART_MspInit+0x420>
  else if(huart->Instance==UART8)
 800397c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003980:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a30      	ldr	r2, [pc, #192]	; (8003a4c <HAL_UART_MspInit+0x358>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d162      	bne.n	8003a54 <HAL_UART_MspInit+0x360>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800398e:	f04f 0202 	mov.w	r2, #2
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039a4:	4618      	mov	r0, r3
 80039a6:	f006 fdf5 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_MspInit+0x2c0>
      Error_Handler();
 80039b0:	f7ff fc10 	bl	80031d4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80039ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_UART_MspInit+0x33c>)
 80039e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039f0:	2303      	movs	r3, #3
 80039f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a12:	4619      	mov	r1, r3
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <HAL_UART_MspInit+0x35c>)
 8003a16:	f005 fbc3 	bl	80091a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 10, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	210a      	movs	r1, #10
 8003a1e:	2053      	movs	r0, #83	; 0x53
 8003a20:	f001 fd8b 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003a24:	2053      	movs	r0, #83	; 0x53
 8003a26:	f001 fda2 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 8003a2a:	e073      	b.n	8003b14 <HAL_UART_MspInit+0x420>
 8003a2c:	40004c00 	.word	0x40004c00
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58020000 	.word	0x58020000
 8003a38:	40005000 	.word	0x40005000
 8003a3c:	58020800 	.word	0x58020800
 8003a40:	58020c00 	.word	0x58020c00
 8003a44:	40007800 	.word	0x40007800
 8003a48:	58021400 	.word	0x58021400
 8003a4c:	40007c00 	.word	0x40007c00
 8003a50:	58021000 	.word	0x58021000
  else if(huart->Instance==UART9)
 8003a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2f      	ldr	r2, [pc, #188]	; (8003b20 <HAL_UART_MspInit+0x42c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d156      	bne.n	8003b14 <HAL_UART_MspInit+0x420>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8003a66:	f04f 0201 	mov.w	r2, #1
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 fd89 	bl	800a594 <HAL_RCCEx_PeriphCLKConfig>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_MspInit+0x398>
      Error_Handler();
 8003a88:	f7ff fba4 	bl	80031d4 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003a8e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003a9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003aa2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8003aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aaa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ab4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ab8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_UART_MspInit+0x430>)
 8003acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ad0:	f003 0208 	and.w	r2, r3, #8
 8003ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ae6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003ae8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003aec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8003b02:	230b      	movs	r3, #11
 8003b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4806      	ldr	r0, [pc, #24]	; (8003b28 <HAL_UART_MspInit+0x434>)
 8003b10:	f005 fb46 	bl	80091a0 <HAL_GPIO_Init>
}
 8003b14:	bf00      	nop
 8003b16:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40011800 	.word	0x40011800
 8003b24:	58024400 	.word	0x58024400
 8003b28:	58020c00 	.word	0x58020c00

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x4>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <SysTick_Handler+0x34>)
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <SysTick_Handler+0x18>
	    Timer1--;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <SysTick_Handler+0x34>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <SysTick_Handler+0x34>)
 8003b8a:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <SysTick_Handler+0x38>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <SysTick_Handler+0x2c>
	    Timer2--;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <SysTick_Handler+0x38>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <SysTick_Handler+0x38>)
 8003b9e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba0:	f000 fa1c 	bl	8003fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	24000234 	.word	0x24000234
 8003bac:	24000236 	.word	0x24000236

08003bb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8003bb6:	f003 f853 	bl	8006c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	240002a0 	.word	0x240002a0

08003bc4 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <FDCAN2_IT0_IRQHandler+0x10>)
 8003bca:	f004 fe4f 	bl	800886c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	24000318 	.word	0x24000318

08003bd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <UART4_IRQHandler+0x10>)
 8003bde:	f00a f8fb 	bl	800ddd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	240004c8 	.word	0x240004c8

08003bec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <UART5_IRQHandler+0x10>)
 8003bf2:	f00a f8f1 	bl	800ddd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2400055c 	.word	0x2400055c

08003c00 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <UART7_IRQHandler+0x10>)
 8003c06:	f00a f8e7 	bl	800ddd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	240005f0 	.word	0x240005f0

08003c14 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <UART8_IRQHandler+0x10>)
 8003c1a:	f00a f8dd 	bl	800ddd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	24000684 	.word	0x24000684

08003c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return 1;
 8003c2c:	2301      	movs	r3, #1
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_kill>:

int _kill(int pid, int sig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c42:	f00f f8c9 	bl	8012dd8 <__errno>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2216      	movs	r2, #22
 8003c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_exit>:

void _exit (int status)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ffe7 	bl	8003c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c6a:	e7fe      	b.n	8003c6a <_exit+0x12>

08003c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00a      	b.n	8003c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c7e:	f3af 8000 	nop.w
 8003c82:	4601      	mov	r1, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	60ba      	str	r2, [r7, #8]
 8003c8a:	b2ca      	uxtb	r2, r1
 8003c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dbf0      	blt.n	8003c7e <_read+0x12>
  }

  return len;
 8003c9c:	687b      	ldr	r3, [r7, #4]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e009      	b.n	8003ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	60ba      	str	r2, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbf1      	blt.n	8003cb8 <_write+0x12>
  }
  return len;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_close>:

int _close(int file)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d06:	605a      	str	r2, [r3, #4]
  return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <_isatty>:

int _isatty(int file)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <_sbrk+0x5c>)
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <_sbrk+0x60>)
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <_sbrk+0x64>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <_sbrk+0x64>)
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <_sbrk+0x68>)
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <_sbrk+0x64>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d207      	bcs.n	8003d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d78:	f00f f82e 	bl	8012dd8 <__errno>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	220c      	movs	r2, #12
 8003d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d86:	e009      	b.n	8003d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <_sbrk+0x64>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	4a05      	ldr	r2, [pc, #20]	; (8003dac <_sbrk+0x64>)
 8003d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	24100000 	.word	0x24100000
 8003da8:	00000400 	.word	0x00000400
 8003dac:	24002cc0 	.word	0x24002cc0
 8003db0:	24002d18 	.word	0x24002d18

08003db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <SystemInit+0xd0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	4a31      	ldr	r2, [pc, #196]	; (8003e84 <SystemInit+0xd0>)
 8003dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <SystemInit+0xd4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d807      	bhi.n	8003de4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <SystemInit+0xd4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 030f 	bic.w	r3, r3, #15
 8003ddc:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <SystemInit+0xd4>)
 8003dde:	f043 0303 	orr.w	r3, r3, #3
 8003de2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <SystemInit+0xd8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a28      	ldr	r2, [pc, #160]	; (8003e8c <SystemInit+0xd8>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <SystemInit+0xd8>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <SystemInit+0xd8>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4924      	ldr	r1, [pc, #144]	; (8003e8c <SystemInit+0xd8>)
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <SystemInit+0xdc>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <SystemInit+0xd4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <SystemInit+0xd4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 030f 	bic.w	r3, r3, #15
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <SystemInit+0xd4>)
 8003e18:	f043 0303 	orr.w	r3, r3, #3
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <SystemInit+0xd8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <SystemInit+0xd8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <SystemInit+0xd8>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e30:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <SystemInit+0xd8>)
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <SystemInit+0xe0>)
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <SystemInit+0xd8>)
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <SystemInit+0xe4>)
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <SystemInit+0xd8>)
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <SystemInit+0xe8>)
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <SystemInit+0xd8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <SystemInit+0xd8>)
 8003e4a:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <SystemInit+0xe8>)
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <SystemInit+0xd8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <SystemInit+0xd8>)
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <SystemInit+0xe8>)
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <SystemInit+0xd8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <SystemInit+0xd8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <SystemInit+0xd8>)
 8003e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <SystemInit+0xd8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <SystemInit+0xec>)
 8003e74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	52002000 	.word	0x52002000
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e94:	02020200 	.word	0x02020200
 8003e98:	01ff0000 	.word	0x01ff0000
 8003e9c:	01010280 	.word	0x01010280
 8003ea0:	52004000 	.word	0x52004000

08003ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ea8:	f7ff ff84 	bl	8003db4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eae:	490d      	ldr	r1, [pc, #52]	; (8003ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb4:	e002      	b.n	8003ebc <LoopCopyDataInit>

08003eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eba:	3304      	adds	r3, #4

08003ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec0:	d3f9      	bcc.n	8003eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ec4:	4c0a      	ldr	r4, [pc, #40]	; (8003ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec8:	e001      	b.n	8003ece <LoopFillZerobss>

08003eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ecc:	3204      	adds	r2, #4

08003ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed0:	d3fb      	bcc.n	8003eca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ed2:	f00e ff87 	bl	8012de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed6:	f7fe fb8d 	bl	80025f4 <main>
  bx  lr
 8003eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003edc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ee4:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8003ee8:	08017d3c 	.word	0x08017d3c
  ldr r2, =_sbss
 8003eec:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8003ef0:	24002d14 	.word	0x24002d14

08003ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef4:	e7fe      	b.n	8003ef4 <ADC_IRQHandler>
	...

08003ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efe:	2003      	movs	r0, #3
 8003f00:	f001 fb10 	bl	8005524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003f04:	f006 f970 	bl	800a1e8 <HAL_RCC_GetSysClockFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_Init+0x68>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	4913      	ldr	r1, [pc, #76]	; (8003f64 <HAL_Init+0x6c>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f22:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_Init+0x68>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <HAL_Init+0x6c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_Init+0x70>)
 8003f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f3c:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <HAL_Init+0x74>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f42:	200f      	movs	r0, #15
 8003f44:	f000 f814 	bl	8003f70 <HAL_InitTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e002      	b.n	8003f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f52:	f7ff f945 	bl	80031e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024400 	.word	0x58024400
 8003f64:	080177c8 	.word	0x080177c8
 8003f68:	24000008 	.word	0x24000008
 8003f6c:	24000004 	.word	0x24000004

08003f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_InitTick+0x60>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e021      	b.n	8003fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_InitTick+0x64>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_InitTick+0x60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 faf5 	bl	800558a <HAL_SYSTICK_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00e      	b.n	8003fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d80a      	bhi.n	8003fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb8:	f001 fabf 	bl	800553a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fbc:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <HAL_InitTick+0x68>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	24000010 	.word	0x24000010
 8003fd4:	24000004 	.word	0x24000004
 8003fd8:	2400000c 	.word	0x2400000c

08003fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x20>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_IncTick+0x24>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <HAL_IncTick+0x24>)
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	24000010 	.word	0x24000010
 8004000:	24002cc4 	.word	0x24002cc4

08004004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return uwTick;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_GetTick+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	24002cc4 	.word	0x24002cc4

0800401c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7ff ffee 	bl	8004004 <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004034:	d005      	beq.n	8004042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_Delay+0x44>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004042:	bf00      	nop
 8004044:	f7ff ffde 	bl	8004004 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d8f7      	bhi.n	8004044 <HAL_Delay+0x28>
  {
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	24000010 	.word	0x24000010

08004064 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3360      	adds	r3, #96	; 0x60
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800413e:	b480      	push	{r7}
 8004140:	b087      	sub	sp, #28
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	461a      	mov	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	431a      	orrs	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	601a      	str	r2, [r3, #0]
  }
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3330      	adds	r3, #48	; 0x30
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	4413      	add	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	211f      	movs	r1, #31
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	401a      	ands	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	f003 011f 	and.w	r1, r3, #31
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f023 0203 	bic.w	r2, r3, #3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3314      	adds	r3, #20
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0e5b      	lsrs	r3, r3, #25
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	4413      	add	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0d1b      	lsrs	r3, r3, #20
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2107      	movs	r1, #7
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004294:	40d9      	lsrs	r1, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	400b      	ands	r3, r1
 800429a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	000fffff 	.word	0x000fffff

080042b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 031f 	and.w	r3, r3, #31
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6093      	str	r3, [r2, #8]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	5fffffc0 	.word	0x5fffffc0

080042f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430c:	d101      	bne.n	8004312 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <LL_ADC_EnableInternalRegulator+0x24>)
 800432e:	4013      	ands	r3, r2
 8004330:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	6fffffc0 	.word	0x6fffffc0

08004348 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435c:	d101      	bne.n	8004362 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <LL_ADC_Enable+0x24>)
 800437e:	4013      	ands	r3, r2
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	7fffffc0 	.word	0x7fffffc0

08004398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <LL_ADC_IsEnabled+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_ADC_IsEnabled+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <LL_ADC_REG_StartConversion+0x24>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	7fffffc0 	.word	0x7fffffc0

080043e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d101      	bne.n	8004400 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d101      	bne.n	8004426 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e138      	b.n	80046c0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fe fed9 	bl	8003214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ff3f 	bl	80042f8 <LL_ADC_IsDeepPowerDownEnabled>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff25 	bl	80042d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff5a 	bl	8004348 <LL_ADC_IsInternalRegulatorEnabled>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d114      	bne.n	80044c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff3e 	bl	8004320 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044a4:	4b88      	ldr	r3, [pc, #544]	; (80046c8 <HAL_ADC_Init+0x294>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	4a88      	ldr	r2, [pc, #544]	; (80046cc <HAL_ADC_Init+0x298>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	3301      	adds	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044b6:	e002      	b.n	80044be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f9      	bne.n	80044b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff3d 	bl	8004348 <LL_ADC_IsInternalRegulatorEnabled>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f043 0210 	orr.w	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff77 	bl	80043e8 <LL_ADC_REG_IsConversionOngoing>
 80044fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 80d2 	bne.w	80046ae <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 80ce 	bne.w	80046ae <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff36 	bl	8004398 <LL_ADC_IsEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004532:	4867      	ldr	r0, [pc, #412]	; (80046d0 <HAL_ADC_Init+0x29c>)
 8004534:	f7ff ff30 	bl	8004398 <LL_ADC_IsEnabled>
 8004538:	4604      	mov	r4, r0
 800453a:	4866      	ldr	r0, [pc, #408]	; (80046d4 <HAL_ADC_Init+0x2a0>)
 800453c:	f7ff ff2c 	bl	8004398 <LL_ADC_IsEnabled>
 8004540:	4603      	mov	r3, r0
 8004542:	4323      	orrs	r3, r4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4619      	mov	r1, r3
 800454e:	4862      	ldr	r0, [pc, #392]	; (80046d8 <HAL_ADC_Init+0x2a4>)
 8004550:	f7ff fd88 	bl	8004064 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7d5b      	ldrb	r3, [r3, #21]
 8004558:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800455e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8004564:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7f1b      	ldrb	r3, [r3, #28]
 800456a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7f1b      	ldrb	r3, [r3, #28]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	3b01      	subs	r3, #1
 800457e:	045b      	lsls	r3, r3, #17
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <HAL_ADC_Init+0x2a8>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff ff14 	bl	80043e8 <LL_ADC_REG_IsConversionOngoing>
 80045c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ff21 	bl	800440e <LL_ADC_INJ_IsConversionOngoing>
 80045cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d14a      	bne.n	800466a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d147      	bne.n	800466a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7d1b      	ldrb	r3, [r3, #20]
 80045de:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b3c      	ldr	r3, [pc, #240]	; (80046e0 <HAL_ADC_Init+0x2ac>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004602:	2b01      	cmp	r3, #1
 8004604:	d11b      	bne.n	800463e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_ADC_Init+0x2b0>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800461a:	3a01      	subs	r2, #1
 800461c:	0411      	lsls	r1, r2, #16
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004622:	4311      	orrs	r1, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800462e:	430a      	orrs	r2, r1
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	611a      	str	r2, [r3, #16]
 800463c:	e007      	b.n	800464e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fcfd 	bl	8005064 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10c      	bne.n	800468c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f023 010f 	bic.w	r1, r3, #15
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
 800468a:	e007      	b.n	800469c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020f 	bic.w	r2, r2, #15
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f023 0303 	bic.w	r3, r3, #3
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
 80046ac:	e007      	b.n	80046be <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f043 0210 	orr.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046be:	7ffb      	ldrb	r3, [r7, #31]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3724      	adds	r7, #36	; 0x24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	24000004 	.word	0x24000004
 80046cc:	053e2d63 	.word	0x053e2d63
 80046d0:	40022000 	.word	0x40022000
 80046d4:	40022100 	.word	0x40022100
 80046d8:	40022300 	.word	0x40022300
 80046dc:	fff0c003 	.word	0xfff0c003
 80046e0:	ffffbffc 	.word	0xffffbffc
 80046e4:	fc00f81e 	.word	0xfc00f81e

080046e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f4:	484f      	ldr	r0, [pc, #316]	; (8004834 <HAL_ADC_Start_DMA+0x14c>)
 80046f6:	f7ff fddf 	bl	80042b8 <LL_ADC_GetMultimode>
 80046fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fe71 	bl	80043e8 <LL_ADC_REG_IsConversionOngoing>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 808c 	bne.w	8004826 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_ADC_Start_DMA+0x34>
 8004718:	2302      	movs	r3, #2
 800471a:	e087      	b.n	800482c <HAL_ADC_Start_DMA+0x144>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d002      	beq.n	8004736 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b09      	cmp	r3, #9
 8004734:	d170      	bne.n	8004818 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fb84 	bl	8004e44 <ADC_Enable>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d163      	bne.n	800480e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_ADC_Start_DMA+0x150>)
 800474c:	4013      	ands	r3, r2
 800474e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_ADC_Start_DMA+0x154>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d002      	beq.n	8004766 <HAL_ADC_Start_DMA+0x7e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	e000      	b.n	8004768 <HAL_ADC_Start_DMA+0x80>
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_ADC_Start_DMA+0x158>)
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	4293      	cmp	r3, r2
 800476e:	d002      	beq.n	8004776 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	f023 0206 	bic.w	r2, r3, #6
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	659a      	str	r2, [r3, #88]	; 0x58
 800479a:	e002      	b.n	80047a2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <HAL_ADC_Start_DMA+0x15c>)
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	4a26      	ldr	r2, [pc, #152]	; (8004848 <HAL_ADC_Start_DMA+0x160>)
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	4a25      	ldr	r2, [pc, #148]	; (800484c <HAL_ADC_Start_DMA+0x164>)
 80047b8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	221c      	movs	r2, #28
 80047c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0210 	orr.w	r2, r2, #16
 80047d8:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7ff fd04 	bl	80041f2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3340      	adds	r3, #64	; 0x40
 80047f4:	4619      	mov	r1, r3
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f001 fa63 	bl	8005cc4 <HAL_DMA_Start_IT>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fdda 	bl	80043c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800480c:	e00d      	b.n	800482a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004816:	e008      	b.n	800482a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004824:	e001      	b.n	800482a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004826:	2302      	movs	r3, #2
 8004828:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40022300 	.word	0x40022300
 8004838:	fffff0fe 	.word	0xfffff0fe
 800483c:	40022100 	.word	0x40022100
 8004840:	40022000 	.word	0x40022000
 8004844:	08004f3d 	.word	0x08004f3d
 8004848:	08005015 	.word	0x08005015
 800484c:	08005031 	.word	0x08005031

08004850 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b0a1      	sub	sp, #132	; 0x84
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a9a      	ldr	r2, [pc, #616]	; (8004afc <HAL_ADC_ConfigChannel+0x284>)
 8004892:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x2a>
 800489e:	2302      	movs	r3, #2
 80048a0:	e2bc      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x5a4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fd9a 	bl	80043e8 <LL_ADC_REG_IsConversionOngoing>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 82a1 	bne.w	8004dfe <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_ADC_ConfigChannel+0x62>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	0e9b      	lsrs	r3, r3, #26
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2201      	movs	r2, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	e016      	b.n	8004908 <HAL_ADC_ConfigChannel+0x90>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80048f2:	2320      	movs	r3, #32
 80048f4:	e003      	b.n	80048fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80048f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	69d1      	ldr	r1, [r2, #28]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	430b      	orrs	r3, r1
 8004914:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7ff fc39 	bl	800419a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fd5b 	bl	80043e8 <LL_ADC_REG_IsConversionOngoing>
 8004932:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fd68 	bl	800440e <LL_ADC_INJ_IsConversionOngoing>
 800493e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 80a0 	bne.w	8004a88 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 809c 	bne.w	8004a88 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6819      	ldr	r1, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	461a      	mov	r2, r3
 800495e:	f7ff fc5b 	bl	8004218 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x110>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	e00a      	b.n	800499e <HAL_ADC_ConfigChannel+0x126>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d027      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6919      	ldr	r1, [r3, #16]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b6:	f7ff fb89 	bl	80040cc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6919      	ldr	r1, [r3, #16]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	7e5b      	ldrb	r3, [r3, #25]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x158>
 80049ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ce:	e000      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x15a>
 80049d0:	2300      	movs	r3, #0
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7ff fbb3 	bl	800413e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6919      	ldr	r1, [r3, #16]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7e1b      	ldrb	r3, [r3, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d102      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x176>
 80049e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ec:	e000      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x178>
 80049ee:	2300      	movs	r3, #0
 80049f0:	461a      	mov	r2, r3
 80049f2:	f7ff fb8b 	bl	800410c <LL_ADC_SetDataRightShift>
 80049f6:	e047      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	069b      	lsls	r3, r3, #26
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d107      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	069b      	lsls	r3, r3, #26
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a3e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	069b      	lsls	r3, r3, #26
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a62:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	069b      	lsls	r3, r3, #26
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d107      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fc83 	bl	8004398 <LL_ADC_IsEnabled>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 81bb 	bne.w	8004e10 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7ff fbe2 	bl	8004270 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a12      	ldr	r2, [pc, #72]	; (8004afc <HAL_ADC_ConfigChannel+0x284>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f040 8130 	bne.w	8004d18 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x268>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2b09      	cmp	r3, #9
 8004ad6:	bf94      	ite	ls
 8004ad8:	2301      	movls	r3, #1
 8004ada:	2300      	movhi	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e01b      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x2a0>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae8:	fa93 f3a3 	rbit	r3, r3
 8004aec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8004af8:	2320      	movs	r3, #32
 8004afa:	e005      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x290>
 8004afc:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8004b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	bf94      	ite	ls
 8004b12:	2301      	movls	r3, #1
 8004b14:	2300      	movhi	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d079      	beq.n	8004c10 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x2c0>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	3301      	adds	r3, #1
 8004b30:	069b      	lsls	r3, r3, #26
 8004b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b36:	e015      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x2ec>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e003      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	069b      	lsls	r3, r3, #26
 8004b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x30c>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	0e9b      	lsrs	r3, r3, #26
 8004b76:	3301      	adds	r3, #1
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b82:	e017      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x33c>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8004b9c:	2320      	movs	r3, #32
 8004b9e:	e003      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	ea42 0103 	orr.w	r1, r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <HAL_ADC_ConfigChannel+0x362>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	051b      	lsls	r3, r3, #20
 8004bd8:	e018      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x394>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	e003      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	e07e      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x3b4>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0e9b      	lsrs	r3, r3, #26
 8004c22:	3301      	adds	r3, #1
 8004c24:	069b      	lsls	r3, r3, #26
 8004c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c2a:	e015      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x3e0>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004c44:	2320      	movs	r3, #32
 8004c46:	e003      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3301      	adds	r3, #1
 8004c52:	069b      	lsls	r3, r3, #26
 8004c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x400>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0e9b      	lsrs	r3, r3, #26
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	e017      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x430>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	61bb      	str	r3, [r7, #24]
  return result;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	ea42 0103 	orr.w	r1, r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10d      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x45c>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	3b1e      	subs	r3, #30
 8004ccc:	051b      	lsls	r3, r3, #20
 8004cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	e01b      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x494>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8004cec:	2320      	movs	r3, #32
 8004cee:	e003      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f003 021f 	and.w	r2, r3, #31
 8004cfe:	4613      	mov	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	4413      	add	r3, r2
 8004d04:	3b1e      	subs	r3, #30
 8004d06:	051b      	lsls	r3, r3, #20
 8004d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7ff fa80 	bl	8004218 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da77      	bge.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d20:	4840      	ldr	r0, [pc, #256]	; (8004e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8004d22:	f7ff f9c5 	bl	80040b0 <LL_ADC_GetCommonPathInternalCh>
 8004d26:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d28:	483f      	ldr	r0, [pc, #252]	; (8004e28 <HAL_ADC_ConfigChannel+0x5b0>)
 8004d2a:	f7ff fb35 	bl	8004398 <LL_ADC_IsEnabled>
 8004d2e:	4604      	mov	r4, r0
 8004d30:	483e      	ldr	r0, [pc, #248]	; (8004e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8004d32:	f7ff fb31 	bl	8004398 <LL_ADC_IsEnabled>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4323      	orrs	r3, r4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d155      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <HAL_ADC_ConfigChannel+0x5b8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d122      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x516>
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11d      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d159      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d62:	4619      	mov	r1, r3
 8004d64:	482f      	ldr	r0, [pc, #188]	; (8004e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8004d66:	f7ff f990 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d6a:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <HAL_ADC_ConfigChannel+0x5bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	4a31      	ldr	r2, [pc, #196]	; (8004e38 <HAL_ADC_ConfigChannel+0x5c0>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	3301      	adds	r3, #1
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d7e:	e002      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f9      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d8c:	e040      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <HAL_ADC_ConfigChannel+0x5c4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d111      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x544>
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d131      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db2:	4619      	mov	r1, r3
 8004db4:	481b      	ldr	r0, [pc, #108]	; (8004e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8004db6:	f7ff f968 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dba:	e029      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_ADC_ConfigChannel+0x5c8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d124      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11f      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d11a      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004de0:	4619      	mov	r1, r3
 8004de2:	4810      	ldr	r0, [pc, #64]	; (8004e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8004de4:	f7ff f951 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
 8004de8:	e012      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004dfc:	e008      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3784      	adds	r7, #132	; 0x84
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	40022300 	.word	0x40022300
 8004e28:	40022000 	.word	0x40022000
 8004e2c:	40022100 	.word	0x40022100
 8004e30:	cb840000 	.word	0xcb840000
 8004e34:	24000004 	.word	0x24000004
 8004e38:	053e2d63 	.word	0x053e2d63
 8004e3c:	bac04000 	.word	0xbac04000
 8004e40:	cfb80000 	.word	0xcfb80000

08004e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff faa1 	bl	8004398 <LL_ADC_IsEnabled>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d161      	bne.n	8004f20 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	4b32      	ldr	r3, [pc, #200]	; (8004f2c <ADC_Enable+0xe8>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f043 0210 	orr.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e04d      	b.n	8004f22 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fa70 	bl	8004370 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e90:	f7ff f8b8 	bl	8004004 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e96:	4826      	ldr	r0, [pc, #152]	; (8004f30 <ADC_Enable+0xec>)
 8004e98:	f7ff fa0e 	bl	80042b8 <LL_ADC_GetMultimode>
 8004e9c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <ADC_Enable+0xf0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d002      	beq.n	8004eae <ADC_Enable+0x6a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	e000      	b.n	8004eb0 <ADC_Enable+0x6c>
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <ADC_Enable+0xf4>)
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d130      	bne.n	8004f20 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ebe:	e028      	b.n	8004f12 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fa67 	bl	8004398 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fa4b 	bl	8004370 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004eda:	f7ff f893 	bl	8004004 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d914      	bls.n	8004f12 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d00d      	beq.n	8004f12 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f043 0210 	orr.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e007      	b.n	8004f22 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d1cf      	bne.n	8004ec0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	8000003f 	.word	0x8000003f
 8004f30:	40022300 	.word	0x40022300
 8004f34:	40022100 	.word	0x40022100
 8004f38:	40022000 	.word	0x40022000

08004f3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14b      	bne.n	8004fee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d021      	beq.n	8004fb4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff f8fd 	bl	8004174 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d032      	beq.n	8004fe6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d12b      	bne.n	8004fe6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11f      	bne.n	8004fe6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
 8004fb2:	e018      	b.n	8004fe6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d111      	bne.n	8004fe6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7fd f92e 	bl	8002248 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fec:	e00e      	b.n	800500c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fc32 	bl	8004864 <HAL_ADC_ErrorCallback>
}
 8005000:	e004      	b.n	800500c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff fc14 	bl	8004850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fc04 	bl	8004864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800506c:	4b60      	ldr	r3, [pc, #384]	; (80051f0 <ADC_ConfigureBoostMode+0x18c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01c      	beq.n	80050b2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005078:	f005 fa30 	bl	800a4dc <HAL_RCC_GetHCLKFreq>
 800507c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005086:	d010      	beq.n	80050aa <ADC_ConfigureBoostMode+0x46>
 8005088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800508c:	d873      	bhi.n	8005176 <ADC_ConfigureBoostMode+0x112>
 800508e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005092:	d002      	beq.n	800509a <ADC_ConfigureBoostMode+0x36>
 8005094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005098:	d16d      	bne.n	8005176 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	60fb      	str	r3, [r7, #12]
        break;
 80050a8:	e068      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	60fb      	str	r3, [r7, #12]
        break;
 80050b0:	e064      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80050b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80050b6:	f04f 0100 	mov.w	r1, #0
 80050ba:	f006 fc29 	bl	800b910 <HAL_RCCEx_GetPeriphCLKFreq>
 80050be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050c8:	d051      	beq.n	800516e <ADC_ConfigureBoostMode+0x10a>
 80050ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050ce:	d854      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 80050d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050d4:	d047      	beq.n	8005166 <ADC_ConfigureBoostMode+0x102>
 80050d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050da:	d84e      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 80050dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050e0:	d03d      	beq.n	800515e <ADC_ConfigureBoostMode+0xfa>
 80050e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050e6:	d848      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d033      	beq.n	8005156 <ADC_ConfigureBoostMode+0xf2>
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f2:	d842      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 80050f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050f8:	d029      	beq.n	800514e <ADC_ConfigureBoostMode+0xea>
 80050fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050fe:	d83c      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 8005100:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005104:	d01a      	beq.n	800513c <ADC_ConfigureBoostMode+0xd8>
 8005106:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800510a:	d836      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 800510c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005110:	d014      	beq.n	800513c <ADC_ConfigureBoostMode+0xd8>
 8005112:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005116:	d830      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 8005118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511c:	d00e      	beq.n	800513c <ADC_ConfigureBoostMode+0xd8>
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005122:	d82a      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 8005124:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005128:	d008      	beq.n	800513c <ADC_ConfigureBoostMode+0xd8>
 800512a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800512e:	d824      	bhi.n	800517a <ADC_ConfigureBoostMode+0x116>
 8005130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005134:	d002      	beq.n	800513c <ADC_ConfigureBoostMode+0xd8>
 8005136:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800513a:	d11e      	bne.n	800517a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	0c9b      	lsrs	r3, r3, #18
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	60fb      	str	r3, [r7, #12]
        break;
 800514c:	e016      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	60fb      	str	r3, [r7, #12]
        break;
 8005154:	e012      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	60fb      	str	r3, [r7, #12]
        break;
 800515c:	e00e      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	60fb      	str	r3, [r7, #12]
        break;
 8005164:	e00a      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
        break;
 800516c:	e006      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	60fb      	str	r3, [r7, #12]
        break;
 8005174:	e002      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
        break;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800517a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <ADC_ConfigureBoostMode+0x190>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d808      	bhi.n	800519c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005198:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800519a:	e025      	b.n	80051e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <ADC_ConfigureBoostMode+0x194>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d80a      	bhi.n	80051ba <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	e016      	b.n	80051e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <ADC_ConfigureBoostMode+0x198>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d80a      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	e007      	b.n	80051e8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40022300 	.word	0x40022300
 80051f4:	005f5e10 	.word	0x005f5e10
 80051f8:	00bebc20 	.word	0x00bebc20
 80051fc:	017d7840 	.word	0x017d7840

08005200 <LL_ADC_IsEnabled>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <LL_ADC_IsEnabled+0x18>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <LL_ADC_IsEnabled+0x1a>
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_ADC_REG_IsConversionOngoing>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b04      	cmp	r3, #4
 8005238:	d101      	bne.n	800523e <LL_ADC_REG_IsConversionOngoing+0x18>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b09f      	sub	sp, #124	; 0x7c
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005266:	2302      	movs	r3, #2
 8005268:	e080      	b.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005272:	2300      	movs	r3, #0
 8005274:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005276:	2300      	movs	r3, #0
 8005278:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d102      	bne.n	800528a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005284:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	e001      	b.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e05f      	b.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ffb9 	bl	8005226 <LL_ADC_REG_IsConversionOngoing>
 80052b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ffb3 	bl	8005226 <LL_ADC_REG_IsConversionOngoing>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d141      	bne.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80052c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d13e      	bne.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80052ce:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052ea:	4822      	ldr	r0, [pc, #136]	; (8005374 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80052ec:	f7ff ff88 	bl	8005200 <LL_ADC_IsEnabled>
 80052f0:	4604      	mov	r4, r0
 80052f2:	4821      	ldr	r0, [pc, #132]	; (8005378 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80052f4:	f7ff ff84 	bl	8005200 <LL_ADC_IsEnabled>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4323      	orrs	r3, r4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d12e      	bne.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005306:	4013      	ands	r3, r2
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	6811      	ldr	r1, [r2, #0]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	430a      	orrs	r2, r1
 8005312:	431a      	orrs	r2, r3
 8005314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005316:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005318:	e021      	b.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005326:	4813      	ldr	r0, [pc, #76]	; (8005374 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005328:	f7ff ff6a 	bl	8005200 <LL_ADC_IsEnabled>
 800532c:	4604      	mov	r4, r0
 800532e:	4812      	ldr	r0, [pc, #72]	; (8005378 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005330:	f7ff ff66 	bl	8005200 <LL_ADC_IsEnabled>
 8005334:	4603      	mov	r3, r0
 8005336:	4323      	orrs	r3, r4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d110      	bne.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005342:	4013      	ands	r3, r2
 8005344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005346:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005348:	e009      	b.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800535c:	e000      	b.n	8005360 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800535e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005368:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800536c:	4618      	mov	r0, r3
 800536e:	377c      	adds	r7, #124	; 0x7c
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	40022000 	.word	0x40022000
 8005378:	40022100 	.word	0x40022100
 800537c:	40022300 	.word	0x40022300
 8005380:	fffff0e0 	.word	0xfffff0e0

08005384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <__NVIC_SetPriorityGrouping+0x40>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053a0:	4013      	ands	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <__NVIC_SetPriorityGrouping+0x44>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053b2:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <__NVIC_SetPriorityGrouping+0x40>)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	60d3      	str	r3, [r2, #12]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	e000ed00 	.word	0xe000ed00
 80053c8:	05fa0000 	.word	0x05fa0000

080053cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <__NVIC_GetPriorityGrouping+0x18>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	0a1b      	lsrs	r3, r3, #8
 80053d6:	f003 0307 	and.w	r3, r3, #7
}
 80053da:	4618      	mov	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	db0b      	blt.n	8005412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	f003 021f 	and.w	r2, r3, #31
 8005400:	4907      	ldr	r1, [pc, #28]	; (8005420 <__NVIC_EnableIRQ+0x38>)
 8005402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2001      	movs	r0, #1
 800540a:	fa00 f202 	lsl.w	r2, r0, r2
 800540e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000e100 	.word	0xe000e100

08005424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	db0a      	blt.n	800544e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	490c      	ldr	r1, [pc, #48]	; (8005470 <__NVIC_SetPriority+0x4c>)
 800543e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	440b      	add	r3, r1
 8005448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800544c:	e00a      	b.n	8005464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	4908      	ldr	r1, [pc, #32]	; (8005474 <__NVIC_SetPriority+0x50>)
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	3b04      	subs	r3, #4
 800545c:	0112      	lsls	r2, r2, #4
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	440b      	add	r3, r1
 8005462:	761a      	strb	r2, [r3, #24]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000e100 	.word	0xe000e100
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f1c3 0307 	rsb	r3, r3, #7
 8005492:	2b04      	cmp	r3, #4
 8005494:	bf28      	it	cs
 8005496:	2304      	movcs	r3, #4
 8005498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3304      	adds	r3, #4
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d902      	bls.n	80054a8 <NVIC_EncodePriority+0x30>
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3b03      	subs	r3, #3
 80054a6:	e000      	b.n	80054aa <NVIC_EncodePriority+0x32>
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	401a      	ands	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	43d9      	mvns	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d0:	4313      	orrs	r3, r2
         );
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3724      	adds	r7, #36	; 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f0:	d301      	bcc.n	80054f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <SysTick_Config+0x40>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054fe:	210f      	movs	r1, #15
 8005500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005504:	f7ff ff8e 	bl	8005424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <SysTick_Config+0x40>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <SysTick_Config+0x40>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010

08005524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff29 	bl	8005384 <__NVIC_SetPriorityGrouping>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005548:	f7ff ff40 	bl	80053cc <__NVIC_GetPriorityGrouping>
 800554c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f7ff ff90 	bl	8005478 <NVIC_EncodePriority>
 8005558:	4602      	mov	r2, r0
 800555a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff ff5f 	bl	8005424 <__NVIC_SetPriority>
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff33 	bl	80053e8 <__NVIC_EnableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ffa4 	bl	80054e0 <SysTick_Config>
 8005598:	4603      	mov	r3, r0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055ac:	f7fe fd2a 	bl	8004004 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e37f      	b.n	8005cbc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a66      	ldr	r2, [pc, #408]	; (800575c <HAL_DMA_Init+0x1b8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d04a      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_DMA_Init+0x1bc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d045      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a63      	ldr	r2, [pc, #396]	; (8005764 <HAL_DMA_Init+0x1c0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d040      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a62      	ldr	r2, [pc, #392]	; (8005768 <HAL_DMA_Init+0x1c4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d03b      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a60      	ldr	r2, [pc, #384]	; (800576c <HAL_DMA_Init+0x1c8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d036      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a5f      	ldr	r2, [pc, #380]	; (8005770 <HAL_DMA_Init+0x1cc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d031      	beq.n	800565c <HAL_DMA_Init+0xb8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5d      	ldr	r2, [pc, #372]	; (8005774 <HAL_DMA_Init+0x1d0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d02c      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a5c      	ldr	r2, [pc, #368]	; (8005778 <HAL_DMA_Init+0x1d4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d027      	beq.n	800565c <HAL_DMA_Init+0xb8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5a      	ldr	r2, [pc, #360]	; (800577c <HAL_DMA_Init+0x1d8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d022      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a59      	ldr	r2, [pc, #356]	; (8005780 <HAL_DMA_Init+0x1dc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d01d      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a57      	ldr	r2, [pc, #348]	; (8005784 <HAL_DMA_Init+0x1e0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d018      	beq.n	800565c <HAL_DMA_Init+0xb8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a56      	ldr	r2, [pc, #344]	; (8005788 <HAL_DMA_Init+0x1e4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d013      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a54      	ldr	r2, [pc, #336]	; (800578c <HAL_DMA_Init+0x1e8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00e      	beq.n	800565c <HAL_DMA_Init+0xb8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a53      	ldr	r2, [pc, #332]	; (8005790 <HAL_DMA_Init+0x1ec>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d009      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <HAL_DMA_Init+0x1f0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_DMA_Init+0xb8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_DMA_Init+0x1f4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_DMA_Init+0xbc>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_DMA_Init+0xbe>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 813c 	beq.w	80058e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a37      	ldr	r2, [pc, #220]	; (800575c <HAL_DMA_Init+0x1b8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_Init+0x174>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a36      	ldr	r2, [pc, #216]	; (8005760 <HAL_DMA_Init+0x1bc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_Init+0x174>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_DMA_Init+0x1c0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_Init+0x174>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a33      	ldr	r2, [pc, #204]	; (8005768 <HAL_DMA_Init+0x1c4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a31      	ldr	r2, [pc, #196]	; (800576c <HAL_DMA_Init+0x1c8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a30      	ldr	r2, [pc, #192]	; (8005770 <HAL_DMA_Init+0x1cc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2e      	ldr	r2, [pc, #184]	; (8005774 <HAL_DMA_Init+0x1d0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <HAL_DMA_Init+0x1d4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <HAL_DMA_Init+0x1d8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <HAL_DMA_Init+0x1dc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a28      	ldr	r2, [pc, #160]	; (8005784 <HAL_DMA_Init+0x1e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_DMA_Init+0x1e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a25      	ldr	r2, [pc, #148]	; (800578c <HAL_DMA_Init+0x1e8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_Init+0x174>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <HAL_DMA_Init+0x1ec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_Init+0x174>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <HAL_DMA_Init+0x1f0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_Init+0x174>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_DMA_Init+0x1f4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <HAL_DMA_Init+0x186>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e007      	b.n	800573a <HAL_DMA_Init+0x196>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800573a:	e02f      	b.n	800579c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800573c:	f7fe fc62 	bl	8004004 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b05      	cmp	r3, #5
 8005748:	d928      	bls.n	800579c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2203      	movs	r2, #3
 8005754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e2af      	b.n	8005cbc <HAL_DMA_Init+0x718>
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1c8      	bne.n	800573c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4b73      	ldr	r3, [pc, #460]	; (8005984 <HAL_DMA_Init+0x3e0>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d107      	bne.n	8005800 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	4313      	orrs	r3, r2
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b28      	cmp	r3, #40	; 0x28
 8005806:	d903      	bls.n	8005810 <HAL_DMA_Init+0x26c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b2e      	cmp	r3, #46	; 0x2e
 800580e:	d91f      	bls.n	8005850 <HAL_DMA_Init+0x2ac>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b3e      	cmp	r3, #62	; 0x3e
 8005816:	d903      	bls.n	8005820 <HAL_DMA_Init+0x27c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b42      	cmp	r3, #66	; 0x42
 800581e:	d917      	bls.n	8005850 <HAL_DMA_Init+0x2ac>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b46      	cmp	r3, #70	; 0x46
 8005826:	d903      	bls.n	8005830 <HAL_DMA_Init+0x28c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b48      	cmp	r3, #72	; 0x48
 800582e:	d90f      	bls.n	8005850 <HAL_DMA_Init+0x2ac>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b4e      	cmp	r3, #78	; 0x4e
 8005836:	d903      	bls.n	8005840 <HAL_DMA_Init+0x29c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b52      	cmp	r3, #82	; 0x52
 800583e:	d907      	bls.n	8005850 <HAL_DMA_Init+0x2ac>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b73      	cmp	r3, #115	; 0x73
 8005846:	d905      	bls.n	8005854 <HAL_DMA_Init+0x2b0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b77      	cmp	r3, #119	; 0x77
 800584e:	d801      	bhi.n	8005854 <HAL_DMA_Init+0x2b0>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_DMA_Init+0x2b2>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005860:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b04      	cmp	r3, #4
 800588a:	d117      	bne.n	80058bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f002 fbd6 	bl	8008050 <DMA_CheckFifoParam>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2240      	movs	r2, #64	; 0x40
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e1ff      	b.n	8005cbc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f002 fb11 	bl	8007eec <DMA_CalcBaseAndBitshift>
 80058ca:	4603      	mov	r3, r0
 80058cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	223f      	movs	r2, #63	; 0x3f
 80058d8:	409a      	lsls	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	e0fe      	b.n	8005ade <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <HAL_DMA_Init+0x3e4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d04a      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a27      	ldr	r2, [pc, #156]	; (800598c <HAL_DMA_Init+0x3e8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d045      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_DMA_Init+0x3ec>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d040      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a24      	ldr	r2, [pc, #144]	; (8005994 <HAL_DMA_Init+0x3f0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d03b      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a22      	ldr	r2, [pc, #136]	; (8005998 <HAL_DMA_Init+0x3f4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d036      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_DMA_Init+0x3f8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d031      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <HAL_DMA_Init+0x3fc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d02c      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <HAL_DMA_Init+0x400>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d027      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <HAL_DMA_Init+0x404>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_DMA_Init+0x408>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d01d      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_DMA_Init+0x40c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_DMA_Init+0x410>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <HAL_DMA_Init+0x414>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_DMA_Init+0x418>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <HAL_DMA_Init+0x41c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_DMA_Init+0x3dc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <HAL_DMA_Init+0x420>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d123      	bne.n	80059c8 <HAL_DMA_Init+0x424>
 8005980:	2301      	movs	r3, #1
 8005982:	e022      	b.n	80059ca <HAL_DMA_Init+0x426>
 8005984:	fe10803f 	.word	0xfe10803f
 8005988:	48022c08 	.word	0x48022c08
 800598c:	48022c1c 	.word	0x48022c1c
 8005990:	48022c30 	.word	0x48022c30
 8005994:	48022c44 	.word	0x48022c44
 8005998:	48022c58 	.word	0x48022c58
 800599c:	48022c6c 	.word	0x48022c6c
 80059a0:	48022c80 	.word	0x48022c80
 80059a4:	48022c94 	.word	0x48022c94
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d07e      	beq.n	8005acc <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a80      	ldr	r2, [pc, #512]	; (8005bd4 <HAL_DMA_Init+0x630>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d021      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a7e      	ldr	r2, [pc, #504]	; (8005bd8 <HAL_DMA_Init+0x634>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01c      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7d      	ldr	r2, [pc, #500]	; (8005bdc <HAL_DMA_Init+0x638>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d017      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a7b      	ldr	r2, [pc, #492]	; (8005be0 <HAL_DMA_Init+0x63c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d012      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7a      	ldr	r2, [pc, #488]	; (8005be4 <HAL_DMA_Init+0x640>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00d      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a78      	ldr	r2, [pc, #480]	; (8005be8 <HAL_DMA_Init+0x644>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d008      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a77      	ldr	r2, [pc, #476]	; (8005bec <HAL_DMA_Init+0x648>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <HAL_DMA_Init+0x478>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a75      	ldr	r2, [pc, #468]	; (8005bf0 <HAL_DMA_Init+0x64c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4b6e      	ldr	r3, [pc, #440]	; (8005bf4 <HAL_DMA_Init+0x650>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d008      	beq.n	8005a58 <HAL_DMA_Init+0x4b4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d102      	bne.n	8005a54 <HAL_DMA_Init+0x4b0>
 8005a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a52:	e002      	b.n	8005a5a <HAL_DMA_Init+0x4b6>
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_Init+0x4b6>
 8005a58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b56      	ldr	r3, [pc, #344]	; (8005bf8 <HAL_DMA_Init+0x654>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_DMA_Init+0x658>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	009a      	lsls	r2, r3, #2
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 fa1b 	bl	8007eec <DMA_CalcBaseAndBitshift>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	e008      	b.n	8005ade <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0ee      	b.n	8005cbc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a47      	ldr	r2, [pc, #284]	; (8005c00 <HAL_DMA_Init+0x65c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d072      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a45      	ldr	r2, [pc, #276]	; (8005c04 <HAL_DMA_Init+0x660>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d06d      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a44      	ldr	r2, [pc, #272]	; (8005c08 <HAL_DMA_Init+0x664>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d068      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a42      	ldr	r2, [pc, #264]	; (8005c0c <HAL_DMA_Init+0x668>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d063      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a41      	ldr	r2, [pc, #260]	; (8005c10 <HAL_DMA_Init+0x66c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d05e      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a3f      	ldr	r2, [pc, #252]	; (8005c14 <HAL_DMA_Init+0x670>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d059      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3e      	ldr	r2, [pc, #248]	; (8005c18 <HAL_DMA_Init+0x674>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d054      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <HAL_DMA_Init+0x678>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d04f      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	; (8005c20 <HAL_DMA_Init+0x67c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a39      	ldr	r2, [pc, #228]	; (8005c24 <HAL_DMA_Init+0x680>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a38      	ldr	r2, [pc, #224]	; (8005c28 <HAL_DMA_Init+0x684>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a36      	ldr	r2, [pc, #216]	; (8005c2c <HAL_DMA_Init+0x688>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_DMA_Init+0x68c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a33      	ldr	r2, [pc, #204]	; (8005c34 <HAL_DMA_Init+0x690>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a32      	ldr	r2, [pc, #200]	; (8005c38 <HAL_DMA_Init+0x694>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <HAL_DMA_Init+0x698>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <HAL_DMA_Init+0x630>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <HAL_DMA_Init+0x634>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <HAL_DMA_Init+0x638>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <HAL_DMA_Init+0x63c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <HAL_DMA_Init+0x640>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <HAL_DMA_Init+0x644>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <HAL_DMA_Init+0x648>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_Init+0x62a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <HAL_DMA_Init+0x64c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d138      	bne.n	8005c40 <HAL_DMA_Init+0x69c>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e037      	b.n	8005c42 <HAL_DMA_Init+0x69e>
 8005bd2:	bf00      	nop
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494
 8005bf4:	fffe000f 	.word	0xfffe000f
 8005bf8:	a7fdabf8 	.word	0xa7fdabf8
 8005bfc:	cccccccd 	.word	0xcccccccd
 8005c00:	40020010 	.word	0x40020010
 8005c04:	40020028 	.word	0x40020028
 8005c08:	40020040 	.word	0x40020040
 8005c0c:	40020058 	.word	0x40020058
 8005c10:	40020070 	.word	0x40020070
 8005c14:	40020088 	.word	0x40020088
 8005c18:	400200a0 	.word	0x400200a0
 8005c1c:	400200b8 	.word	0x400200b8
 8005c20:	40020410 	.word	0x40020410
 8005c24:	40020428 	.word	0x40020428
 8005c28:	40020440 	.word	0x40020440
 8005c2c:	40020458 	.word	0x40020458
 8005c30:	40020470 	.word	0x40020470
 8005c34:	40020488 	.word	0x40020488
 8005c38:	400204a0 	.word	0x400204a0
 8005c3c:	400204b8 	.word	0x400204b8
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d032      	beq.n	8005cac <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f002 fa7e 	bl	8008148 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d102      	bne.n	8005c5a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c6e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <HAL_DMA_Init+0x6f6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d80c      	bhi.n	8005c9a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 fafb 	bl	800827c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	e008      	b.n	8005cac <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e226      	b.n	800612e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_DMA_Start_IT+0x2a>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e21f      	b.n	800612e <HAL_DMA_Start_IT+0x46a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	f040 820a 	bne.w	8006118 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_DMA_Start_IT+0x1f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a66      	ldr	r2, [pc, #408]	; (8005ebc <HAL_DMA_Start_IT+0x1f8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <HAL_DMA_Start_IT+0x1fc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a63      	ldr	r2, [pc, #396]	; (8005ec4 <HAL_DMA_Start_IT+0x200>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <HAL_DMA_Start_IT+0x204>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a60      	ldr	r2, [pc, #384]	; (8005ecc <HAL_DMA_Start_IT+0x208>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5f      	ldr	r2, [pc, #380]	; (8005ed0 <HAL_DMA_Start_IT+0x20c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a5d      	ldr	r2, [pc, #372]	; (8005ed4 <HAL_DMA_Start_IT+0x210>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a5c      	ldr	r2, [pc, #368]	; (8005ed8 <HAL_DMA_Start_IT+0x214>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5a      	ldr	r2, [pc, #360]	; (8005edc <HAL_DMA_Start_IT+0x218>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a59      	ldr	r2, [pc, #356]	; (8005ee0 <HAL_DMA_Start_IT+0x21c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a57      	ldr	r2, [pc, #348]	; (8005ee4 <HAL_DMA_Start_IT+0x220>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a56      	ldr	r2, [pc, #344]	; (8005ee8 <HAL_DMA_Start_IT+0x224>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a54      	ldr	r2, [pc, #336]	; (8005eec <HAL_DMA_Start_IT+0x228>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a53      	ldr	r2, [pc, #332]	; (8005ef0 <HAL_DMA_Start_IT+0x22c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_Start_IT+0xee>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a51      	ldr	r2, [pc, #324]	; (8005ef4 <HAL_DMA_Start_IT+0x230>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_Start_IT+0x100>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e007      	b.n	8005dd4 <HAL_DMA_Start_IT+0x110>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f001 fea2 	bl	8007b24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a34      	ldr	r2, [pc, #208]	; (8005eb8 <HAL_DMA_Start_IT+0x1f4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04a      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a33      	ldr	r2, [pc, #204]	; (8005ebc <HAL_DMA_Start_IT+0x1f8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d045      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a31      	ldr	r2, [pc, #196]	; (8005ec0 <HAL_DMA_Start_IT+0x1fc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d040      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a30      	ldr	r2, [pc, #192]	; (8005ec4 <HAL_DMA_Start_IT+0x200>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d03b      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2e      	ldr	r2, [pc, #184]	; (8005ec8 <HAL_DMA_Start_IT+0x204>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d036      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2d      	ldr	r2, [pc, #180]	; (8005ecc <HAL_DMA_Start_IT+0x208>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d031      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <HAL_DMA_Start_IT+0x20c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02c      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <HAL_DMA_Start_IT+0x210>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d027      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <HAL_DMA_Start_IT+0x214>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d022      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a27      	ldr	r2, [pc, #156]	; (8005edc <HAL_DMA_Start_IT+0x218>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d01d      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a25      	ldr	r2, [pc, #148]	; (8005ee0 <HAL_DMA_Start_IT+0x21c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d018      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a24      	ldr	r2, [pc, #144]	; (8005ee4 <HAL_DMA_Start_IT+0x220>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a22      	ldr	r2, [pc, #136]	; (8005ee8 <HAL_DMA_Start_IT+0x224>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00e      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_DMA_Start_IT+0x228>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_DMA_Start_IT+0x22c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_DMA_Start_IT+0x1bc>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <HAL_DMA_Start_IT+0x230>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <HAL_DMA_Start_IT+0x1c0>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_DMA_Start_IT+0x1c2>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 021e 	bic.w	r2, r3, #30
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0216 	orr.w	r2, r2, #22
 8005e9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d03e      	beq.n	8005f24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0208 	orr.w	r2, r2, #8
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	e035      	b.n	8005f24 <HAL_DMA_Start_IT+0x260>
 8005eb8:	40020010 	.word	0x40020010
 8005ebc:	40020028 	.word	0x40020028
 8005ec0:	40020040 	.word	0x40020040
 8005ec4:	40020058 	.word	0x40020058
 8005ec8:	40020070 	.word	0x40020070
 8005ecc:	40020088 	.word	0x40020088
 8005ed0:	400200a0 	.word	0x400200a0
 8005ed4:	400200b8 	.word	0x400200b8
 8005ed8:	40020410 	.word	0x40020410
 8005edc:	40020428 	.word	0x40020428
 8005ee0:	40020440 	.word	0x40020440
 8005ee4:	40020458 	.word	0x40020458
 8005ee8:	40020470 	.word	0x40020470
 8005eec:	40020488 	.word	0x40020488
 8005ef0:	400204a0 	.word	0x400204a0
 8005ef4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 020e 	bic.w	r2, r3, #14
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 020a 	orr.w	r2, r2, #10
 8005f0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0204 	orr.w	r2, r2, #4
 8005f22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a83      	ldr	r2, [pc, #524]	; (8006138 <HAL_DMA_Start_IT+0x474>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d072      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a82      	ldr	r2, [pc, #520]	; (800613c <HAL_DMA_Start_IT+0x478>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d06d      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a80      	ldr	r2, [pc, #512]	; (8006140 <HAL_DMA_Start_IT+0x47c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d068      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7f      	ldr	r2, [pc, #508]	; (8006144 <HAL_DMA_Start_IT+0x480>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d063      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <HAL_DMA_Start_IT+0x484>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d05e      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a7c      	ldr	r2, [pc, #496]	; (800614c <HAL_DMA_Start_IT+0x488>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d059      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a7a      	ldr	r2, [pc, #488]	; (8006150 <HAL_DMA_Start_IT+0x48c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d054      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a79      	ldr	r2, [pc, #484]	; (8006154 <HAL_DMA_Start_IT+0x490>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04f      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a77      	ldr	r2, [pc, #476]	; (8006158 <HAL_DMA_Start_IT+0x494>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d04a      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a76      	ldr	r2, [pc, #472]	; (800615c <HAL_DMA_Start_IT+0x498>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d045      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a74      	ldr	r2, [pc, #464]	; (8006160 <HAL_DMA_Start_IT+0x49c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d040      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a73      	ldr	r2, [pc, #460]	; (8006164 <HAL_DMA_Start_IT+0x4a0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d03b      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a71      	ldr	r2, [pc, #452]	; (8006168 <HAL_DMA_Start_IT+0x4a4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d036      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a70      	ldr	r2, [pc, #448]	; (800616c <HAL_DMA_Start_IT+0x4a8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d031      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a6e      	ldr	r2, [pc, #440]	; (8006170 <HAL_DMA_Start_IT+0x4ac>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02c      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a6d      	ldr	r2, [pc, #436]	; (8006174 <HAL_DMA_Start_IT+0x4b0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d027      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a6b      	ldr	r2, [pc, #428]	; (8006178 <HAL_DMA_Start_IT+0x4b4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d022      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6a      	ldr	r2, [pc, #424]	; (800617c <HAL_DMA_Start_IT+0x4b8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01d      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a68      	ldr	r2, [pc, #416]	; (8006180 <HAL_DMA_Start_IT+0x4bc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a67      	ldr	r2, [pc, #412]	; (8006184 <HAL_DMA_Start_IT+0x4c0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a65      	ldr	r2, [pc, #404]	; (8006188 <HAL_DMA_Start_IT+0x4c4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a64      	ldr	r2, [pc, #400]	; (800618c <HAL_DMA_Start_IT+0x4c8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a62      	ldr	r2, [pc, #392]	; (8006190 <HAL_DMA_Start_IT+0x4cc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_DMA_Start_IT+0x350>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a61      	ldr	r2, [pc, #388]	; (8006194 <HAL_DMA_Start_IT+0x4d0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d101      	bne.n	8006018 <HAL_DMA_Start_IT+0x354>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_DMA_Start_IT+0x356>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01a      	beq.n	8006054 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006052:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a37      	ldr	r2, [pc, #220]	; (8006138 <HAL_DMA_Start_IT+0x474>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a36      	ldr	r2, [pc, #216]	; (800613c <HAL_DMA_Start_IT+0x478>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a34      	ldr	r2, [pc, #208]	; (8006140 <HAL_DMA_Start_IT+0x47c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a33      	ldr	r2, [pc, #204]	; (8006144 <HAL_DMA_Start_IT+0x480>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a31      	ldr	r2, [pc, #196]	; (8006148 <HAL_DMA_Start_IT+0x484>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a30      	ldr	r2, [pc, #192]	; (800614c <HAL_DMA_Start_IT+0x488>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <HAL_DMA_Start_IT+0x48c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2d      	ldr	r2, [pc, #180]	; (8006154 <HAL_DMA_Start_IT+0x490>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <HAL_DMA_Start_IT+0x494>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2a      	ldr	r2, [pc, #168]	; (800615c <HAL_DMA_Start_IT+0x498>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a28      	ldr	r2, [pc, #160]	; (8006160 <HAL_DMA_Start_IT+0x49c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a27      	ldr	r2, [pc, #156]	; (8006164 <HAL_DMA_Start_IT+0x4a0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a25      	ldr	r2, [pc, #148]	; (8006168 <HAL_DMA_Start_IT+0x4a4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a24      	ldr	r2, [pc, #144]	; (800616c <HAL_DMA_Start_IT+0x4a8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <HAL_DMA_Start_IT+0x4ac>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_Start_IT+0x430>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a21      	ldr	r2, [pc, #132]	; (8006174 <HAL_DMA_Start_IT+0x4b0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d108      	bne.n	8006106 <HAL_DMA_Start_IT+0x442>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e012      	b.n	800612c <HAL_DMA_Start_IT+0x468>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e009      	b.n	800612c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	58025408 	.word	0x58025408
 800617c:	5802541c 	.word	0x5802541c
 8006180:	58025430 	.word	0x58025430
 8006184:	58025444 	.word	0x58025444
 8006188:	58025458 	.word	0x58025458
 800618c:	5802546c 	.word	0x5802546c
 8006190:	58025480 	.word	0x58025480
 8006194:	58025494 	.word	0x58025494

08006198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80061a0:	f7fd ff30 	bl	8004004 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e2dc      	b.n	800676a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d008      	beq.n	80061ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e2cd      	b.n	800676a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a76      	ldr	r2, [pc, #472]	; (80063ac <HAL_DMA_Abort+0x214>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a74      	ldr	r2, [pc, #464]	; (80063b0 <HAL_DMA_Abort+0x218>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a73      	ldr	r2, [pc, #460]	; (80063b4 <HAL_DMA_Abort+0x21c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a71      	ldr	r2, [pc, #452]	; (80063b8 <HAL_DMA_Abort+0x220>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a70      	ldr	r2, [pc, #448]	; (80063bc <HAL_DMA_Abort+0x224>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a6e      	ldr	r2, [pc, #440]	; (80063c0 <HAL_DMA_Abort+0x228>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6d      	ldr	r2, [pc, #436]	; (80063c4 <HAL_DMA_Abort+0x22c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a6b      	ldr	r2, [pc, #428]	; (80063c8 <HAL_DMA_Abort+0x230>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_DMA_Abort+0x234>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a68      	ldr	r2, [pc, #416]	; (80063d0 <HAL_DMA_Abort+0x238>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a67      	ldr	r2, [pc, #412]	; (80063d4 <HAL_DMA_Abort+0x23c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <HAL_DMA_Abort+0x240>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a64      	ldr	r2, [pc, #400]	; (80063dc <HAL_DMA_Abort+0x244>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a62      	ldr	r2, [pc, #392]	; (80063e0 <HAL_DMA_Abort+0x248>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a61      	ldr	r2, [pc, #388]	; (80063e4 <HAL_DMA_Abort+0x24c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_Abort+0xd6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <HAL_DMA_Abort+0x250>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_DMA_Abort+0xda>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <HAL_DMA_Abort+0xdc>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 021e 	bic.w	r2, r2, #30
 8006286:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006296:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e00a      	b.n	80062b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 020e 	bic.w	r2, r2, #14
 80062ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3c      	ldr	r2, [pc, #240]	; (80063ac <HAL_DMA_Abort+0x214>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d072      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a3a      	ldr	r2, [pc, #232]	; (80063b0 <HAL_DMA_Abort+0x218>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d06d      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a39      	ldr	r2, [pc, #228]	; (80063b4 <HAL_DMA_Abort+0x21c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d068      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <HAL_DMA_Abort+0x220>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d063      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a36      	ldr	r2, [pc, #216]	; (80063bc <HAL_DMA_Abort+0x224>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d05e      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a34      	ldr	r2, [pc, #208]	; (80063c0 <HAL_DMA_Abort+0x228>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d059      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_DMA_Abort+0x22c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d054      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a31      	ldr	r2, [pc, #196]	; (80063c8 <HAL_DMA_Abort+0x230>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d04f      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_DMA_Abort+0x234>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d04a      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <HAL_DMA_Abort+0x238>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d045      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_DMA_Abort+0x23c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d040      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_DMA_Abort+0x240>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d03b      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <HAL_DMA_Abort+0x244>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d036      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <HAL_DMA_Abort+0x248>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d031      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_Abort+0x24c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d02c      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_DMA_Abort+0x250>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d027      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <HAL_DMA_Abort+0x254>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_DMA_Abort+0x258>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01d      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_DMA_Abort+0x25c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_DMA_Abort+0x260>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_DMA_Abort+0x264>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_DMA_Abort+0x268>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_DMA_Abort+0x26c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_DMA_Abort+0x20e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_DMA_Abort+0x270>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d132      	bne.n	800640c <HAL_DMA_Abort+0x274>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e031      	b.n	800640e <HAL_DMA_Abort+0x276>
 80063aa:	bf00      	nop
 80063ac:	40020010 	.word	0x40020010
 80063b0:	40020028 	.word	0x40020028
 80063b4:	40020040 	.word	0x40020040
 80063b8:	40020058 	.word	0x40020058
 80063bc:	40020070 	.word	0x40020070
 80063c0:	40020088 	.word	0x40020088
 80063c4:	400200a0 	.word	0x400200a0
 80063c8:	400200b8 	.word	0x400200b8
 80063cc:	40020410 	.word	0x40020410
 80063d0:	40020428 	.word	0x40020428
 80063d4:	40020440 	.word	0x40020440
 80063d8:	40020458 	.word	0x40020458
 80063dc:	40020470 	.word	0x40020470
 80063e0:	40020488 	.word	0x40020488
 80063e4:	400204a0 	.word	0x400204a0
 80063e8:	400204b8 	.word	0x400204b8
 80063ec:	58025408 	.word	0x58025408
 80063f0:	5802541c 	.word	0x5802541c
 80063f4:	58025430 	.word	0x58025430
 80063f8:	58025444 	.word	0x58025444
 80063fc:	58025458 	.word	0x58025458
 8006400:	5802546c 	.word	0x5802546c
 8006404:	58025480 	.word	0x58025480
 8006408:	58025494 	.word	0x58025494
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006420:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6d      	ldr	r2, [pc, #436]	; (80065dc <HAL_DMA_Abort+0x444>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04a      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6b      	ldr	r2, [pc, #428]	; (80065e0 <HAL_DMA_Abort+0x448>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d045      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6a      	ldr	r2, [pc, #424]	; (80065e4 <HAL_DMA_Abort+0x44c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d040      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a68      	ldr	r2, [pc, #416]	; (80065e8 <HAL_DMA_Abort+0x450>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d03b      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a67      	ldr	r2, [pc, #412]	; (80065ec <HAL_DMA_Abort+0x454>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d036      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a65      	ldr	r2, [pc, #404]	; (80065f0 <HAL_DMA_Abort+0x458>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d031      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a64      	ldr	r2, [pc, #400]	; (80065f4 <HAL_DMA_Abort+0x45c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d02c      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a62      	ldr	r2, [pc, #392]	; (80065f8 <HAL_DMA_Abort+0x460>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d027      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a61      	ldr	r2, [pc, #388]	; (80065fc <HAL_DMA_Abort+0x464>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a5f      	ldr	r2, [pc, #380]	; (8006600 <HAL_DMA_Abort+0x468>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01d      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a5e      	ldr	r2, [pc, #376]	; (8006604 <HAL_DMA_Abort+0x46c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5c      	ldr	r2, [pc, #368]	; (8006608 <HAL_DMA_Abort+0x470>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a5b      	ldr	r2, [pc, #364]	; (800660c <HAL_DMA_Abort+0x474>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a59      	ldr	r2, [pc, #356]	; (8006610 <HAL_DMA_Abort+0x478>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a58      	ldr	r2, [pc, #352]	; (8006614 <HAL_DMA_Abort+0x47c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_DMA_Abort+0x32a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a56      	ldr	r2, [pc, #344]	; (8006618 <HAL_DMA_Abort+0x480>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <HAL_DMA_Abort+0x33c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e007      	b.n	80064e4 <HAL_DMA_Abort+0x34c>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064e4:	e013      	b.n	800650e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064e6:	f7fd fd8d 	bl	8004004 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d90c      	bls.n	800650e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2203      	movs	r2, #3
 80064fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e12d      	b.n	800676a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2f      	ldr	r2, [pc, #188]	; (80065dc <HAL_DMA_Abort+0x444>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <HAL_DMA_Abort+0x448>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <HAL_DMA_Abort+0x44c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <HAL_DMA_Abort+0x450>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_DMA_Abort+0x454>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <HAL_DMA_Abort+0x458>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_DMA_Abort+0x45c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <HAL_DMA_Abort+0x460>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_DMA_Abort+0x464>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_DMA_Abort+0x468>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_DMA_Abort+0x46c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_DMA_Abort+0x470>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1d      	ldr	r2, [pc, #116]	; (800660c <HAL_DMA_Abort+0x474>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <HAL_DMA_Abort+0x478>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_DMA_Abort+0x47c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Abort+0x422>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_DMA_Abort+0x480>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_DMA_Abort+0x426>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_Abort+0x428>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d02b      	beq.n	800661c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	223f      	movs	r2, #63	; 0x3f
 80065d4:	409a      	lsls	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
 80065da:	e02a      	b.n	8006632 <HAL_DMA_Abort+0x49a>
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2201      	movs	r2, #1
 800662c:	409a      	lsls	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a4f      	ldr	r2, [pc, #316]	; (8006774 <HAL_DMA_Abort+0x5dc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d072      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a4d      	ldr	r2, [pc, #308]	; (8006778 <HAL_DMA_Abort+0x5e0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d06d      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a4c      	ldr	r2, [pc, #304]	; (800677c <HAL_DMA_Abort+0x5e4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d068      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a4a      	ldr	r2, [pc, #296]	; (8006780 <HAL_DMA_Abort+0x5e8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d063      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a49      	ldr	r2, [pc, #292]	; (8006784 <HAL_DMA_Abort+0x5ec>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d05e      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a47      	ldr	r2, [pc, #284]	; (8006788 <HAL_DMA_Abort+0x5f0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d059      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a46      	ldr	r2, [pc, #280]	; (800678c <HAL_DMA_Abort+0x5f4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d054      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a44      	ldr	r2, [pc, #272]	; (8006790 <HAL_DMA_Abort+0x5f8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04f      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a43      	ldr	r2, [pc, #268]	; (8006794 <HAL_DMA_Abort+0x5fc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d04a      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a41      	ldr	r2, [pc, #260]	; (8006798 <HAL_DMA_Abort+0x600>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d045      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a40      	ldr	r2, [pc, #256]	; (800679c <HAL_DMA_Abort+0x604>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d040      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a3e      	ldr	r2, [pc, #248]	; (80067a0 <HAL_DMA_Abort+0x608>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a3d      	ldr	r2, [pc, #244]	; (80067a4 <HAL_DMA_Abort+0x60c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d036      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a3b      	ldr	r2, [pc, #236]	; (80067a8 <HAL_DMA_Abort+0x610>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d031      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a3a      	ldr	r2, [pc, #232]	; (80067ac <HAL_DMA_Abort+0x614>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d02c      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a38      	ldr	r2, [pc, #224]	; (80067b0 <HAL_DMA_Abort+0x618>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a37      	ldr	r2, [pc, #220]	; (80067b4 <HAL_DMA_Abort+0x61c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a35      	ldr	r2, [pc, #212]	; (80067b8 <HAL_DMA_Abort+0x620>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a34      	ldr	r2, [pc, #208]	; (80067bc <HAL_DMA_Abort+0x624>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a32      	ldr	r2, [pc, #200]	; (80067c0 <HAL_DMA_Abort+0x628>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a31      	ldr	r2, [pc, #196]	; (80067c4 <HAL_DMA_Abort+0x62c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a2f      	ldr	r2, [pc, #188]	; (80067c8 <HAL_DMA_Abort+0x630>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2e      	ldr	r2, [pc, #184]	; (80067cc <HAL_DMA_Abort+0x634>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_DMA_Abort+0x58a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2c      	ldr	r2, [pc, #176]	; (80067d0 <HAL_DMA_Abort+0x638>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_DMA_Abort+0x58e>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <HAL_DMA_Abort+0x590>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006734:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006756:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40020010 	.word	0x40020010
 8006778:	40020028 	.word	0x40020028
 800677c:	40020040 	.word	0x40020040
 8006780:	40020058 	.word	0x40020058
 8006784:	40020070 	.word	0x40020070
 8006788:	40020088 	.word	0x40020088
 800678c:	400200a0 	.word	0x400200a0
 8006790:	400200b8 	.word	0x400200b8
 8006794:	40020410 	.word	0x40020410
 8006798:	40020428 	.word	0x40020428
 800679c:	40020440 	.word	0x40020440
 80067a0:	40020458 	.word	0x40020458
 80067a4:	40020470 	.word	0x40020470
 80067a8:	40020488 	.word	0x40020488
 80067ac:	400204a0 	.word	0x400204a0
 80067b0:	400204b8 	.word	0x400204b8
 80067b4:	58025408 	.word	0x58025408
 80067b8:	5802541c 	.word	0x5802541c
 80067bc:	58025430 	.word	0x58025430
 80067c0:	58025444 	.word	0x58025444
 80067c4:	58025458 	.word	0x58025458
 80067c8:	5802546c 	.word	0x5802546c
 80067cc:	58025480 	.word	0x58025480
 80067d0:	58025494 	.word	0x58025494

080067d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e237      	b.n	8006c56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d004      	beq.n	80067fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2280      	movs	r2, #128	; 0x80
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e22c      	b.n	8006c56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5c      	ldr	r2, [pc, #368]	; (8006974 <HAL_DMA_Abort_IT+0x1a0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d04a      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a5b      	ldr	r2, [pc, #364]	; (8006978 <HAL_DMA_Abort_IT+0x1a4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d045      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a59      	ldr	r2, [pc, #356]	; (800697c <HAL_DMA_Abort_IT+0x1a8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d040      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a58      	ldr	r2, [pc, #352]	; (8006980 <HAL_DMA_Abort_IT+0x1ac>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d03b      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a56      	ldr	r2, [pc, #344]	; (8006984 <HAL_DMA_Abort_IT+0x1b0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d036      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a55      	ldr	r2, [pc, #340]	; (8006988 <HAL_DMA_Abort_IT+0x1b4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d031      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a53      	ldr	r2, [pc, #332]	; (800698c <HAL_DMA_Abort_IT+0x1b8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d02c      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a52      	ldr	r2, [pc, #328]	; (8006990 <HAL_DMA_Abort_IT+0x1bc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d027      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a50      	ldr	r2, [pc, #320]	; (8006994 <HAL_DMA_Abort_IT+0x1c0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d022      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a4f      	ldr	r2, [pc, #316]	; (8006998 <HAL_DMA_Abort_IT+0x1c4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d01d      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4d      	ldr	r2, [pc, #308]	; (800699c <HAL_DMA_Abort_IT+0x1c8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4c      	ldr	r2, [pc, #304]	; (80069a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a4a      	ldr	r2, [pc, #296]	; (80069a4 <HAL_DMA_Abort_IT+0x1d0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a49      	ldr	r2, [pc, #292]	; (80069a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a47      	ldr	r2, [pc, #284]	; (80069ac <HAL_DMA_Abort_IT+0x1d8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_DMA_Abort_IT+0xc8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a46      	ldr	r2, [pc, #280]	; (80069b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d101      	bne.n	80068a0 <HAL_DMA_Abort_IT+0xcc>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_DMA_Abort_IT+0xce>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8086 	beq.w	80069b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2204      	movs	r2, #4
 80068ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2f      	ldr	r2, [pc, #188]	; (8006974 <HAL_DMA_Abort_IT+0x1a0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d04a      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2e      	ldr	r2, [pc, #184]	; (8006978 <HAL_DMA_Abort_IT+0x1a4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d045      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2c      	ldr	r2, [pc, #176]	; (800697c <HAL_DMA_Abort_IT+0x1a8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d040      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	; (8006980 <HAL_DMA_Abort_IT+0x1ac>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d03b      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <HAL_DMA_Abort_IT+0x1b0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d036      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_DMA_Abort_IT+0x1b4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d031      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a26      	ldr	r2, [pc, #152]	; (800698c <HAL_DMA_Abort_IT+0x1b8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02c      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a25      	ldr	r2, [pc, #148]	; (8006990 <HAL_DMA_Abort_IT+0x1bc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d027      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_DMA_Abort_IT+0x1c0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d022      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <HAL_DMA_Abort_IT+0x1c4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d01d      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a20      	ldr	r2, [pc, #128]	; (800699c <HAL_DMA_Abort_IT+0x1c8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d018      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <HAL_DMA_Abort_IT+0x1d0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00e      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d009      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <HAL_DMA_Abort_IT+0x1d8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <HAL_DMA_Abort_IT+0x17c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_DMA_Abort_IT+0x1dc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <HAL_DMA_Abort_IT+0x18e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e178      	b.n	8006c54 <HAL_DMA_Abort_IT+0x480>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e16f      	b.n	8006c54 <HAL_DMA_Abort_IT+0x480>
 8006974:	40020010 	.word	0x40020010
 8006978:	40020028 	.word	0x40020028
 800697c:	40020040 	.word	0x40020040
 8006980:	40020058 	.word	0x40020058
 8006984:	40020070 	.word	0x40020070
 8006988:	40020088 	.word	0x40020088
 800698c:	400200a0 	.word	0x400200a0
 8006990:	400200b8 	.word	0x400200b8
 8006994:	40020410 	.word	0x40020410
 8006998:	40020428 	.word	0x40020428
 800699c:	40020440 	.word	0x40020440
 80069a0:	40020458 	.word	0x40020458
 80069a4:	40020470 	.word	0x40020470
 80069a8:	40020488 	.word	0x40020488
 80069ac:	400204a0 	.word	0x400204a0
 80069b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 020e 	bic.w	r2, r2, #14
 80069c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6c      	ldr	r2, [pc, #432]	; (8006b7c <HAL_DMA_Abort_IT+0x3a8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04a      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a6b      	ldr	r2, [pc, #428]	; (8006b80 <HAL_DMA_Abort_IT+0x3ac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d045      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a69      	ldr	r2, [pc, #420]	; (8006b84 <HAL_DMA_Abort_IT+0x3b0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d040      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a68      	ldr	r2, [pc, #416]	; (8006b88 <HAL_DMA_Abort_IT+0x3b4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03b      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a66      	ldr	r2, [pc, #408]	; (8006b8c <HAL_DMA_Abort_IT+0x3b8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_DMA_Abort_IT+0x3bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d031      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <HAL_DMA_Abort_IT+0x3c0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a62      	ldr	r2, [pc, #392]	; (8006b98 <HAL_DMA_Abort_IT+0x3c4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d027      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a60      	ldr	r2, [pc, #384]	; (8006b9c <HAL_DMA_Abort_IT+0x3c8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a5f      	ldr	r2, [pc, #380]	; (8006ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01d      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a5c      	ldr	r2, [pc, #368]	; (8006ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a5a      	ldr	r2, [pc, #360]	; (8006bac <HAL_DMA_Abort_IT+0x3d8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a59      	ldr	r2, [pc, #356]	; (8006bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a57      	ldr	r2, [pc, #348]	; (8006bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_Abort_IT+0x290>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a56      	ldr	r2, [pc, #344]	; (8006bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <HAL_DMA_Abort_IT+0x2a2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <HAL_DMA_Abort_IT+0x2b2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3c      	ldr	r2, [pc, #240]	; (8006b7c <HAL_DMA_Abort_IT+0x3a8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d072      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <HAL_DMA_Abort_IT+0x3ac>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d06d      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a39      	ldr	r2, [pc, #228]	; (8006b84 <HAL_DMA_Abort_IT+0x3b0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d068      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a37      	ldr	r2, [pc, #220]	; (8006b88 <HAL_DMA_Abort_IT+0x3b4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d063      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a36      	ldr	r2, [pc, #216]	; (8006b8c <HAL_DMA_Abort_IT+0x3b8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d05e      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <HAL_DMA_Abort_IT+0x3bc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d059      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a33      	ldr	r2, [pc, #204]	; (8006b94 <HAL_DMA_Abort_IT+0x3c0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d054      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a31      	ldr	r2, [pc, #196]	; (8006b98 <HAL_DMA_Abort_IT+0x3c4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d04f      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a30      	ldr	r2, [pc, #192]	; (8006b9c <HAL_DMA_Abort_IT+0x3c8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2e      	ldr	r2, [pc, #184]	; (8006ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2b      	ldr	r2, [pc, #172]	; (8006ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2a      	ldr	r2, [pc, #168]	; (8006bac <HAL_DMA_Abort_IT+0x3d8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a25      	ldr	r2, [pc, #148]	; (8006bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <HAL_DMA_Abort_IT+0x3e8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <HAL_DMA_Abort_IT+0x3ec>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a21      	ldr	r2, [pc, #132]	; (8006bc4 <HAL_DMA_Abort_IT+0x3f0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1f      	ldr	r2, [pc, #124]	; (8006bc8 <HAL_DMA_Abort_IT+0x3f4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1e      	ldr	r2, [pc, #120]	; (8006bcc <HAL_DMA_Abort_IT+0x3f8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1c      	ldr	r2, [pc, #112]	; (8006bd0 <HAL_DMA_Abort_IT+0x3fc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1b      	ldr	r2, [pc, #108]	; (8006bd4 <HAL_DMA_Abort_IT+0x400>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x3a2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a19      	ldr	r2, [pc, #100]	; (8006bd8 <HAL_DMA_Abort_IT+0x404>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d132      	bne.n	8006bdc <HAL_DMA_Abort_IT+0x408>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e031      	b.n	8006bde <HAL_DMA_Abort_IT+0x40a>
 8006b7a:	bf00      	nop
 8006b7c:	40020010 	.word	0x40020010
 8006b80:	40020028 	.word	0x40020028
 8006b84:	40020040 	.word	0x40020040
 8006b88:	40020058 	.word	0x40020058
 8006b8c:	40020070 	.word	0x40020070
 8006b90:	40020088 	.word	0x40020088
 8006b94:	400200a0 	.word	0x400200a0
 8006b98:	400200b8 	.word	0x400200b8
 8006b9c:	40020410 	.word	0x40020410
 8006ba0:	40020428 	.word	0x40020428
 8006ba4:	40020440 	.word	0x40020440
 8006ba8:	40020458 	.word	0x40020458
 8006bac:	40020470 	.word	0x40020470
 8006bb0:	40020488 	.word	0x40020488
 8006bb4:	400204a0 	.word	0x400204a0
 8006bb8:	400204b8 	.word	0x400204b8
 8006bbc:	58025408 	.word	0x58025408
 8006bc0:	5802541c 	.word	0x5802541c
 8006bc4:	58025430 	.word	0x58025430
 8006bc8:	58025444 	.word	0x58025444
 8006bcc:	58025458 	.word	0x58025458
 8006bd0:	5802546c 	.word	0x5802546c
 8006bd4:	58025480 	.word	0x58025480
 8006bd8:	58025494 	.word	0x58025494
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d028      	beq.n	8006c34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	2201      	movs	r2, #1
 8006c02:	409a      	lsls	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	; 0x28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c6c:	4b67      	ldr	r3, [pc, #412]	; (8006e0c <HAL_DMA_IRQHandler+0x1ac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a67      	ldr	r2, [pc, #412]	; (8006e10 <HAL_DMA_IRQHandler+0x1b0>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	0a9b      	lsrs	r3, r3, #10
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a5f      	ldr	r2, [pc, #380]	; (8006e14 <HAL_DMA_IRQHandler+0x1b4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a5d      	ldr	r2, [pc, #372]	; (8006e18 <HAL_DMA_IRQHandler+0x1b8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_DMA_IRQHandler+0x1bc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5a      	ldr	r2, [pc, #360]	; (8006e20 <HAL_DMA_IRQHandler+0x1c0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a59      	ldr	r2, [pc, #356]	; (8006e24 <HAL_DMA_IRQHandler+0x1c4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a57      	ldr	r2, [pc, #348]	; (8006e28 <HAL_DMA_IRQHandler+0x1c8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a56      	ldr	r2, [pc, #344]	; (8006e2c <HAL_DMA_IRQHandler+0x1cc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a54      	ldr	r2, [pc, #336]	; (8006e30 <HAL_DMA_IRQHandler+0x1d0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a53      	ldr	r2, [pc, #332]	; (8006e34 <HAL_DMA_IRQHandler+0x1d4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a51      	ldr	r2, [pc, #324]	; (8006e38 <HAL_DMA_IRQHandler+0x1d8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a50      	ldr	r2, [pc, #320]	; (8006e3c <HAL_DMA_IRQHandler+0x1dc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a4e      	ldr	r2, [pc, #312]	; (8006e40 <HAL_DMA_IRQHandler+0x1e0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a4d      	ldr	r2, [pc, #308]	; (8006e44 <HAL_DMA_IRQHandler+0x1e4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a4b      	ldr	r2, [pc, #300]	; (8006e48 <HAL_DMA_IRQHandler+0x1e8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a4a      	ldr	r2, [pc, #296]	; (8006e4c <HAL_DMA_IRQHandler+0x1ec>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xd2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a48      	ldr	r2, [pc, #288]	; (8006e50 <HAL_DMA_IRQHandler+0x1f0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d101      	bne.n	8006d36 <HAL_DMA_IRQHandler+0xd6>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <HAL_DMA_IRQHandler+0xd8>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 842b 	beq.w	8007594 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2208      	movs	r2, #8
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80a2 	beq.w	8006e98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2e      	ldr	r2, [pc, #184]	; (8006e14 <HAL_DMA_IRQHandler+0x1b4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d04a      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2d      	ldr	r2, [pc, #180]	; (8006e18 <HAL_DMA_IRQHandler+0x1b8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d045      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	; (8006e1c <HAL_DMA_IRQHandler+0x1bc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d040      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <HAL_DMA_IRQHandler+0x1c0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d03b      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <HAL_DMA_IRQHandler+0x1c4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d036      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <HAL_DMA_IRQHandler+0x1c8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d031      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <HAL_DMA_IRQHandler+0x1cc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d02c      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <HAL_DMA_IRQHandler+0x1d0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d027      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a22      	ldr	r2, [pc, #136]	; (8006e34 <HAL_DMA_IRQHandler+0x1d4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d022      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <HAL_DMA_IRQHandler+0x1d8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d01d      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <HAL_DMA_IRQHandler+0x1dc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d018      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <HAL_DMA_IRQHandler+0x1e0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <HAL_DMA_IRQHandler+0x1e4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00e      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1b      	ldr	r2, [pc, #108]	; (8006e48 <HAL_DMA_IRQHandler+0x1e8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d009      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a19      	ldr	r2, [pc, #100]	; (8006e4c <HAL_DMA_IRQHandler+0x1ec>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x194>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_DMA_IRQHandler+0x1f0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d12f      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x1f4>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e02e      	b.n	8006e68 <HAL_DMA_IRQHandler+0x208>
 8006e0a:	bf00      	nop
 8006e0c:	24000004 	.word	0x24000004
 8006e10:	1b4e81b5 	.word	0x1b4e81b5
 8006e14:	40020010 	.word	0x40020010
 8006e18:	40020028 	.word	0x40020028
 8006e1c:	40020040 	.word	0x40020040
 8006e20:	40020058 	.word	0x40020058
 8006e24:	40020070 	.word	0x40020070
 8006e28:	40020088 	.word	0x40020088
 8006e2c:	400200a0 	.word	0x400200a0
 8006e30:	400200b8 	.word	0x400200b8
 8006e34:	40020410 	.word	0x40020410
 8006e38:	40020428 	.word	0x40020428
 8006e3c:	40020440 	.word	0x40020440
 8006e40:	40020458 	.word	0x40020458
 8006e44:	40020470 	.word	0x40020470
 8006e48:	40020488 	.word	0x40020488
 8006e4c:	400204a0 	.word	0x400204a0
 8006e50:	400204b8 	.word	0x400204b8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d015      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0204 	bic.w	r2, r2, #4
 8006e7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	2208      	movs	r2, #8
 8006e86:	409a      	lsls	r2, r3
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f043 0201 	orr.w	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d06e      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a69      	ldr	r2, [pc, #420]	; (8007058 <HAL_DMA_IRQHandler+0x3f8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d04a      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a67      	ldr	r2, [pc, #412]	; (800705c <HAL_DMA_IRQHandler+0x3fc>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d045      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a66      	ldr	r2, [pc, #408]	; (8007060 <HAL_DMA_IRQHandler+0x400>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d040      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a64      	ldr	r2, [pc, #400]	; (8007064 <HAL_DMA_IRQHandler+0x404>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d03b      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a63      	ldr	r2, [pc, #396]	; (8007068 <HAL_DMA_IRQHandler+0x408>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d036      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_DMA_IRQHandler+0x40c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d031      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a60      	ldr	r2, [pc, #384]	; (8007070 <HAL_DMA_IRQHandler+0x410>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d02c      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5e      	ldr	r2, [pc, #376]	; (8007074 <HAL_DMA_IRQHandler+0x414>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d027      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5d      	ldr	r2, [pc, #372]	; (8007078 <HAL_DMA_IRQHandler+0x418>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d022      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a5b      	ldr	r2, [pc, #364]	; (800707c <HAL_DMA_IRQHandler+0x41c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01d      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a5a      	ldr	r2, [pc, #360]	; (8007080 <HAL_DMA_IRQHandler+0x420>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d018      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a58      	ldr	r2, [pc, #352]	; (8007084 <HAL_DMA_IRQHandler+0x424>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a57      	ldr	r2, [pc, #348]	; (8007088 <HAL_DMA_IRQHandler+0x428>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a55      	ldr	r2, [pc, #340]	; (800708c <HAL_DMA_IRQHandler+0x42c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a54      	ldr	r2, [pc, #336]	; (8007090 <HAL_DMA_IRQHandler+0x430>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x2ee>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a52      	ldr	r2, [pc, #328]	; (8007094 <HAL_DMA_IRQHandler+0x434>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d10a      	bne.n	8006f64 <HAL_DMA_IRQHandler+0x304>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e003      	b.n	8006f6c <HAL_DMA_IRQHandler+0x30c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00d      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2201      	movs	r2, #1
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	f043 0202 	orr.w	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2204      	movs	r2, #4
 8006f96:	409a      	lsls	r2, r3
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 808f 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <HAL_DMA_IRQHandler+0x3f8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d04a      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <HAL_DMA_IRQHandler+0x3fc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d045      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a29      	ldr	r2, [pc, #164]	; (8007060 <HAL_DMA_IRQHandler+0x400>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d040      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a27      	ldr	r2, [pc, #156]	; (8007064 <HAL_DMA_IRQHandler+0x404>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d03b      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a26      	ldr	r2, [pc, #152]	; (8007068 <HAL_DMA_IRQHandler+0x408>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d036      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a24      	ldr	r2, [pc, #144]	; (800706c <HAL_DMA_IRQHandler+0x40c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d031      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a23      	ldr	r2, [pc, #140]	; (8007070 <HAL_DMA_IRQHandler+0x410>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d02c      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a21      	ldr	r2, [pc, #132]	; (8007074 <HAL_DMA_IRQHandler+0x414>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d027      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a20      	ldr	r2, [pc, #128]	; (8007078 <HAL_DMA_IRQHandler+0x418>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d022      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <HAL_DMA_IRQHandler+0x41c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d01d      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_DMA_IRQHandler+0x420>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d018      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <HAL_DMA_IRQHandler+0x424>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_DMA_IRQHandler+0x428>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00e      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a18      	ldr	r2, [pc, #96]	; (800708c <HAL_DMA_IRQHandler+0x42c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a17      	ldr	r2, [pc, #92]	; (8007090 <HAL_DMA_IRQHandler+0x430>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_DMA_IRQHandler+0x3e2>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <HAL_DMA_IRQHandler+0x434>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d12a      	bne.n	8007098 <HAL_DMA_IRQHandler+0x438>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e023      	b.n	80070a0 <HAL_DMA_IRQHandler+0x440>
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2204      	movs	r2, #4
 80070ae:	409a      	lsls	r2, r3
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f043 0204 	orr.w	r2, r3, #4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2210      	movs	r2, #16
 80070ca:	409a      	lsls	r2, r3
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a6 	beq.w	8007222 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a85      	ldr	r2, [pc, #532]	; (80072f0 <HAL_DMA_IRQHandler+0x690>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a83      	ldr	r2, [pc, #524]	; (80072f4 <HAL_DMA_IRQHandler+0x694>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a82      	ldr	r2, [pc, #520]	; (80072f8 <HAL_DMA_IRQHandler+0x698>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a80      	ldr	r2, [pc, #512]	; (80072fc <HAL_DMA_IRQHandler+0x69c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7f      	ldr	r2, [pc, #508]	; (8007300 <HAL_DMA_IRQHandler+0x6a0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a7d      	ldr	r2, [pc, #500]	; (8007304 <HAL_DMA_IRQHandler+0x6a4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a7c      	ldr	r2, [pc, #496]	; (8007308 <HAL_DMA_IRQHandler+0x6a8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a7a      	ldr	r2, [pc, #488]	; (800730c <HAL_DMA_IRQHandler+0x6ac>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a79      	ldr	r2, [pc, #484]	; (8007310 <HAL_DMA_IRQHandler+0x6b0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a77      	ldr	r2, [pc, #476]	; (8007314 <HAL_DMA_IRQHandler+0x6b4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a76      	ldr	r2, [pc, #472]	; (8007318 <HAL_DMA_IRQHandler+0x6b8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a74      	ldr	r2, [pc, #464]	; (800731c <HAL_DMA_IRQHandler+0x6bc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a73      	ldr	r2, [pc, #460]	; (8007320 <HAL_DMA_IRQHandler+0x6c0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a71      	ldr	r2, [pc, #452]	; (8007324 <HAL_DMA_IRQHandler+0x6c4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a70      	ldr	r2, [pc, #448]	; (8007328 <HAL_DMA_IRQHandler+0x6c8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_DMA_IRQHandler+0x516>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a6e      	ldr	r2, [pc, #440]	; (800732c <HAL_DMA_IRQHandler+0x6cc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10a      	bne.n	800718c <HAL_DMA_IRQHandler+0x52c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e009      	b.n	80071a0 <HAL_DMA_IRQHandler+0x540>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	bf14      	ite	ne
 800719a:	2301      	movne	r3, #1
 800719c:	2300      	moveq	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d03e      	beq.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2210      	movs	r2, #16
 80071ae:	409a      	lsls	r2, r3
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d018      	beq.n	80071f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d108      	bne.n	80071e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d024      	beq.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
 80071e0:	e01f      	b.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01b      	beq.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
 80071f2:	e016      	b.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d107      	bne.n	8007212 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0208 	bic.w	r2, r2, #8
 8007210:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2220      	movs	r2, #32
 800722c:	409a      	lsls	r2, r3
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8110 	beq.w	8007458 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <HAL_DMA_IRQHandler+0x690>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d04a      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2b      	ldr	r2, [pc, #172]	; (80072f4 <HAL_DMA_IRQHandler+0x694>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d045      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <HAL_DMA_IRQHandler+0x698>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d040      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a28      	ldr	r2, [pc, #160]	; (80072fc <HAL_DMA_IRQHandler+0x69c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d03b      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a26      	ldr	r2, [pc, #152]	; (8007300 <HAL_DMA_IRQHandler+0x6a0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d036      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a25      	ldr	r2, [pc, #148]	; (8007304 <HAL_DMA_IRQHandler+0x6a4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d031      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a23      	ldr	r2, [pc, #140]	; (8007308 <HAL_DMA_IRQHandler+0x6a8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d02c      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a22      	ldr	r2, [pc, #136]	; (800730c <HAL_DMA_IRQHandler+0x6ac>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d027      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a20      	ldr	r2, [pc, #128]	; (8007310 <HAL_DMA_IRQHandler+0x6b0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d022      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <HAL_DMA_IRQHandler+0x6b4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d01d      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_DMA_IRQHandler+0x6b8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d018      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_DMA_IRQHandler+0x6bc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <HAL_DMA_IRQHandler+0x6c0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00e      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_DMA_IRQHandler+0x6c4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d009      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a17      	ldr	r2, [pc, #92]	; (8007328 <HAL_DMA_IRQHandler+0x6c8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x678>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a16      	ldr	r2, [pc, #88]	; (800732c <HAL_DMA_IRQHandler+0x6cc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d12b      	bne.n	8007330 <HAL_DMA_IRQHandler+0x6d0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bf14      	ite	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	2300      	moveq	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	e02a      	b.n	8007344 <HAL_DMA_IRQHandler+0x6e4>
 80072ee:	bf00      	nop
 80072f0:	40020010 	.word	0x40020010
 80072f4:	40020028 	.word	0x40020028
 80072f8:	40020040 	.word	0x40020040
 80072fc:	40020058 	.word	0x40020058
 8007300:	40020070 	.word	0x40020070
 8007304:	40020088 	.word	0x40020088
 8007308:	400200a0 	.word	0x400200a0
 800730c:	400200b8 	.word	0x400200b8
 8007310:	40020410 	.word	0x40020410
 8007314:	40020428 	.word	0x40020428
 8007318:	40020440 	.word	0x40020440
 800731c:	40020458 	.word	0x40020458
 8007320:	40020470 	.word	0x40020470
 8007324:	40020488 	.word	0x40020488
 8007328:	400204a0 	.word	0x400204a0
 800732c:	400204b8 	.word	0x400204b8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf14      	ite	ne
 800733e:	2301      	movne	r3, #1
 8007340:	2300      	moveq	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8087 	beq.w	8007458 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2220      	movs	r2, #32
 8007354:	409a      	lsls	r2, r3
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b04      	cmp	r3, #4
 8007364:	d139      	bne.n	80073da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0216 	bic.w	r2, r2, #22
 8007374:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007384:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <HAL_DMA_IRQHandler+0x736>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0208 	bic.w	r2, r2, #8
 80073a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	223f      	movs	r2, #63	; 0x3f
 80073b0:	409a      	lsls	r2, r3
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8382 	beq.w	8007ad4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
          }
          return;
 80073d8:	e37c      	b.n	8007ad4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d018      	beq.n	800741a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d02c      	beq.n	8007458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	e027      	b.n	8007458 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d023      	beq.n	8007458 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
 8007418:	e01e      	b.n	8007458 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10f      	bne.n	8007448 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0210 	bic.w	r2, r2, #16
 8007436:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 833e 	beq.w	8007ade <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8088 	beq.w	8007580 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2204      	movs	r2, #4
 8007474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a89      	ldr	r2, [pc, #548]	; (80076a4 <HAL_DMA_IRQHandler+0xa44>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d04a      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a88      	ldr	r2, [pc, #544]	; (80076a8 <HAL_DMA_IRQHandler+0xa48>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d045      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a86      	ldr	r2, [pc, #536]	; (80076ac <HAL_DMA_IRQHandler+0xa4c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d040      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a85      	ldr	r2, [pc, #532]	; (80076b0 <HAL_DMA_IRQHandler+0xa50>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d03b      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a83      	ldr	r2, [pc, #524]	; (80076b4 <HAL_DMA_IRQHandler+0xa54>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d036      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a82      	ldr	r2, [pc, #520]	; (80076b8 <HAL_DMA_IRQHandler+0xa58>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d031      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a80      	ldr	r2, [pc, #512]	; (80076bc <HAL_DMA_IRQHandler+0xa5c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d02c      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7f      	ldr	r2, [pc, #508]	; (80076c0 <HAL_DMA_IRQHandler+0xa60>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d027      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7d      	ldr	r2, [pc, #500]	; (80076c4 <HAL_DMA_IRQHandler+0xa64>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d022      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a7c      	ldr	r2, [pc, #496]	; (80076c8 <HAL_DMA_IRQHandler+0xa68>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d01d      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7a      	ldr	r2, [pc, #488]	; (80076cc <HAL_DMA_IRQHandler+0xa6c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d018      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a79      	ldr	r2, [pc, #484]	; (80076d0 <HAL_DMA_IRQHandler+0xa70>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a77      	ldr	r2, [pc, #476]	; (80076d4 <HAL_DMA_IRQHandler+0xa74>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00e      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a76      	ldr	r2, [pc, #472]	; (80076d8 <HAL_DMA_IRQHandler+0xa78>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a74      	ldr	r2, [pc, #464]	; (80076dc <HAL_DMA_IRQHandler+0xa7c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_DMA_IRQHandler+0x8b8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a73      	ldr	r2, [pc, #460]	; (80076e0 <HAL_DMA_IRQHandler+0xa80>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d108      	bne.n	800752a <HAL_DMA_IRQHandler+0x8ca>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	e007      	b.n	800753a <HAL_DMA_IRQHandler+0x8da>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0201 	bic.w	r2, r2, #1
 8007538:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007542:	429a      	cmp	r2, r3
 8007544:	d307      	bcc.n	8007556 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f2      	bne.n	800753a <HAL_DMA_IRQHandler+0x8da>
 8007554:	e000      	b.n	8007558 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007556:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2203      	movs	r2, #3
 800756a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800756e:	e003      	b.n	8007578 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 82aa 	beq.w	8007ade <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	e2a4      	b.n	8007ade <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a52      	ldr	r2, [pc, #328]	; (80076e4 <HAL_DMA_IRQHandler+0xa84>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d04a      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a51      	ldr	r2, [pc, #324]	; (80076e8 <HAL_DMA_IRQHandler+0xa88>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d045      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a4f      	ldr	r2, [pc, #316]	; (80076ec <HAL_DMA_IRQHandler+0xa8c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d040      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4e      	ldr	r2, [pc, #312]	; (80076f0 <HAL_DMA_IRQHandler+0xa90>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d03b      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a4c      	ldr	r2, [pc, #304]	; (80076f4 <HAL_DMA_IRQHandler+0xa94>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d036      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a4b      	ldr	r2, [pc, #300]	; (80076f8 <HAL_DMA_IRQHandler+0xa98>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d031      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a49      	ldr	r2, [pc, #292]	; (80076fc <HAL_DMA_IRQHandler+0xa9c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d02c      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a48      	ldr	r2, [pc, #288]	; (8007700 <HAL_DMA_IRQHandler+0xaa0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d027      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a46      	ldr	r2, [pc, #280]	; (8007704 <HAL_DMA_IRQHandler+0xaa4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a45      	ldr	r2, [pc, #276]	; (8007708 <HAL_DMA_IRQHandler+0xaa8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d01d      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a43      	ldr	r2, [pc, #268]	; (800770c <HAL_DMA_IRQHandler+0xaac>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a42      	ldr	r2, [pc, #264]	; (8007710 <HAL_DMA_IRQHandler+0xab0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a40      	ldr	r2, [pc, #256]	; (8007714 <HAL_DMA_IRQHandler+0xab4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a3f      	ldr	r2, [pc, #252]	; (8007718 <HAL_DMA_IRQHandler+0xab8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a3d      	ldr	r2, [pc, #244]	; (800771c <HAL_DMA_IRQHandler+0xabc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_DMA_IRQHandler+0x9d4>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3c      	ldr	r2, [pc, #240]	; (8007720 <HAL_DMA_IRQHandler+0xac0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <HAL_DMA_IRQHandler+0x9d8>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_DMA_IRQHandler+0x9da>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 824f 	beq.w	8007ade <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2204      	movs	r2, #4
 8007652:	409a      	lsls	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80dd 	beq.w	8007818 <HAL_DMA_IRQHandler+0xbb8>
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80d7 	beq.w	8007818 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2204      	movs	r2, #4
 8007674:	409a      	lsls	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d059      	beq.n	8007738 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d14a      	bne.n	8007724 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8220 	beq.w	8007ad8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076a0:	e21a      	b.n	8007ad8 <HAL_DMA_IRQHandler+0xe78>
 80076a2:	bf00      	nop
 80076a4:	40020010 	.word	0x40020010
 80076a8:	40020028 	.word	0x40020028
 80076ac:	40020040 	.word	0x40020040
 80076b0:	40020058 	.word	0x40020058
 80076b4:	40020070 	.word	0x40020070
 80076b8:	40020088 	.word	0x40020088
 80076bc:	400200a0 	.word	0x400200a0
 80076c0:	400200b8 	.word	0x400200b8
 80076c4:	40020410 	.word	0x40020410
 80076c8:	40020428 	.word	0x40020428
 80076cc:	40020440 	.word	0x40020440
 80076d0:	40020458 	.word	0x40020458
 80076d4:	40020470 	.word	0x40020470
 80076d8:	40020488 	.word	0x40020488
 80076dc:	400204a0 	.word	0x400204a0
 80076e0:	400204b8 	.word	0x400204b8
 80076e4:	48022c08 	.word	0x48022c08
 80076e8:	48022c1c 	.word	0x48022c1c
 80076ec:	48022c30 	.word	0x48022c30
 80076f0:	48022c44 	.word	0x48022c44
 80076f4:	48022c58 	.word	0x48022c58
 80076f8:	48022c6c 	.word	0x48022c6c
 80076fc:	48022c80 	.word	0x48022c80
 8007700:	48022c94 	.word	0x48022c94
 8007704:	58025408 	.word	0x58025408
 8007708:	5802541c 	.word	0x5802541c
 800770c:	58025430 	.word	0x58025430
 8007710:	58025444 	.word	0x58025444
 8007714:	58025458 	.word	0x58025458
 8007718:	5802546c 	.word	0x5802546c
 800771c:	58025480 	.word	0x58025480
 8007720:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 81d5 	beq.w	8007ad8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007736:	e1cf      	b.n	8007ad8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d160      	bne.n	8007804 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a7f      	ldr	r2, [pc, #508]	; (8007944 <HAL_DMA_IRQHandler+0xce4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d04a      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a7d      	ldr	r2, [pc, #500]	; (8007948 <HAL_DMA_IRQHandler+0xce8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d045      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a7c      	ldr	r2, [pc, #496]	; (800794c <HAL_DMA_IRQHandler+0xcec>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d040      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a7a      	ldr	r2, [pc, #488]	; (8007950 <HAL_DMA_IRQHandler+0xcf0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d03b      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a79      	ldr	r2, [pc, #484]	; (8007954 <HAL_DMA_IRQHandler+0xcf4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d036      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a77      	ldr	r2, [pc, #476]	; (8007958 <HAL_DMA_IRQHandler+0xcf8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d031      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a76      	ldr	r2, [pc, #472]	; (800795c <HAL_DMA_IRQHandler+0xcfc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d02c      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a74      	ldr	r2, [pc, #464]	; (8007960 <HAL_DMA_IRQHandler+0xd00>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d027      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a73      	ldr	r2, [pc, #460]	; (8007964 <HAL_DMA_IRQHandler+0xd04>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d022      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a71      	ldr	r2, [pc, #452]	; (8007968 <HAL_DMA_IRQHandler+0xd08>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01d      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a70      	ldr	r2, [pc, #448]	; (800796c <HAL_DMA_IRQHandler+0xd0c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d018      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a6e      	ldr	r2, [pc, #440]	; (8007970 <HAL_DMA_IRQHandler+0xd10>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a6d      	ldr	r2, [pc, #436]	; (8007974 <HAL_DMA_IRQHandler+0xd14>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00e      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6b      	ldr	r2, [pc, #428]	; (8007978 <HAL_DMA_IRQHandler+0xd18>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6a      	ldr	r2, [pc, #424]	; (800797c <HAL_DMA_IRQHandler+0xd1c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xb82>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a68      	ldr	r2, [pc, #416]	; (8007980 <HAL_DMA_IRQHandler+0xd20>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d108      	bne.n	80077f4 <HAL_DMA_IRQHandler+0xb94>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0208 	bic.w	r2, r2, #8
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e007      	b.n	8007804 <HAL_DMA_IRQHandler+0xba4>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0204 	bic.w	r2, r2, #4
 8007802:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8165 	beq.w	8007ad8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007816:	e15f      	b.n	8007ad8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2202      	movs	r2, #2
 8007822:	409a      	lsls	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80c5 	beq.w	80079b8 <HAL_DMA_IRQHandler+0xd58>
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80bf 	beq.w	80079b8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2202      	movs	r2, #2
 8007844:	409a      	lsls	r2, r3
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d018      	beq.n	8007886 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 813a 	beq.w	8007adc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007870:	e134      	b.n	8007adc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8130 	beq.w	8007adc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007884:	e12a      	b.n	8007adc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 8089 	bne.w	80079a4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2b      	ldr	r2, [pc, #172]	; (8007944 <HAL_DMA_IRQHandler+0xce4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d04a      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a29      	ldr	r2, [pc, #164]	; (8007948 <HAL_DMA_IRQHandler+0xce8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d045      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a28      	ldr	r2, [pc, #160]	; (800794c <HAL_DMA_IRQHandler+0xcec>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d040      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a26      	ldr	r2, [pc, #152]	; (8007950 <HAL_DMA_IRQHandler+0xcf0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d03b      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a25      	ldr	r2, [pc, #148]	; (8007954 <HAL_DMA_IRQHandler+0xcf4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d036      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a23      	ldr	r2, [pc, #140]	; (8007958 <HAL_DMA_IRQHandler+0xcf8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d031      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a22      	ldr	r2, [pc, #136]	; (800795c <HAL_DMA_IRQHandler+0xcfc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d02c      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <HAL_DMA_IRQHandler+0xd00>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d027      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <HAL_DMA_IRQHandler+0xd04>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d022      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1d      	ldr	r2, [pc, #116]	; (8007968 <HAL_DMA_IRQHandler+0xd08>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01d      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1c      	ldr	r2, [pc, #112]	; (800796c <HAL_DMA_IRQHandler+0xd0c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d018      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1a      	ldr	r2, [pc, #104]	; (8007970 <HAL_DMA_IRQHandler+0xd10>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a19      	ldr	r2, [pc, #100]	; (8007974 <HAL_DMA_IRQHandler+0xd14>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00e      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a17      	ldr	r2, [pc, #92]	; (8007978 <HAL_DMA_IRQHandler+0xd18>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d009      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a16      	ldr	r2, [pc, #88]	; (800797c <HAL_DMA_IRQHandler+0xd1c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d004      	beq.n	8007932 <HAL_DMA_IRQHandler+0xcd2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <HAL_DMA_IRQHandler+0xd20>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d128      	bne.n	8007984 <HAL_DMA_IRQHandler+0xd24>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0214 	bic.w	r2, r2, #20
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e027      	b.n	8007994 <HAL_DMA_IRQHandler+0xd34>
 8007944:	40020010 	.word	0x40020010
 8007948:	40020028 	.word	0x40020028
 800794c:	40020040 	.word	0x40020040
 8007950:	40020058 	.word	0x40020058
 8007954:	40020070 	.word	0x40020070
 8007958:	40020088 	.word	0x40020088
 800795c:	400200a0 	.word	0x400200a0
 8007960:	400200b8 	.word	0x400200b8
 8007964:	40020410 	.word	0x40020410
 8007968:	40020428 	.word	0x40020428
 800796c:	40020440 	.word	0x40020440
 8007970:	40020458 	.word	0x40020458
 8007974:	40020470 	.word	0x40020470
 8007978:	40020488 	.word	0x40020488
 800797c:	400204a0 	.word	0x400204a0
 8007980:	400204b8 	.word	0x400204b8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 020a 	bic.w	r2, r2, #10
 8007992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8097 	beq.w	8007adc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b6:	e091      	b.n	8007adc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	2208      	movs	r2, #8
 80079c2:	409a      	lsls	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8088 	beq.w	8007ade <HAL_DMA_IRQHandler+0xe7e>
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8082 	beq.w	8007ade <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a41      	ldr	r2, [pc, #260]	; (8007ae4 <HAL_DMA_IRQHandler+0xe84>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d04a      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a3f      	ldr	r2, [pc, #252]	; (8007ae8 <HAL_DMA_IRQHandler+0xe88>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d045      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a3e      	ldr	r2, [pc, #248]	; (8007aec <HAL_DMA_IRQHandler+0xe8c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d040      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a3c      	ldr	r2, [pc, #240]	; (8007af0 <HAL_DMA_IRQHandler+0xe90>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d03b      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a3b      	ldr	r2, [pc, #236]	; (8007af4 <HAL_DMA_IRQHandler+0xe94>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d036      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a39      	ldr	r2, [pc, #228]	; (8007af8 <HAL_DMA_IRQHandler+0xe98>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a38      	ldr	r2, [pc, #224]	; (8007afc <HAL_DMA_IRQHandler+0xe9c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a36      	ldr	r2, [pc, #216]	; (8007b00 <HAL_DMA_IRQHandler+0xea0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a35      	ldr	r2, [pc, #212]	; (8007b04 <HAL_DMA_IRQHandler+0xea4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a33      	ldr	r2, [pc, #204]	; (8007b08 <HAL_DMA_IRQHandler+0xea8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a32      	ldr	r2, [pc, #200]	; (8007b0c <HAL_DMA_IRQHandler+0xeac>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a30      	ldr	r2, [pc, #192]	; (8007b10 <HAL_DMA_IRQHandler+0xeb0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <HAL_DMA_IRQHandler+0xeb4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a2d      	ldr	r2, [pc, #180]	; (8007b18 <HAL_DMA_IRQHandler+0xeb8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a2c      	ldr	r2, [pc, #176]	; (8007b1c <HAL_DMA_IRQHandler+0xebc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xe1a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2a      	ldr	r2, [pc, #168]	; (8007b20 <HAL_DMA_IRQHandler+0xec0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d108      	bne.n	8007a8c <HAL_DMA_IRQHandler+0xe2c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 021c 	bic.w	r2, r2, #28
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e007      	b.n	8007a9c <HAL_DMA_IRQHandler+0xe3c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 020e 	bic.w	r2, r2, #14
 8007a9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa0:	f003 031f 	and.w	r3, r3, #31
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	409a      	lsls	r2, r3
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
 8007ad2:	e004      	b.n	8007ade <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007ad4:	bf00      	nop
 8007ad6:	e002      	b.n	8007ade <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ad8:	bf00      	nop
 8007ada:	e000      	b.n	8007ade <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007adc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ade:	3728      	adds	r7, #40	; 0x28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40020010 	.word	0x40020010
 8007ae8:	40020028 	.word	0x40020028
 8007aec:	40020040 	.word	0x40020040
 8007af0:	40020058 	.word	0x40020058
 8007af4:	40020070 	.word	0x40020070
 8007af8:	40020088 	.word	0x40020088
 8007afc:	400200a0 	.word	0x400200a0
 8007b00:	400200b8 	.word	0x400200b8
 8007b04:	40020410 	.word	0x40020410
 8007b08:	40020428 	.word	0x40020428
 8007b0c:	40020440 	.word	0x40020440
 8007b10:	40020458 	.word	0x40020458
 8007b14:	40020470 	.word	0x40020470
 8007b18:	40020488 	.word	0x40020488
 8007b1c:	400204a0 	.word	0x400204a0
 8007b20:	400204b8 	.word	0x400204b8

08007b24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a7f      	ldr	r2, [pc, #508]	; (8007d40 <DMA_SetConfig+0x21c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d072      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7d      	ldr	r2, [pc, #500]	; (8007d44 <DMA_SetConfig+0x220>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d06d      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a7c      	ldr	r2, [pc, #496]	; (8007d48 <DMA_SetConfig+0x224>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d068      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a7a      	ldr	r2, [pc, #488]	; (8007d4c <DMA_SetConfig+0x228>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d063      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a79      	ldr	r2, [pc, #484]	; (8007d50 <DMA_SetConfig+0x22c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d05e      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a77      	ldr	r2, [pc, #476]	; (8007d54 <DMA_SetConfig+0x230>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d059      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a76      	ldr	r2, [pc, #472]	; (8007d58 <DMA_SetConfig+0x234>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d054      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a74      	ldr	r2, [pc, #464]	; (8007d5c <DMA_SetConfig+0x238>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d04f      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a73      	ldr	r2, [pc, #460]	; (8007d60 <DMA_SetConfig+0x23c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d04a      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a71      	ldr	r2, [pc, #452]	; (8007d64 <DMA_SetConfig+0x240>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d045      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a70      	ldr	r2, [pc, #448]	; (8007d68 <DMA_SetConfig+0x244>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d040      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a6e      	ldr	r2, [pc, #440]	; (8007d6c <DMA_SetConfig+0x248>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d03b      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a6d      	ldr	r2, [pc, #436]	; (8007d70 <DMA_SetConfig+0x24c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d036      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a6b      	ldr	r2, [pc, #428]	; (8007d74 <DMA_SetConfig+0x250>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d031      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6a      	ldr	r2, [pc, #424]	; (8007d78 <DMA_SetConfig+0x254>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d02c      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a68      	ldr	r2, [pc, #416]	; (8007d7c <DMA_SetConfig+0x258>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d027      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a67      	ldr	r2, [pc, #412]	; (8007d80 <DMA_SetConfig+0x25c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d022      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a65      	ldr	r2, [pc, #404]	; (8007d84 <DMA_SetConfig+0x260>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a64      	ldr	r2, [pc, #400]	; (8007d88 <DMA_SetConfig+0x264>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d018      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a62      	ldr	r2, [pc, #392]	; (8007d8c <DMA_SetConfig+0x268>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a61      	ldr	r2, [pc, #388]	; (8007d90 <DMA_SetConfig+0x26c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a5f      	ldr	r2, [pc, #380]	; (8007d94 <DMA_SetConfig+0x270>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a5e      	ldr	r2, [pc, #376]	; (8007d98 <DMA_SetConfig+0x274>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <DMA_SetConfig+0x10a>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a5c      	ldr	r2, [pc, #368]	; (8007d9c <DMA_SetConfig+0x278>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d101      	bne.n	8007c32 <DMA_SetConfig+0x10e>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <DMA_SetConfig+0x110>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a39      	ldr	r2, [pc, #228]	; (8007d40 <DMA_SetConfig+0x21c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d04a      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a38      	ldr	r2, [pc, #224]	; (8007d44 <DMA_SetConfig+0x220>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d045      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a36      	ldr	r2, [pc, #216]	; (8007d48 <DMA_SetConfig+0x224>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d040      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a35      	ldr	r2, [pc, #212]	; (8007d4c <DMA_SetConfig+0x228>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d03b      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a33      	ldr	r2, [pc, #204]	; (8007d50 <DMA_SetConfig+0x22c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d036      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a32      	ldr	r2, [pc, #200]	; (8007d54 <DMA_SetConfig+0x230>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d031      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a30      	ldr	r2, [pc, #192]	; (8007d58 <DMA_SetConfig+0x234>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d02c      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <DMA_SetConfig+0x238>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d027      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2d      	ldr	r2, [pc, #180]	; (8007d60 <DMA_SetConfig+0x23c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <DMA_SetConfig+0x240>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d01d      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2a      	ldr	r2, [pc, #168]	; (8007d68 <DMA_SetConfig+0x244>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a29      	ldr	r2, [pc, #164]	; (8007d6c <DMA_SetConfig+0x248>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a27      	ldr	r2, [pc, #156]	; (8007d70 <DMA_SetConfig+0x24c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a26      	ldr	r2, [pc, #152]	; (8007d74 <DMA_SetConfig+0x250>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a24      	ldr	r2, [pc, #144]	; (8007d78 <DMA_SetConfig+0x254>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <DMA_SetConfig+0x1d0>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a23      	ldr	r2, [pc, #140]	; (8007d7c <DMA_SetConfig+0x258>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d101      	bne.n	8007cf8 <DMA_SetConfig+0x1d4>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <DMA_SetConfig+0x1d6>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d059      	beq.n	8007db2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	223f      	movs	r2, #63	; 0x3f
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d138      	bne.n	8007da0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d3e:	e0ae      	b.n	8007e9e <DMA_SetConfig+0x37a>
 8007d40:	40020010 	.word	0x40020010
 8007d44:	40020028 	.word	0x40020028
 8007d48:	40020040 	.word	0x40020040
 8007d4c:	40020058 	.word	0x40020058
 8007d50:	40020070 	.word	0x40020070
 8007d54:	40020088 	.word	0x40020088
 8007d58:	400200a0 	.word	0x400200a0
 8007d5c:	400200b8 	.word	0x400200b8
 8007d60:	40020410 	.word	0x40020410
 8007d64:	40020428 	.word	0x40020428
 8007d68:	40020440 	.word	0x40020440
 8007d6c:	40020458 	.word	0x40020458
 8007d70:	40020470 	.word	0x40020470
 8007d74:	40020488 	.word	0x40020488
 8007d78:	400204a0 	.word	0x400204a0
 8007d7c:	400204b8 	.word	0x400204b8
 8007d80:	58025408 	.word	0x58025408
 8007d84:	5802541c 	.word	0x5802541c
 8007d88:	58025430 	.word	0x58025430
 8007d8c:	58025444 	.word	0x58025444
 8007d90:	58025458 	.word	0x58025458
 8007d94:	5802546c 	.word	0x5802546c
 8007d98:	58025480 	.word	0x58025480
 8007d9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]
}
 8007db0:	e075      	b.n	8007e9e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a3d      	ldr	r2, [pc, #244]	; (8007eac <DMA_SetConfig+0x388>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d04a      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a3b      	ldr	r2, [pc, #236]	; (8007eb0 <DMA_SetConfig+0x38c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d045      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a3a      	ldr	r2, [pc, #232]	; (8007eb4 <DMA_SetConfig+0x390>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d040      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a38      	ldr	r2, [pc, #224]	; (8007eb8 <DMA_SetConfig+0x394>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d03b      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <DMA_SetConfig+0x398>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d036      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a35      	ldr	r2, [pc, #212]	; (8007ec0 <DMA_SetConfig+0x39c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d031      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a34      	ldr	r2, [pc, #208]	; (8007ec4 <DMA_SetConfig+0x3a0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d02c      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a32      	ldr	r2, [pc, #200]	; (8007ec8 <DMA_SetConfig+0x3a4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a31      	ldr	r2, [pc, #196]	; (8007ecc <DMA_SetConfig+0x3a8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d022      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	; (8007ed0 <DMA_SetConfig+0x3ac>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d01d      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a2e      	ldr	r2, [pc, #184]	; (8007ed4 <DMA_SetConfig+0x3b0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d018      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2c      	ldr	r2, [pc, #176]	; (8007ed8 <DMA_SetConfig+0x3b4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2b      	ldr	r2, [pc, #172]	; (8007edc <DMA_SetConfig+0x3b8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00e      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a29      	ldr	r2, [pc, #164]	; (8007ee0 <DMA_SetConfig+0x3bc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a28      	ldr	r2, [pc, #160]	; (8007ee4 <DMA_SetConfig+0x3c0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <DMA_SetConfig+0x32e>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a26      	ldr	r2, [pc, #152]	; (8007ee8 <DMA_SetConfig+0x3c4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <DMA_SetConfig+0x332>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <DMA_SetConfig+0x334>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d020      	beq.n	8007e9e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2201      	movs	r2, #1
 8007e66:	409a      	lsls	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b40      	cmp	r3, #64	; 0x40
 8007e7a:	d108      	bne.n	8007e8e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	60da      	str	r2, [r3, #12]
}
 8007e8c:	e007      	b.n	8007e9e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	60da      	str	r2, [r3, #12]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	48022c08 	.word	0x48022c08
 8007eb0:	48022c1c 	.word	0x48022c1c
 8007eb4:	48022c30 	.word	0x48022c30
 8007eb8:	48022c44 	.word	0x48022c44
 8007ebc:	48022c58 	.word	0x48022c58
 8007ec0:	48022c6c 	.word	0x48022c6c
 8007ec4:	48022c80 	.word	0x48022c80
 8007ec8:	48022c94 	.word	0x48022c94
 8007ecc:	58025408 	.word	0x58025408
 8007ed0:	5802541c 	.word	0x5802541c
 8007ed4:	58025430 	.word	0x58025430
 8007ed8:	58025444 	.word	0x58025444
 8007edc:	58025458 	.word	0x58025458
 8007ee0:	5802546c 	.word	0x5802546c
 8007ee4:	58025480 	.word	0x58025480
 8007ee8:	58025494 	.word	0x58025494

08007eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a42      	ldr	r2, [pc, #264]	; (8008004 <DMA_CalcBaseAndBitshift+0x118>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d04a      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a41      	ldr	r2, [pc, #260]	; (8008008 <DMA_CalcBaseAndBitshift+0x11c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d045      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a3f      	ldr	r2, [pc, #252]	; (800800c <DMA_CalcBaseAndBitshift+0x120>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d040      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a3e      	ldr	r2, [pc, #248]	; (8008010 <DMA_CalcBaseAndBitshift+0x124>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d03b      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a3c      	ldr	r2, [pc, #240]	; (8008014 <DMA_CalcBaseAndBitshift+0x128>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d036      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a3b      	ldr	r2, [pc, #236]	; (8008018 <DMA_CalcBaseAndBitshift+0x12c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d031      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a39      	ldr	r2, [pc, #228]	; (800801c <DMA_CalcBaseAndBitshift+0x130>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d02c      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a38      	ldr	r2, [pc, #224]	; (8008020 <DMA_CalcBaseAndBitshift+0x134>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d027      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a36      	ldr	r2, [pc, #216]	; (8008024 <DMA_CalcBaseAndBitshift+0x138>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d022      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a35      	ldr	r2, [pc, #212]	; (8008028 <DMA_CalcBaseAndBitshift+0x13c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d01d      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a33      	ldr	r2, [pc, #204]	; (800802c <DMA_CalcBaseAndBitshift+0x140>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d018      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a32      	ldr	r2, [pc, #200]	; (8008030 <DMA_CalcBaseAndBitshift+0x144>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d013      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a30      	ldr	r2, [pc, #192]	; (8008034 <DMA_CalcBaseAndBitshift+0x148>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00e      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2f      	ldr	r2, [pc, #188]	; (8008038 <DMA_CalcBaseAndBitshift+0x14c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d009      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a2d      	ldr	r2, [pc, #180]	; (800803c <DMA_CalcBaseAndBitshift+0x150>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <DMA_CalcBaseAndBitshift+0xa8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a2c      	ldr	r2, [pc, #176]	; (8008040 <DMA_CalcBaseAndBitshift+0x154>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d101      	bne.n	8007f98 <DMA_CalcBaseAndBitshift+0xac>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <DMA_CalcBaseAndBitshift+0xae>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d024      	beq.n	8007fe8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	3b10      	subs	r3, #16
 8007fa6:	4a27      	ldr	r2, [pc, #156]	; (8008044 <DMA_CalcBaseAndBitshift+0x158>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	091b      	lsrs	r3, r3, #4
 8007fae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	4a24      	ldr	r2, [pc, #144]	; (8008048 <DMA_CalcBaseAndBitshift+0x15c>)
 8007fb8:	5cd3      	ldrb	r3, [r2, r3]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d908      	bls.n	8007fd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4b1f      	ldr	r3, [pc, #124]	; (800804c <DMA_CalcBaseAndBitshift+0x160>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	1d1a      	adds	r2, r3, #4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8007fd6:	e00d      	b.n	8007ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b1b      	ldr	r3, [pc, #108]	; (800804c <DMA_CalcBaseAndBitshift+0x160>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe6:	e005      	b.n	8007ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
 8008044:	aaaaaaab 	.word	0xaaaaaaab
 8008048:	080177d8 	.word	0x080177d8
 800804c:	fffffc00 	.word	0xfffffc00

08008050 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d120      	bne.n	80080a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	2b03      	cmp	r3, #3
 800806a:	d858      	bhi.n	800811e <DMA_CheckFifoParam+0xce>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <DMA_CheckFifoParam+0x24>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	08008085 	.word	0x08008085
 8008078:	08008097 	.word	0x08008097
 800807c:	08008085 	.word	0x08008085
 8008080:	0800811f 	.word	0x0800811f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d048      	beq.n	8008122 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008094:	e045      	b.n	8008122 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800809e:	d142      	bne.n	8008126 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080a4:	e03f      	b.n	8008126 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ae:	d123      	bne.n	80080f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d838      	bhi.n	800812a <DMA_CheckFifoParam+0xda>
 80080b8:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <DMA_CheckFifoParam+0x70>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080d7 	.word	0x080080d7
 80080c8:	080080d1 	.word	0x080080d1
 80080cc:	080080e9 	.word	0x080080e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
        break;
 80080d4:	e030      	b.n	8008138 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d025      	beq.n	800812e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080e6:	e022      	b.n	800812e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080f0:	d11f      	bne.n	8008132 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080f6:	e01c      	b.n	8008132 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d902      	bls.n	8008106 <DMA_CheckFifoParam+0xb6>
 8008100:	2b03      	cmp	r3, #3
 8008102:	d003      	beq.n	800810c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008104:	e018      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
        break;
 800810a:	e015      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	e00b      	b.n	8008136 <DMA_CheckFifoParam+0xe6>
        break;
 800811e:	bf00      	nop
 8008120:	e00a      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        break;
 8008122:	bf00      	nop
 8008124:	e008      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        break;
 8008126:	bf00      	nop
 8008128:	e006      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        break;
 800812a:	bf00      	nop
 800812c:	e004      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        break;
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
        break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <DMA_CheckFifoParam+0xe8>
    break;
 8008136:	bf00      	nop
    }
  }

  return status;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop

08008148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d022      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a36      	ldr	r2, [pc, #216]	; (8008240 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d01d      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a35      	ldr	r2, [pc, #212]	; (8008244 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d018      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a33      	ldr	r2, [pc, #204]	; (8008248 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d013      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a32      	ldr	r2, [pc, #200]	; (800824c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00e      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a30      	ldr	r2, [pc, #192]	; (8008250 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d009      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2f      	ldr	r2, [pc, #188]	; (8008254 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d004      	beq.n	80081a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2d      	ldr	r2, [pc, #180]	; (8008258 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d101      	bne.n	80081aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80081aa:	2300      	movs	r3, #0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01a      	beq.n	80081e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	3b08      	subs	r3, #8
 80081b8:	4a28      	ldr	r2, [pc, #160]	; (800825c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80081ba:	fba2 2303 	umull	r2, r3, r2, r3
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4b26      	ldr	r3, [pc, #152]	; (8008260 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a24      	ldr	r2, [pc, #144]	; (8008264 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80081d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2201      	movs	r2, #1
 80081de:	409a      	lsls	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80081e4:	e024      	b.n	8008230 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	3b10      	subs	r3, #16
 80081ee:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80081f0:	fba2 2303 	umull	r2, r3, r2, r3
 80081f4:	091b      	lsrs	r3, r3, #4
 80081f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4a1c      	ldr	r2, [pc, #112]	; (800826c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d806      	bhi.n	800820e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d902      	bls.n	800820e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3308      	adds	r3, #8
 800820c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4b18      	ldr	r3, [pc, #96]	; (8008274 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a16      	ldr	r2, [pc, #88]	; (8008278 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008220:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	2201      	movs	r2, #1
 800822a:	409a      	lsls	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008230:	bf00      	nop
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	58025408 	.word	0x58025408
 8008240:	5802541c 	.word	0x5802541c
 8008244:	58025430 	.word	0x58025430
 8008248:	58025444 	.word	0x58025444
 800824c:	58025458 	.word	0x58025458
 8008250:	5802546c 	.word	0x5802546c
 8008254:	58025480 	.word	0x58025480
 8008258:	58025494 	.word	0x58025494
 800825c:	cccccccd 	.word	0xcccccccd
 8008260:	16009600 	.word	0x16009600
 8008264:	58025880 	.word	0x58025880
 8008268:	aaaaaaab 	.word	0xaaaaaaab
 800826c:	400204b8 	.word	0x400204b8
 8008270:	4002040f 	.word	0x4002040f
 8008274:	10008200 	.word	0x10008200
 8008278:	40020880 	.word	0x40020880

0800827c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d04a      	beq.n	8008328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d847      	bhi.n	8008328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a25      	ldr	r2, [pc, #148]	; (8008334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d022      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a24      	ldr	r2, [pc, #144]	; (8008338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d01d      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a22      	ldr	r2, [pc, #136]	; (800833c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d018      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a21      	ldr	r2, [pc, #132]	; (8008340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a1f      	ldr	r2, [pc, #124]	; (8008344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00e      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a1e      	ldr	r2, [pc, #120]	; (8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d009      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1c      	ldr	r2, [pc, #112]	; (800834c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1b      	ldr	r2, [pc, #108]	; (8008350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d101      	bne.n	80082ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80082ec:	2300      	movs	r3, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4b17      	ldr	r3, [pc, #92]	; (8008354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	461a      	mov	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008304:	671a      	str	r2, [r3, #112]	; 0x70
 8008306:	e009      	b.n	800831c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a11      	ldr	r2, [pc, #68]	; (8008360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800831a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3b01      	subs	r3, #1
 8008320:	2201      	movs	r2, #1
 8008322:	409a      	lsls	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	58025408 	.word	0x58025408
 8008338:	5802541c 	.word	0x5802541c
 800833c:	58025430 	.word	0x58025430
 8008340:	58025444 	.word	0x58025444
 8008344:	58025458 	.word	0x58025458
 8008348:	5802546c 	.word	0x5802546c
 800834c:	58025480 	.word	0x58025480
 8008350:	58025494 	.word	0x58025494
 8008354:	1600963f 	.word	0x1600963f
 8008358:	58025940 	.word	0x58025940
 800835c:	1000823f 	.word	0x1000823f
 8008360:	40020940 	.word	0x40020940

08008364 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b098      	sub	sp, #96	; 0x60
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800836c:	4a84      	ldr	r2, [pc, #528]	; (8008580 <HAL_FDCAN_Init+0x21c>)
 800836e:	f107 030c 	add.w	r3, r7, #12
 8008372:	4611      	mov	r1, r2
 8008374:	224c      	movs	r2, #76	; 0x4c
 8008376:	4618      	mov	r0, r3
 8008378:	f00a fd58 	bl	8012e2c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e1c6      	b.n	8008714 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a7e      	ldr	r2, [pc, #504]	; (8008584 <HAL_FDCAN_Init+0x220>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d106      	bne.n	800839e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fb f836 	bl	8003424 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0210 	bic.w	r2, r2, #16
 80083c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083c8:	f7fb fe1c 	bl	8004004 <HAL_GetTick>
 80083cc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80083ce:	e014      	b.n	80083fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80083d0:	f7fb fe18 	bl	8004004 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d90d      	bls.n	80083fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e4:	f043 0201 	orr.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2203      	movs	r2, #3
 80083f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e18c      	b.n	8008714 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b08      	cmp	r3, #8
 8008406:	d0e3      	beq.n	80083d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0201 	orr.w	r2, r2, #1
 8008416:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008418:	f7fb fdf4 	bl	8004004 <HAL_GetTick>
 800841c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800841e:	e014      	b.n	800844a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008420:	f7fb fdf0 	bl	8004004 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b0a      	cmp	r3, #10
 800842c:	d90d      	bls.n	800844a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008434:	f043 0201 	orr.w	r2, r3, #1
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2203      	movs	r2, #3
 8008442:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e164      	b.n	8008714 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0e3      	beq.n	8008420 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0202 	orr.w	r2, r2, #2
 8008466:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7c1b      	ldrb	r3, [r3, #16]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d108      	bne.n	8008482 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800847e:	619a      	str	r2, [r3, #24]
 8008480:	e007      	b.n	8008492 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008490:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7c5b      	ldrb	r3, [r3, #17]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d108      	bne.n	80084ac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699a      	ldr	r2, [r3, #24]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084a8:	619a      	str	r2, [r3, #24]
 80084aa:	e007      	b.n	80084bc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7c9b      	ldrb	r3, [r3, #18]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d108      	bne.n	80084d6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084d2:	619a      	str	r2, [r3, #24]
 80084d4:	e007      	b.n	80084e6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	699a      	ldr	r2, [r3, #24]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800850a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0210 	bic.w	r2, r2, #16
 800851a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d108      	bne.n	8008536 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0204 	orr.w	r2, r2, #4
 8008532:	619a      	str	r2, [r3, #24]
 8008534:	e030      	b.n	8008598 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02c      	beq.n	8008598 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d020      	beq.n	8008588 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008554:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0210 	orr.w	r2, r2, #16
 8008564:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d114      	bne.n	8008598 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	699a      	ldr	r2, [r3, #24]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0220 	orr.w	r2, r2, #32
 800857c:	619a      	str	r2, [r3, #24]
 800857e:	e00b      	b.n	8008598 <HAL_FDCAN_Init+0x234>
 8008580:	08017738 	.word	0x08017738
 8008584:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0220 	orr.w	r2, r2, #32
 8008596:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	3b01      	subs	r3, #1
 800859e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085a8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80085b0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80085c0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085c2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085cc:	d115      	bne.n	80085fa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	3b01      	subs	r3, #1
 80085da:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085dc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e2:	3b01      	subs	r3, #1
 80085e4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80085e6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	3b01      	subs	r3, #1
 80085f0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80085f6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085f8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008620:	4413      	add	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d011      	beq.n	800864a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800862e:	f023 0107 	bic.w	r1, r3, #7
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	3360      	adds	r3, #96	; 0x60
 800863a:	443b      	add	r3, r7
 800863c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d011      	beq.n	8008676 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800865a:	f023 0107 	bic.w	r1, r3, #7
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	3360      	adds	r3, #96	; 0x60
 8008666:	443b      	add	r3, r7
 8008668:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867a:	2b00      	cmp	r3, #0
 800867c:	d012      	beq.n	80086a4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008686:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	3360      	adds	r3, #96	; 0x60
 8008692:	443b      	add	r3, r7
 8008694:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008698:	011a      	lsls	r2, r3, #4
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d012      	beq.n	80086d2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086b4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	3360      	adds	r3, #96	; 0x60
 80086c0:	443b      	add	r3, r7
 80086c2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a11      	ldr	r2, [pc, #68]	; (800871c <HAL_FDCAN_Init+0x3b8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d107      	bne.n	80086ec <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f022 0203 	bic.w	r2, r2, #3
 80086ea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fbc5 	bl	8008e94 <FDCAN_CalcultateRamBlockAddresses>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008710:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008714:	4618      	mov	r0, r3
 8008716:	3760      	adds	r7, #96	; 0x60
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	4000a000 	.word	0x4000a000

08008720 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d111      	bne.n	8008758 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0201 	bic.w	r2, r2, #1
 800874a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e008      	b.n	800876a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800875e:	f043 0204 	orr.w	r2, r3, #4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
  }
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800878a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d002      	beq.n	8008798 <HAL_FDCAN_ActivateNotification+0x20>
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d155      	bne.n	8008844 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d108      	bne.n	80087b8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0201 	orr.w	r2, r2, #1
 80087b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80087b6:	e014      	b.n	80087e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	4013      	ands	r3, r2
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d108      	bne.n	80087da <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0202 	orr.w	r2, r2, #2
 80087d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80087d8:	e003      	b.n	80087e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2203      	movs	r2, #3
 80087e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	430a      	orrs	r2, r1
 800881a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <HAL_FDCAN_ActivateNotification+0xec>)
 8008828:	4013      	ands	r3, r2
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	430b      	orrs	r3, r1
 8008830:	6553      	str	r3, [r2, #84]	; 0x54
 8008832:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	0f9b      	lsrs	r3, r3, #30
 800883a:	490b      	ldr	r1, [pc, #44]	; (8008868 <HAL_FDCAN_ActivateNotification+0xf0>)
 800883c:	4313      	orrs	r3, r2
 800883e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	e008      	b.n	8008856 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800884a:	f043 0202 	orr.w	r2, r3, #2
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
  }
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	3fcfffff 	.word	0x3fcfffff
 8008868:	4000a800 	.word	0x4000a800

0800886c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b096      	sub	sp, #88	; 0x58
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008874:	4b9a      	ldr	r3, [pc, #616]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	079b      	lsls	r3, r3, #30
 800887a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800887c:	4b98      	ldr	r3, [pc, #608]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	079b      	lsls	r3, r3, #30
 8008882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008884:	4013      	ands	r3, r2
 8008886:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008892:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800889c:	4013      	ands	r3, r2
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088b4:	4013      	ands	r3, r2
 80088b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088cc:	4013      	ands	r3, r2
 80088ce:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80088da:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e4:	4013      	ands	r3, r2
 80088e6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ee:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088fc:	4013      	ands	r3, r2
 80088fe:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d010      	beq.n	800893e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008930:	651a      	str	r2, [r3, #80]	; 0x50
 8008932:	4b6b      	ldr	r3, [pc, #428]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008934:	2200      	movs	r2, #0
 8008936:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fa5f 	bl	8008dfc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008940:	0a9b      	lsrs	r3, r3, #10
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01d      	beq.n	8008986 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	0a9b      	lsrs	r3, r3, #10
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d017      	beq.n	8008986 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800896a:	4013      	ands	r3, r2
 800896c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008976:	651a      	str	r2, [r3, #80]	; 0x50
 8008978:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 800897a:	2200      	movs	r2, #0
 800897c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800897e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fa12 	bl	8008daa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8008986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00d      	beq.n	80089a8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008992:	4b54      	ldr	r3, [pc, #336]	; (8008ae4 <HAL_FDCAN_IRQHandler+0x278>)
 8008994:	400b      	ands	r3, r1
 8008996:	6513      	str	r3, [r2, #80]	; 0x50
 8008998:	4a51      	ldr	r2, [pc, #324]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 800899a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800899c:	0f9b      	lsrs	r3, r3, #30
 800899e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80089a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f9c0 	bl	8008d28 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80089a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00d      	beq.n	80089ca <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089b4:	4b4b      	ldr	r3, [pc, #300]	; (8008ae4 <HAL_FDCAN_IRQHandler+0x278>)
 80089b6:	400b      	ands	r3, r1
 80089b8:	6513      	str	r3, [r2, #80]	; 0x50
 80089ba:	4a49      	ldr	r2, [pc, #292]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 80089bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089be:	0f9b      	lsrs	r3, r3, #30
 80089c0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80089c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f9ba 	bl	8008d3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089d6:	4b43      	ldr	r3, [pc, #268]	; (8008ae4 <HAL_FDCAN_IRQHandler+0x278>)
 80089d8:	400b      	ands	r3, r1
 80089da:	6513      	str	r3, [r2, #80]	; 0x50
 80089dc:	4a40      	ldr	r2, [pc, #256]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 80089de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e0:	0f9b      	lsrs	r3, r3, #30
 80089e2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80089e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f9b4 	bl	8008d54 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80089ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00d      	beq.n	8008a0e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80089f8:	4b3a      	ldr	r3, [pc, #232]	; (8008ae4 <HAL_FDCAN_IRQHandler+0x278>)
 80089fa:	400b      	ands	r3, r1
 80089fc:	6513      	str	r3, [r2, #80]	; 0x50
 80089fe:	4a38      	ldr	r2, [pc, #224]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a02:	0f9b      	lsrs	r3, r3, #30
 8008a04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008a06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f9ae 	bl	8008d6a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a10:	0adb      	lsrs	r3, r3, #11
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d010      	beq.n	8008a3c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	0adb      	lsrs	r3, r3, #11
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8008a30:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9a2 	bl	8008d80 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	0a5b      	lsrs	r3, r3, #9
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01d      	beq.n	8008a84 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	0a5b      	lsrs	r3, r3, #9
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a5c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a68:	4013      	ands	r3, r2
 8008a6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a74:	651a      	str	r2, [r3, #80]	; 0x50
 8008a76:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f988 	bl	8008d94 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a86:	0cdb      	lsrs	r3, r3, #19
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	0cdb      	lsrs	r3, r3, #19
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f987 	bl	8008dc0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d016      	beq.n	8008aec <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d010      	beq.n	8008aec <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <HAL_FDCAN_IRQHandler+0x274>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	e004      	b.n	8008ae8 <HAL_FDCAN_IRQHandler+0x27c>
 8008ade:	bf00      	nop
 8008ae0:	4000a800 	.word	0x4000a800
 8008ae4:	3fcfffff 	.word	0x3fcfffff
 8008ae8:	f000 f974 	bl	8008dd4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aee:	0c9b      	lsrs	r3, r3, #18
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d010      	beq.n	8008b1a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	0c9b      	lsrs	r3, r3, #18
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50
 8008b0e:	4b83      	ldr	r3, [pc, #524]	; (8008d1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f967 	bl	8008de8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1c:	0c5b      	lsrs	r3, r3, #17
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d015      	beq.n	8008b52 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	0c5b      	lsrs	r3, r3, #17
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8008b3c:	4b77      	ldr	r3, [pc, #476]	; (8008d1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b5e:	4b70      	ldr	r3, [pc, #448]	; (8008d20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008b60:	400b      	ands	r3, r1
 8008b62:	6513      	str	r3, [r2, #80]	; 0x50
 8008b64:	4a6d      	ldr	r2, [pc, #436]	; (8008d1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b68:	0f9b      	lsrs	r3, r3, #30
 8008b6a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f958 	bl	8008e24 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d011      	beq.n	8008b9e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b80:	4b67      	ldr	r3, [pc, #412]	; (8008d20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008b82:	400b      	ands	r3, r1
 8008b84:	6513      	str	r3, [r2, #80]	; 0x50
 8008b86:	4a65      	ldr	r2, [pc, #404]	; (8008d1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8a:	0f9b      	lsrs	r3, r3, #30
 8008b8c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a60      	ldr	r2, [pc, #384]	; (8008d24 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	f040 80ac 	bne.w	8008d02 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 80a4 	beq.w	8008d02 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	4013      	ands	r3, r2
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be6:	4013      	ands	r3, r2
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	4013      	ands	r3, r2
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8008c0c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	6a3a      	ldr	r2, [r7, #32]
 8008c16:	4013      	ands	r3, r2
 8008c18:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8008c24:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c4e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008c50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f8f1 	bl	8008e3a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c64:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8008c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f8f1 	bl	8008e50 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	099b      	lsrs	r3, r3, #6
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01a      	beq.n	8008cb0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	099b      	lsrs	r3, r3, #6
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d014      	beq.n	8008cb0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2240      	movs	r2, #64	; 0x40
 8008ca4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	6939      	ldr	r1, [r7, #16]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f8db 	bl	8008e66 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d007      	beq.n	8008cc6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8dc 	bl	8008e7e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	6a3a      	ldr	r2, [r7, #32]
 8008cd2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f87f 	bl	8008e10 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008d12:	bf00      	nop
 8008d14:	3758      	adds	r7, #88	; 0x58
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	4000a800 	.word	0x4000a800
 8008d20:	3fcfffff 	.word	0x3fcfffff
 8008d24:	4000a000 	.word	0x4000a000

08008d28 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008eaa:	4ba7      	ldr	r3, [pc, #668]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008eac:	4013      	ands	r3, r2
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	0091      	lsls	r1, r2, #2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	430b      	orrs	r3, r1
 8008eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	041a      	lsls	r2, r3, #16
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	4413      	add	r3, r2
 8008ee0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008eea:	4b97      	ldr	r3, [pc, #604]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0091      	lsls	r1, r2, #2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f04:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	041a      	lsls	r2, r3, #16
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008f2c:	4b86      	ldr	r3, [pc, #536]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	0091      	lsls	r1, r2, #2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6812      	ldr	r2, [r2, #0]
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	041a      	lsls	r2, r3, #16
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	4413      	add	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008f74:	4b74      	ldr	r3, [pc, #464]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	0091      	lsls	r1, r2, #2
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	430b      	orrs	r3, r1
 8008f82:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f8e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f96:	041a      	lsls	r2, r3, #16
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008faa:	fb02 f303 	mul.w	r3, r2, r3
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008fbc:	4b62      	ldr	r3, [pc, #392]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	0091      	lsls	r1, r2, #2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008fe8:	4b57      	ldr	r3, [pc, #348]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	0091      	lsls	r1, r2, #2
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009002:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	041a      	lsls	r2, r3, #16
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	4413      	add	r3, r2
 8009020:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800902a:	4b47      	ldr	r3, [pc, #284]	; (8009148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800902c:	4013      	ands	r3, r2
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	0091      	lsls	r1, r2, #2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	430b      	orrs	r3, r1
 8009038:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009044:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904c:	041a      	lsls	r2, r3, #16
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009060:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009068:	061a      	lsls	r2, r3, #24
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009078:	4b34      	ldr	r3, [pc, #208]	; (800914c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800907a:	4413      	add	r3, r2
 800907c:	009a      	lsls	r2, r3, #2
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80090c6:	fb01 f303 	mul.w	r3, r1, r3
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	441a      	add	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	441a      	add	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	441a      	add	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	441a      	add	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913e:	4a04      	ldr	r2, [pc, #16]	; (8009150 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d915      	bls.n	8009170 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009144:	e006      	b.n	8009154 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009146:	bf00      	nop
 8009148:	ffff0003 	.word	0xffff0003
 800914c:	10002b00 	.word	0x10002b00
 8009150:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2203      	movs	r2, #3
 8009168:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e010      	b.n	8009192 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e005      	b.n	8009184 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3304      	adds	r3, #4
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	429a      	cmp	r2, r3
 800918e:	d3f3      	bcc.n	8009178 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop

080091a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80091ae:	4b89      	ldr	r3, [pc, #548]	; (80093d4 <HAL_GPIO_Init+0x234>)
 80091b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091b2:	e194      	b.n	80094de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	2101      	movs	r1, #1
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	fa01 f303 	lsl.w	r3, r1, r3
 80091c0:	4013      	ands	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8186 	beq.w	80094d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d005      	beq.n	80091e4 <HAL_GPIO_Init+0x44>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d130      	bne.n	8009246 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	2203      	movs	r2, #3
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	43db      	mvns	r3, r3
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4013      	ands	r3, r2
 80091fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	fa02 f303 	lsl.w	r3, r2, r3
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	4313      	orrs	r3, r2
 800920c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800921a:	2201      	movs	r2, #1
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	43db      	mvns	r3, r3
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	4013      	ands	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	091b      	lsrs	r3, r3, #4
 8009230:	f003 0201 	and.w	r2, r3, #1
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	4313      	orrs	r3, r2
 800923e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d017      	beq.n	8009282 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	2203      	movs	r2, #3
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	43db      	mvns	r3, r3
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	4013      	ands	r3, r2
 8009268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	4313      	orrs	r3, r2
 800927a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d123      	bne.n	80092d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	08da      	lsrs	r2, r3, #3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3208      	adds	r2, #8
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	220f      	movs	r2, #15
 80092a6:	fa02 f303 	lsl.w	r3, r2, r3
 80092aa:	43db      	mvns	r3, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	4013      	ands	r3, r2
 80092b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	fa02 f303 	lsl.w	r3, r2, r3
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	08da      	lsrs	r2, r3, #3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3208      	adds	r2, #8
 80092d0:	69b9      	ldr	r1, [r7, #24]
 80092d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	2203      	movs	r2, #3
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	43db      	mvns	r3, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4013      	ands	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f003 0203 	and.w	r2, r3, #3
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	4313      	orrs	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80e0 	beq.w	80094d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009318:	4b2f      	ldr	r3, [pc, #188]	; (80093d8 <HAL_GPIO_Init+0x238>)
 800931a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800931e:	4a2e      	ldr	r2, [pc, #184]	; (80093d8 <HAL_GPIO_Init+0x238>)
 8009320:	f043 0302 	orr.w	r3, r3, #2
 8009324:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8009328:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <HAL_GPIO_Init+0x238>)
 800932a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009336:	4a29      	ldr	r2, [pc, #164]	; (80093dc <HAL_GPIO_Init+0x23c>)
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	089b      	lsrs	r3, r3, #2
 800933c:	3302      	adds	r3, #2
 800933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	220f      	movs	r2, #15
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	43db      	mvns	r3, r3
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	4013      	ands	r3, r2
 8009358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a20      	ldr	r2, [pc, #128]	; (80093e0 <HAL_GPIO_Init+0x240>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d052      	beq.n	8009408 <HAL_GPIO_Init+0x268>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a1f      	ldr	r2, [pc, #124]	; (80093e4 <HAL_GPIO_Init+0x244>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d031      	beq.n	80093ce <HAL_GPIO_Init+0x22e>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <HAL_GPIO_Init+0x248>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d02b      	beq.n	80093ca <HAL_GPIO_Init+0x22a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a1d      	ldr	r2, [pc, #116]	; (80093ec <HAL_GPIO_Init+0x24c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d025      	beq.n	80093c6 <HAL_GPIO_Init+0x226>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <HAL_GPIO_Init+0x250>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01f      	beq.n	80093c2 <HAL_GPIO_Init+0x222>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1b      	ldr	r2, [pc, #108]	; (80093f4 <HAL_GPIO_Init+0x254>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d019      	beq.n	80093be <HAL_GPIO_Init+0x21e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1a      	ldr	r2, [pc, #104]	; (80093f8 <HAL_GPIO_Init+0x258>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <HAL_GPIO_Init+0x21a>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a19      	ldr	r2, [pc, #100]	; (80093fc <HAL_GPIO_Init+0x25c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00d      	beq.n	80093b6 <HAL_GPIO_Init+0x216>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a18      	ldr	r2, [pc, #96]	; (8009400 <HAL_GPIO_Init+0x260>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <HAL_GPIO_Init+0x212>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a17      	ldr	r2, [pc, #92]	; (8009404 <HAL_GPIO_Init+0x264>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d101      	bne.n	80093ae <HAL_GPIO_Init+0x20e>
 80093aa:	2309      	movs	r3, #9
 80093ac:	e02d      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093ae:	230a      	movs	r3, #10
 80093b0:	e02b      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093b2:	2308      	movs	r3, #8
 80093b4:	e029      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093b6:	2307      	movs	r3, #7
 80093b8:	e027      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093ba:	2306      	movs	r3, #6
 80093bc:	e025      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093be:	2305      	movs	r3, #5
 80093c0:	e023      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093c2:	2304      	movs	r3, #4
 80093c4:	e021      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093c6:	2303      	movs	r3, #3
 80093c8:	e01f      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e01d      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e01b      	b.n	800940a <HAL_GPIO_Init+0x26a>
 80093d2:	bf00      	nop
 80093d4:	58000080 	.word	0x58000080
 80093d8:	58024400 	.word	0x58024400
 80093dc:	58000400 	.word	0x58000400
 80093e0:	58020000 	.word	0x58020000
 80093e4:	58020400 	.word	0x58020400
 80093e8:	58020800 	.word	0x58020800
 80093ec:	58020c00 	.word	0x58020c00
 80093f0:	58021000 	.word	0x58021000
 80093f4:	58021400 	.word	0x58021400
 80093f8:	58021800 	.word	0x58021800
 80093fc:	58021c00 	.word	0x58021c00
 8009400:	58022000 	.word	0x58022000
 8009404:	58022400 	.word	0x58022400
 8009408:	2300      	movs	r3, #0
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	f002 0203 	and.w	r2, r2, #3
 8009410:	0092      	lsls	r2, r2, #2
 8009412:	4093      	lsls	r3, r2
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	4313      	orrs	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800941a:	4938      	ldr	r1, [pc, #224]	; (80094fc <HAL_GPIO_Init+0x35c>)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	089b      	lsrs	r3, r3, #2
 8009420:	3302      	adds	r3, #2
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	43db      	mvns	r3, r3
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	4013      	ands	r3, r2
 8009438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800944e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	43db      	mvns	r3, r3
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	4013      	ands	r3, r2
 8009466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800947c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	43db      	mvns	r3, r3
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	4013      	ands	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	43db      	mvns	r3, r3
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	4013      	ands	r3, r2
 80094bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	3301      	adds	r3, #1
 80094dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f47f ae63 	bne.w	80091b4 <HAL_GPIO_Init+0x14>
  }
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3724      	adds	r7, #36	; 0x24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	58000400 	.word	0x58000400

08009500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	887b      	ldrh	r3, [r7, #2]
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
 800951c:	e001      	b.n	8009522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	807b      	strh	r3, [r7, #2]
 800953c:	4613      	mov	r3, r2
 800953e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009540:	787b      	ldrb	r3, [r7, #1]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009546:	887a      	ldrh	r2, [r7, #2]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800954c:	e003      	b.n	8009556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800954e:	887b      	ldrh	r3, [r7, #2]
 8009550:	041a      	lsls	r2, r3, #16
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	619a      	str	r2, [r3, #24]
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800956c:	4b29      	ldr	r3, [pc, #164]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	2b06      	cmp	r3, #6
 8009576:	d00a      	beq.n	800958e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009578:	4b26      	ldr	r3, [pc, #152]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d001      	beq.n	800958a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e040      	b.n	800960c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	e03e      	b.n	800960c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800958e:	4b21      	ldr	r3, [pc, #132]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009596:	491f      	ldr	r1, [pc, #124]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4313      	orrs	r3, r2
 800959c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800959e:	f7fa fd31 	bl	8004004 <HAL_GetTick>
 80095a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095a4:	e009      	b.n	80095ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095a6:	f7fa fd2d 	bl	8004004 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b4:	d901      	bls.n	80095ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e028      	b.n	800960c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095ba:	4b16      	ldr	r3, [pc, #88]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c6:	d1ee      	bne.n	80095a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b1e      	cmp	r3, #30
 80095cc:	d008      	beq.n	80095e0 <HAL_PWREx_ConfigSupply+0x7c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b2e      	cmp	r3, #46	; 0x2e
 80095d2:	d005      	beq.n	80095e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b1d      	cmp	r3, #29
 80095d8:	d002      	beq.n	80095e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b2d      	cmp	r3, #45	; 0x2d
 80095de:	d114      	bne.n	800960a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80095e0:	f7fa fd10 	bl	8004004 <HAL_GetTick>
 80095e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80095e6:	e009      	b.n	80095fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095e8:	f7fa fd0c 	bl	8004004 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095f6:	d901      	bls.n	80095fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e007      	b.n	800960c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <HAL_PWREx_ConfigSupply+0xb0>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009608:	d1ee      	bne.n	80095e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	58024800 	.word	0x58024800

08009618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08c      	sub	sp, #48	; 0x30
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	f000 bc1f 	b.w	8009e6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80b3 	beq.w	80097a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800963a:	4b95      	ldr	r3, [pc, #596]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009644:	4b92      	ldr	r3, [pc, #584]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	2b10      	cmp	r3, #16
 800964e:	d007      	beq.n	8009660 <HAL_RCC_OscConfig+0x48>
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	2b18      	cmp	r3, #24
 8009654:	d112      	bne.n	800967c <HAL_RCC_OscConfig+0x64>
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d10d      	bne.n	800967c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009660:	4b8b      	ldr	r3, [pc, #556]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 8098 	beq.w	800979e <HAL_RCC_OscConfig+0x186>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 8093 	bne.w	800979e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e3f6      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009684:	d106      	bne.n	8009694 <HAL_RCC_OscConfig+0x7c>
 8009686:	4b82      	ldr	r3, [pc, #520]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a81      	ldr	r2, [pc, #516]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800968c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	e058      	b.n	8009746 <HAL_RCC_OscConfig+0x12e>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d112      	bne.n	80096c2 <HAL_RCC_OscConfig+0xaa>
 800969c:	4b7c      	ldr	r3, [pc, #496]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a7b      	ldr	r2, [pc, #492]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4b79      	ldr	r3, [pc, #484]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a78      	ldr	r2, [pc, #480]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	4b76      	ldr	r3, [pc, #472]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a75      	ldr	r2, [pc, #468]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	e041      	b.n	8009746 <HAL_RCC_OscConfig+0x12e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096ca:	d112      	bne.n	80096f2 <HAL_RCC_OscConfig+0xda>
 80096cc:	4b70      	ldr	r3, [pc, #448]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a6f      	ldr	r2, [pc, #444]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	4b6d      	ldr	r3, [pc, #436]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a6c      	ldr	r2, [pc, #432]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	4b6a      	ldr	r3, [pc, #424]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a69      	ldr	r2, [pc, #420]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e029      	b.n	8009746 <HAL_RCC_OscConfig+0x12e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80096fa:	d112      	bne.n	8009722 <HAL_RCC_OscConfig+0x10a>
 80096fc:	4b64      	ldr	r3, [pc, #400]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a63      	ldr	r2, [pc, #396]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	4b61      	ldr	r3, [pc, #388]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a60      	ldr	r2, [pc, #384]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800970e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	4b5e      	ldr	r3, [pc, #376]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a5d      	ldr	r2, [pc, #372]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800971a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	e011      	b.n	8009746 <HAL_RCC_OscConfig+0x12e>
 8009722:	4b5b      	ldr	r3, [pc, #364]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a5a      	ldr	r2, [pc, #360]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	4b58      	ldr	r3, [pc, #352]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a57      	ldr	r2, [pc, #348]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	4b55      	ldr	r3, [pc, #340]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a54      	ldr	r2, [pc, #336]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009740:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d013      	beq.n	8009776 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800974e:	f7fa fc59 	bl	8004004 <HAL_GetTick>
 8009752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009754:	e008      	b.n	8009768 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009756:	f7fa fc55 	bl	8004004 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	2b64      	cmp	r3, #100	; 0x64
 8009762:	d901      	bls.n	8009768 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e380      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009768:	4b49      	ldr	r3, [pc, #292]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f0      	beq.n	8009756 <HAL_RCC_OscConfig+0x13e>
 8009774:	e014      	b.n	80097a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009776:	f7fa fc45 	bl	8004004 <HAL_GetTick>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800977c:	e008      	b.n	8009790 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800977e:	f7fa fc41 	bl	8004004 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b64      	cmp	r3, #100	; 0x64
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e36c      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009790:	4b3f      	ldr	r3, [pc, #252]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f0      	bne.n	800977e <HAL_RCC_OscConfig+0x166>
 800979c:	e000      	b.n	80097a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800979e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 808c 	beq.w	80098c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ae:	4b38      	ldr	r3, [pc, #224]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097b8:	4b35      	ldr	r3, [pc, #212]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <HAL_RCC_OscConfig+0x1bc>
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	2b18      	cmp	r3, #24
 80097c8:	d137      	bne.n	800983a <HAL_RCC_OscConfig+0x222>
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d132      	bne.n	800983a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097d4:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <HAL_RCC_OscConfig+0x1d4>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e33e      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80097ec:	4b28      	ldr	r3, [pc, #160]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f023 0219 	bic.w	r2, r3, #25
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	4925      	ldr	r1, [pc, #148]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fe:	f7fa fc01 	bl	8004004 <HAL_GetTick>
 8009802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009806:	f7fa fbfd 	bl	8004004 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e328      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0f0      	beq.n	8009806 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009824:	4b1a      	ldr	r3, [pc, #104]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	061b      	lsls	r3, r3, #24
 8009832:	4917      	ldr	r1, [pc, #92]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009834:	4313      	orrs	r3, r2
 8009836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009838:	e045      	b.n	80098c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d028      	beq.n	8009894 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009842:	4b13      	ldr	r3, [pc, #76]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f023 0219 	bic.w	r2, r3, #25
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	4910      	ldr	r1, [pc, #64]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009850:	4313      	orrs	r3, r2
 8009852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009854:	f7fa fbd6 	bl	8004004 <HAL_GetTick>
 8009858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800985a:	e008      	b.n	800986e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800985c:	f7fa fbd2 	bl	8004004 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d901      	bls.n	800986e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e2fd      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f0      	beq.n	800985c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	061b      	lsls	r3, r3, #24
 8009888:	4901      	ldr	r1, [pc, #4]	; (8009890 <HAL_RCC_OscConfig+0x278>)
 800988a:	4313      	orrs	r3, r2
 800988c:	604b      	str	r3, [r1, #4]
 800988e:	e01a      	b.n	80098c6 <HAL_RCC_OscConfig+0x2ae>
 8009890:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009894:	4b97      	ldr	r3, [pc, #604]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a96      	ldr	r2, [pc, #600]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 800989a:	f023 0301 	bic.w	r3, r3, #1
 800989e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a0:	f7fa fbb0 	bl	8004004 <HAL_GetTick>
 80098a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098a6:	e008      	b.n	80098ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098a8:	f7fa fbac 	bl	8004004 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d901      	bls.n	80098ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e2d7      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098ba:	4b8e      	ldr	r3, [pc, #568]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0304 	and.w	r3, r3, #4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f0      	bne.n	80098a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d06a      	beq.n	80099a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098d2:	4b88      	ldr	r3, [pc, #544]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098dc:	4b85      	ldr	r3, [pc, #532]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80098de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d007      	beq.n	80098f8 <HAL_RCC_OscConfig+0x2e0>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b18      	cmp	r3, #24
 80098ec:	d11b      	bne.n	8009926 <HAL_RCC_OscConfig+0x30e>
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d116      	bne.n	8009926 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80098f8:	4b7e      	ldr	r3, [pc, #504]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <HAL_RCC_OscConfig+0x2f8>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	2b80      	cmp	r3, #128	; 0x80
 800990a:	d001      	beq.n	8009910 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e2ac      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009910:	4b78      	ldr	r3, [pc, #480]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	061b      	lsls	r3, r3, #24
 800991e:	4975      	ldr	r1, [pc, #468]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009920:	4313      	orrs	r3, r2
 8009922:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009924:	e040      	b.n	80099a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d023      	beq.n	8009976 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800992e:	4b71      	ldr	r3, [pc, #452]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a70      	ldr	r2, [pc, #448]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800993a:	f7fa fb63 	bl	8004004 <HAL_GetTick>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009940:	e008      	b.n	8009954 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009942:	f7fa fb5f 	bl	8004004 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d901      	bls.n	8009954 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e28a      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009954:	4b67      	ldr	r3, [pc, #412]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0f0      	beq.n	8009942 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009960:	4b64      	ldr	r3, [pc, #400]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	061b      	lsls	r3, r3, #24
 800996e:	4961      	ldr	r1, [pc, #388]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009970:	4313      	orrs	r3, r2
 8009972:	60cb      	str	r3, [r1, #12]
 8009974:	e018      	b.n	80099a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009976:	4b5f      	ldr	r3, [pc, #380]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a5e      	ldr	r2, [pc, #376]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 800997c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009982:	f7fa fb3f 	bl	8004004 <HAL_GetTick>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009988:	e008      	b.n	800999c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800998a:	f7fa fb3b 	bl	8004004 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	2b02      	cmp	r3, #2
 8009996:	d901      	bls.n	800999c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e266      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800999c:	4b55      	ldr	r3, [pc, #340]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1f0      	bne.n	800998a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d036      	beq.n	8009a22 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d019      	beq.n	80099f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099bc:	4b4d      	ldr	r3, [pc, #308]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80099be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c0:	4a4c      	ldr	r2, [pc, #304]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c8:	f7fa fb1c 	bl	8004004 <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099d0:	f7fa fb18 	bl	8004004 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e243      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80099e2:	4b44      	ldr	r3, [pc, #272]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80099e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0f0      	beq.n	80099d0 <HAL_RCC_OscConfig+0x3b8>
 80099ee:	e018      	b.n	8009a22 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099f0:	4b40      	ldr	r3, [pc, #256]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80099f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f4:	4a3f      	ldr	r2, [pc, #252]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099fc:	f7fa fb02 	bl	8004004 <HAL_GetTick>
 8009a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a02:	e008      	b.n	8009a16 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a04:	f7fa fafe 	bl	8004004 <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d901      	bls.n	8009a16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e229      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1f0      	bne.n	8009a04 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d036      	beq.n	8009a9c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d019      	beq.n	8009a6a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a36:	4b2f      	ldr	r3, [pc, #188]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a2e      	ldr	r2, [pc, #184]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a42:	f7fa fadf 	bl	8004004 <HAL_GetTick>
 8009a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009a48:	e008      	b.n	8009a5c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a4a:	f7fa fadb 	bl	8004004 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d901      	bls.n	8009a5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e206      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009a5c:	4b25      	ldr	r3, [pc, #148]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0f0      	beq.n	8009a4a <HAL_RCC_OscConfig+0x432>
 8009a68:	e018      	b.n	8009a9c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a6a:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a21      	ldr	r2, [pc, #132]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a76:	f7fa fac5 	bl	8004004 <HAL_GetTick>
 8009a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a7c:	e008      	b.n	8009a90 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a7e:	f7fa fac1 	bl	8004004 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e1ec      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a90:	4b18      	ldr	r3, [pc, #96]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f0      	bne.n	8009a7e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80af 	beq.w	8009c08 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <HAL_RCC_OscConfig+0x4e0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a12      	ldr	r2, [pc, #72]	; (8009af8 <HAL_RCC_OscConfig+0x4e0>)
 8009ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ab6:	f7fa faa5 	bl	8004004 <HAL_GetTick>
 8009aba:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009abc:	e008      	b.n	8009ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009abe:	f7fa faa1 	bl	8004004 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b64      	cmp	r3, #100	; 0x64
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e1cc      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <HAL_RCC_OscConfig+0x4e0>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f0      	beq.n	8009abe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10b      	bne.n	8009afc <HAL_RCC_OscConfig+0x4e4>
 8009ae4:	4b03      	ldr	r3, [pc, #12]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae8:	4a02      	ldr	r2, [pc, #8]	; (8009af4 <HAL_RCC_OscConfig+0x4dc>)
 8009aea:	f043 0301 	orr.w	r3, r3, #1
 8009aee:	6713      	str	r3, [r2, #112]	; 0x70
 8009af0:	e05b      	b.n	8009baa <HAL_RCC_OscConfig+0x592>
 8009af2:	bf00      	nop
 8009af4:	58024400 	.word	0x58024400
 8009af8:	58024800 	.word	0x58024800
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d112      	bne.n	8009b2a <HAL_RCC_OscConfig+0x512>
 8009b04:	4b9d      	ldr	r3, [pc, #628]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b08:	4a9c      	ldr	r2, [pc, #624]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b0a:	f023 0301 	bic.w	r3, r3, #1
 8009b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b10:	4b9a      	ldr	r3, [pc, #616]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b14:	4a99      	ldr	r2, [pc, #612]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b1c:	4b97      	ldr	r3, [pc, #604]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b20:	4a96      	ldr	r2, [pc, #600]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b22:	f023 0304 	bic.w	r3, r3, #4
 8009b26:	6713      	str	r3, [r2, #112]	; 0x70
 8009b28:	e03f      	b.n	8009baa <HAL_RCC_OscConfig+0x592>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d112      	bne.n	8009b58 <HAL_RCC_OscConfig+0x540>
 8009b32:	4b92      	ldr	r3, [pc, #584]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b36:	4a91      	ldr	r2, [pc, #580]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b38:	f043 0304 	orr.w	r3, r3, #4
 8009b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3e:	4b8f      	ldr	r3, [pc, #572]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b42:	4a8e      	ldr	r2, [pc, #568]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b48:	6713      	str	r3, [r2, #112]	; 0x70
 8009b4a:	4b8c      	ldr	r3, [pc, #560]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a8b      	ldr	r2, [pc, #556]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	e028      	b.n	8009baa <HAL_RCC_OscConfig+0x592>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b85      	cmp	r3, #133	; 0x85
 8009b5e:	d112      	bne.n	8009b86 <HAL_RCC_OscConfig+0x56e>
 8009b60:	4b86      	ldr	r3, [pc, #536]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b64:	4a85      	ldr	r2, [pc, #532]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b66:	f043 0304 	orr.w	r3, r3, #4
 8009b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b6c:	4b83      	ldr	r3, [pc, #524]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b70:	4a82      	ldr	r2, [pc, #520]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b76:	6713      	str	r3, [r2, #112]	; 0x70
 8009b78:	4b80      	ldr	r3, [pc, #512]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7c:	4a7f      	ldr	r2, [pc, #508]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	6713      	str	r3, [r2, #112]	; 0x70
 8009b84:	e011      	b.n	8009baa <HAL_RCC_OscConfig+0x592>
 8009b86:	4b7d      	ldr	r3, [pc, #500]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8a:	4a7c      	ldr	r2, [pc, #496]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	6713      	str	r3, [r2, #112]	; 0x70
 8009b92:	4b7a      	ldr	r3, [pc, #488]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b96:	4a79      	ldr	r2, [pc, #484]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009b98:	f023 0304 	bic.w	r3, r3, #4
 8009b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b9e:	4b77      	ldr	r3, [pc, #476]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	4a76      	ldr	r2, [pc, #472]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d015      	beq.n	8009bde <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb2:	f7fa fa27 	bl	8004004 <HAL_GetTick>
 8009bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bb8:	e00a      	b.n	8009bd0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bba:	f7fa fa23 	bl	8004004 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e14c      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bd0:	4b6a      	ldr	r3, [pc, #424]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0ee      	beq.n	8009bba <HAL_RCC_OscConfig+0x5a2>
 8009bdc:	e014      	b.n	8009c08 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bde:	f7fa fa11 	bl	8004004 <HAL_GetTick>
 8009be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009be4:	e00a      	b.n	8009bfc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009be6:	f7fa fa0d 	bl	8004004 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d901      	bls.n	8009bfc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e136      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bfc:	4b5f      	ldr	r3, [pc, #380]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1ee      	bne.n	8009be6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 812b 	beq.w	8009e68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c12:	4b5a      	ldr	r3, [pc, #360]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c1a:	2b18      	cmp	r3, #24
 8009c1c:	f000 80bb 	beq.w	8009d96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	f040 8095 	bne.w	8009d54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c2a:	4b54      	ldr	r3, [pc, #336]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a53      	ldr	r2, [pc, #332]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c36:	f7fa f9e5 	bl	8004004 <HAL_GetTick>
 8009c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c3e:	f7fa f9e1 	bl	8004004 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e10c      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c50:	4b4a      	ldr	r3, [pc, #296]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1f0      	bne.n	8009c3e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c5c:	4b47      	ldr	r3, [pc, #284]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c60:	4b47      	ldr	r3, [pc, #284]	; (8009d80 <HAL_RCC_OscConfig+0x768>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009c6c:	0112      	lsls	r2, r2, #4
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	4942      	ldr	r1, [pc, #264]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	628b      	str	r3, [r1, #40]	; 0x28
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c84:	3b01      	subs	r3, #1
 8009c86:	025b      	lsls	r3, r3, #9
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	3b01      	subs	r3, #1
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	061b      	lsls	r3, r3, #24
 8009ca2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ca6:	4935      	ldr	r1, [pc, #212]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009cac:	4b33      	ldr	r3, [pc, #204]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a32      	ldr	r2, [pc, #200]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cb2:	f023 0301 	bic.w	r3, r3, #1
 8009cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009cb8:	4b30      	ldr	r3, [pc, #192]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cbc:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <HAL_RCC_OscConfig+0x76c>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009cc4:	00d2      	lsls	r2, r2, #3
 8009cc6:	492d      	ldr	r1, [pc, #180]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ccc:	4b2b      	ldr	r3, [pc, #172]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	f023 020c 	bic.w	r2, r3, #12
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd8:	4928      	ldr	r1, [pc, #160]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009cde:	4b27      	ldr	r3, [pc, #156]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	f023 0202 	bic.w	r2, r3, #2
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cea:	4924      	ldr	r1, [pc, #144]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cf0:	4b22      	ldr	r3, [pc, #136]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	4a21      	ldr	r2, [pc, #132]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cfc:	4b1f      	ldr	r3, [pc, #124]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4a1e      	ldr	r2, [pc, #120]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d14:	4b19      	ldr	r3, [pc, #100]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a18      	ldr	r2, [pc, #96]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d20:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2c:	f7fa f96a 	bl	8004004 <HAL_GetTick>
 8009d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d34:	f7fa f966 	bl	8004004 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e091      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d46:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0x71c>
 8009d52:	e089      	b.n	8009e68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <HAL_RCC_OscConfig+0x764>)
 8009d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d60:	f7fa f950 	bl	8004004 <HAL_GetTick>
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d66:	e00f      	b.n	8009d88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d68:	f7fa f94c 	bl	8004004 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d908      	bls.n	8009d88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e077      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
 8009d7a:	bf00      	nop
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	fffffc0c 	.word	0xfffffc0c
 8009d84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d88:	4b3a      	ldr	r3, [pc, #232]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e9      	bne.n	8009d68 <HAL_RCC_OscConfig+0x750>
 8009d94:	e068      	b.n	8009e68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009d9c:	4b35      	ldr	r3, [pc, #212]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d031      	beq.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f003 0203 	and.w	r2, r3, #3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d12a      	bne.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d122      	bne.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d11a      	bne.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	0a5b      	lsrs	r3, r3, #9
 8009ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d111      	bne.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d108      	bne.n	8009e0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	0e1b      	lsrs	r3, r3, #24
 8009e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d001      	beq.n	8009e12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e02b      	b.n	8009e6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e12:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	08db      	lsrs	r3, r3, #3
 8009e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d01f      	beq.n	8009e68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e28:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4a11      	ldr	r2, [pc, #68]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e34:	f7fa f8e6 	bl	8004004 <HAL_GetTick>
 8009e38:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e3a:	bf00      	nop
 8009e3c:	f7fa f8e2 	bl	8004004 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d0f9      	beq.n	8009e3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <HAL_RCC_OscConfig+0x860>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e54:	00d2      	lsls	r2, r2, #3
 8009e56:	4907      	ldr	r1, [pc, #28]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	4a04      	ldr	r2, [pc, #16]	; (8009e74 <HAL_RCC_OscConfig+0x85c>)
 8009e62:	f043 0301 	orr.w	r3, r3, #1
 8009e66:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3730      	adds	r7, #48	; 0x30
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	58024400 	.word	0x58024400
 8009e78:	ffff0007 	.word	0xffff0007

08009e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e19c      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e90:	4b8a      	ldr	r3, [pc, #552]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d910      	bls.n	8009ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e9e:	4b87      	ldr	r3, [pc, #540]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f023 020f 	bic.w	r2, r3, #15
 8009ea6:	4985      	ldr	r1, [pc, #532]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eae:	4b83      	ldr	r3, [pc, #524]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d001      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e184      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	4b7b      	ldr	r3, [pc, #492]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d908      	bls.n	8009eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009edc:	4b78      	ldr	r3, [pc, #480]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	4975      	ldr	r1, [pc, #468]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695a      	ldr	r2, [r3, #20]
 8009efe:	4b70      	ldr	r3, [pc, #448]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d908      	bls.n	8009f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f0a:	4b6d      	ldr	r3, [pc, #436]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	496a      	ldr	r1, [pc, #424]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d010      	beq.n	8009f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	699a      	ldr	r2, [r3, #24]
 8009f2c:	4b64      	ldr	r3, [pc, #400]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d908      	bls.n	8009f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f38:	4b61      	ldr	r3, [pc, #388]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	495e      	ldr	r1, [pc, #376]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	69da      	ldr	r2, [r3, #28]
 8009f5a:	4b59      	ldr	r3, [pc, #356]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d908      	bls.n	8009f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f66:	4b56      	ldr	r3, [pc, #344]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	4953      	ldr	r1, [pc, #332]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d010      	beq.n	8009fa6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d908      	bls.n	8009fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f94:	4b4a      	ldr	r3, [pc, #296]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	f023 020f 	bic.w	r2, r3, #15
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4947      	ldr	r1, [pc, #284]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d055      	beq.n	800a05e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009fb2:	4b43      	ldr	r3, [pc, #268]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	4940      	ldr	r1, [pc, #256]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d107      	bne.n	8009fdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fcc:	4b3c      	ldr	r3, [pc, #240]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d121      	bne.n	800a01c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0f6      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d107      	bne.n	8009ff4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fe4:	4b36      	ldr	r3, [pc, #216]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d115      	bne.n	800a01c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e0ea      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d107      	bne.n	800a00c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ffc:	4b30      	ldr	r3, [pc, #192]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e0de      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a00c:	4b2c      	ldr	r3, [pc, #176]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e0d6      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	f023 0207 	bic.w	r2, r3, #7
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4925      	ldr	r1, [pc, #148]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02e:	f7f9 ffe9 	bl	8004004 <HAL_GetTick>
 800a032:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a034:	e00a      	b.n	800a04c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a036:	f7f9 ffe5 	bl	8004004 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f241 3288 	movw	r2, #5000	; 0x1388
 800a044:	4293      	cmp	r3, r2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e0be      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d1eb      	bne.n	800a036 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d010      	beq.n	800a08c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	429a      	cmp	r2, r3
 800a078:	d208      	bcs.n	800a08c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	f023 020f 	bic.w	r2, r3, #15
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	490e      	ldr	r1, [pc, #56]	; (800a0c0 <HAL_RCC_ClockConfig+0x244>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d214      	bcs.n	800a0c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a09a:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f023 020f 	bic.w	r2, r3, #15
 800a0a2:	4906      	ldr	r1, [pc, #24]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0aa:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <HAL_RCC_ClockConfig+0x240>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d005      	beq.n	800a0c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e086      	b.n	800a1ca <HAL_RCC_ClockConfig+0x34e>
 800a0bc:	52002000 	.word	0x52002000
 800a0c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d010      	beq.n	800a0f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	4b3f      	ldr	r3, [pc, #252]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d208      	bcs.n	800a0f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0e0:	4b3c      	ldr	r3, [pc, #240]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	4939      	ldr	r1, [pc, #228]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d010      	beq.n	800a120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	4b34      	ldr	r3, [pc, #208]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d208      	bcs.n	800a120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a10e:	4b31      	ldr	r3, [pc, #196]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	492e      	ldr	r1, [pc, #184]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d010      	beq.n	800a14e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	699a      	ldr	r2, [r3, #24]
 800a130:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a138:	429a      	cmp	r2, r3
 800a13a:	d208      	bcs.n	800a14e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a13c:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	4922      	ldr	r1, [pc, #136]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	d010      	beq.n	800a17c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69da      	ldr	r2, [r3, #28]
 800a15e:	4b1d      	ldr	r3, [pc, #116]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a166:	429a      	cmp	r2, r3
 800a168:	d208      	bcs.n	800a17c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a16a:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	4917      	ldr	r1, [pc, #92]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a17c:	f000 f834 	bl	800a1e8 <HAL_RCC_GetSysClockFreq>
 800a180:	4602      	mov	r2, r0
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	0a1b      	lsrs	r3, r3, #8
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	4912      	ldr	r1, [pc, #72]	; (800a1d8 <HAL_RCC_ClockConfig+0x35c>)
 800a18e:	5ccb      	ldrb	r3, [r1, r3]
 800a190:	f003 031f 	and.w	r3, r3, #31
 800a194:	fa22 f303 	lsr.w	r3, r2, r3
 800a198:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a19a:	4b0e      	ldr	r3, [pc, #56]	; (800a1d4 <HAL_RCC_ClockConfig+0x358>)
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	4a0d      	ldr	r2, [pc, #52]	; (800a1d8 <HAL_RCC_ClockConfig+0x35c>)
 800a1a4:	5cd3      	ldrb	r3, [r2, r3]
 800a1a6:	f003 031f 	and.w	r3, r3, #31
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <HAL_RCC_ClockConfig+0x360>)
 800a1b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1b4:	4a0a      	ldr	r2, [pc, #40]	; (800a1e0 <HAL_RCC_ClockConfig+0x364>)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <HAL_RCC_ClockConfig+0x368>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f9 fed6 	bl	8003f70 <HAL_InitTick>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	58024400 	.word	0x58024400
 800a1d8:	080177c8 	.word	0x080177c8
 800a1dc:	24000008 	.word	0x24000008
 800a1e0:	24000004 	.word	0x24000004
 800a1e4:	2400000c 	.word	0x2400000c

0800a1e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1ee:	4bb3      	ldr	r3, [pc, #716]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f6:	2b18      	cmp	r3, #24
 800a1f8:	f200 8155 	bhi.w	800a4a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a1fc:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a269 	.word	0x0800a269
 800a208:	0800a4a7 	.word	0x0800a4a7
 800a20c:	0800a4a7 	.word	0x0800a4a7
 800a210:	0800a4a7 	.word	0x0800a4a7
 800a214:	0800a4a7 	.word	0x0800a4a7
 800a218:	0800a4a7 	.word	0x0800a4a7
 800a21c:	0800a4a7 	.word	0x0800a4a7
 800a220:	0800a4a7 	.word	0x0800a4a7
 800a224:	0800a28f 	.word	0x0800a28f
 800a228:	0800a4a7 	.word	0x0800a4a7
 800a22c:	0800a4a7 	.word	0x0800a4a7
 800a230:	0800a4a7 	.word	0x0800a4a7
 800a234:	0800a4a7 	.word	0x0800a4a7
 800a238:	0800a4a7 	.word	0x0800a4a7
 800a23c:	0800a4a7 	.word	0x0800a4a7
 800a240:	0800a4a7 	.word	0x0800a4a7
 800a244:	0800a295 	.word	0x0800a295
 800a248:	0800a4a7 	.word	0x0800a4a7
 800a24c:	0800a4a7 	.word	0x0800a4a7
 800a250:	0800a4a7 	.word	0x0800a4a7
 800a254:	0800a4a7 	.word	0x0800a4a7
 800a258:	0800a4a7 	.word	0x0800a4a7
 800a25c:	0800a4a7 	.word	0x0800a4a7
 800a260:	0800a4a7 	.word	0x0800a4a7
 800a264:	0800a29b 	.word	0x0800a29b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a268:	4b94      	ldr	r3, [pc, #592]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a274:	4b91      	ldr	r3, [pc, #580]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	08db      	lsrs	r3, r3, #3
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	4a90      	ldr	r2, [pc, #576]	; (800a4c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a280:	fa22 f303 	lsr.w	r3, r2, r3
 800a284:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a286:	e111      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a288:	4b8d      	ldr	r3, [pc, #564]	; (800a4c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a28a:	61bb      	str	r3, [r7, #24]
      break;
 800a28c:	e10e      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a28e:	4b8d      	ldr	r3, [pc, #564]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a290:	61bb      	str	r3, [r7, #24]
      break;
 800a292:	e10b      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a294:	4b8c      	ldr	r3, [pc, #560]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a296:	61bb      	str	r3, [r7, #24]
      break;
 800a298:	e108      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a29a:	4b88      	ldr	r3, [pc, #544]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a2a4:	4b85      	ldr	r3, [pc, #532]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	091b      	lsrs	r3, r3, #4
 800a2aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a2b0:	4b82      	ldr	r3, [pc, #520]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a2ba:	4b80      	ldr	r3, [pc, #512]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2be:	08db      	lsrs	r3, r3, #3
 800a2c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 80e1 	beq.w	800a4a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	f000 8083 	beq.w	800a3ec <HAL_RCC_GetSysClockFreq+0x204>
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	f200 80a1 	bhi.w	800a430 <HAL_RCC_GetSysClockFreq+0x248>
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_RCC_GetSysClockFreq+0x114>
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d056      	beq.n	800a3a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2fa:	e099      	b.n	800a430 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2fc:	4b6f      	ldr	r3, [pc, #444]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0320 	and.w	r3, r3, #32
 800a304:	2b00      	cmp	r3, #0
 800a306:	d02d      	beq.n	800a364 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a308:	4b6c      	ldr	r3, [pc, #432]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	08db      	lsrs	r3, r3, #3
 800a30e:	f003 0303 	and.w	r3, r3, #3
 800a312:	4a6b      	ldr	r2, [pc, #428]	; (800a4c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a314:	fa22 f303 	lsr.w	r3, r2, r3
 800a318:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a332:	4b62      	ldr	r3, [pc, #392]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a342:	ed97 6a02 	vldr	s12, [r7, #8]
 800a346:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a4cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a362:	e087      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a4d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a376:	4b51      	ldr	r3, [pc, #324]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	ed97 6a02 	vldr	s12, [r7, #8]
 800a38a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a4cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3a6:	e065      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a4d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ba:	4b40      	ldr	r3, [pc, #256]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a4cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3ea:	e043      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fe:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a412:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a4cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a42e:	e021      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a4d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a442:	4b1e      	ldr	r3, [pc, #120]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a452:	ed97 6a02 	vldr	s12, [r7, #8]
 800a456:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a4cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a45a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a472:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a474:	4b11      	ldr	r3, [pc, #68]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	0a5b      	lsrs	r3, r3, #9
 800a47a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47e:	3301      	adds	r3, #1
 800a480:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	ee07 3a90 	vmov	s15, r3
 800a488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a48c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a498:	ee17 3a90 	vmov	r3, s15
 800a49c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a49e:	e005      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61bb      	str	r3, [r7, #24]
      break;
 800a4a4:	e002      	b.n	800a4ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4a8:	61bb      	str	r3, [r7, #24]
      break;
 800a4aa:	bf00      	nop
  }

  return sysclockfreq;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3724      	adds	r7, #36	; 0x24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	58024400 	.word	0x58024400
 800a4c0:	03d09000 	.word	0x03d09000
 800a4c4:	003d0900 	.word	0x003d0900
 800a4c8:	016e3600 	.word	0x016e3600
 800a4cc:	46000000 	.word	0x46000000
 800a4d0:	4c742400 	.word	0x4c742400
 800a4d4:	4a742400 	.word	0x4a742400
 800a4d8:	4bb71b00 	.word	0x4bb71b00

0800a4dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a4e2:	f7ff fe81 	bl	800a1e8 <HAL_RCC_GetSysClockFreq>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b10      	ldr	r3, [pc, #64]	; (800a52c <HAL_RCC_GetHCLKFreq+0x50>)
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	0a1b      	lsrs	r3, r3, #8
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	490f      	ldr	r1, [pc, #60]	; (800a530 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4f4:	5ccb      	ldrb	r3, [r1, r3]
 800a4f6:	f003 031f 	and.w	r3, r3, #31
 800a4fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <HAL_RCC_GetHCLKFreq+0x50>)
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f003 030f 	and.w	r3, r3, #15
 800a508:	4a09      	ldr	r2, [pc, #36]	; (800a530 <HAL_RCC_GetHCLKFreq+0x54>)
 800a50a:	5cd3      	ldrb	r3, [r2, r3]
 800a50c:	f003 031f 	and.w	r3, r3, #31
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	fa22 f303 	lsr.w	r3, r2, r3
 800a516:	4a07      	ldr	r2, [pc, #28]	; (800a534 <HAL_RCC_GetHCLKFreq+0x58>)
 800a518:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a51a:	4a07      	ldr	r2, [pc, #28]	; (800a538 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a520:	4b04      	ldr	r3, [pc, #16]	; (800a534 <HAL_RCC_GetHCLKFreq+0x58>)
 800a522:	681b      	ldr	r3, [r3, #0]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	58024400 	.word	0x58024400
 800a530:	080177c8 	.word	0x080177c8
 800a534:	24000008 	.word	0x24000008
 800a538:	24000004 	.word	0x24000004

0800a53c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a540:	f7ff ffcc 	bl	800a4dc <HAL_RCC_GetHCLKFreq>
 800a544:	4602      	mov	r2, r0
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	091b      	lsrs	r3, r3, #4
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	4904      	ldr	r1, [pc, #16]	; (800a564 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a552:	5ccb      	ldrb	r3, [r1, r3]
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	58024400 	.word	0x58024400
 800a564:	080177c8 	.word	0x080177c8

0800a568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a56c:	f7ff ffb6 	bl	800a4dc <HAL_RCC_GetHCLKFreq>
 800a570:	4602      	mov	r2, r0
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	f003 0307 	and.w	r3, r3, #7
 800a57c:	4904      	ldr	r1, [pc, #16]	; (800a590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a57e:	5ccb      	ldrb	r3, [r1, r3]
 800a580:	f003 031f 	and.w	r3, r3, #31
 800a584:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a588:	4618      	mov	r0, r3
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	58024400 	.word	0x58024400
 800a590:	080177c8 	.word	0x080177c8

0800a594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a598:	b0c8      	sub	sp, #288	; 0x120
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	ea54 0305 	orrs.w	r3, r4, r5
 800a5be:	d049      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5ca:	d02f      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a5cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5d0:	d828      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5d6:	d01a      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5dc:	d822      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a5e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e6:	d007      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a5e8:	e01c      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ea:	4ba7      	ldr	r3, [pc, #668]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	4aa6      	ldr	r2, [pc, #664]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5f6:	e01a      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	2102      	movs	r1, #2
 800a600:	4618      	mov	r0, r3
 800a602:	f002 fa6d 	bl	800cae0 <RCCEx_PLL2_Config>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a60c:	e00f      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a612:	3328      	adds	r3, #40	; 0x28
 800a614:	2102      	movs	r1, #2
 800a616:	4618      	mov	r0, r3
 800a618:	f002 fb14 	bl	800cc44 <RCCEx_PLL3_Config>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a622:	e004      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a62a:	e000      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a636:	4b94      	ldr	r3, [pc, #592]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a644:	4a90      	ldr	r2, [pc, #576]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a646:	430b      	orrs	r3, r1
 800a648:	6513      	str	r3, [r2, #80]	; 0x50
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a650:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a660:	f04f 0900 	mov.w	r9, #0
 800a664:	ea58 0309 	orrs.w	r3, r8, r9
 800a668:	d047      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a670:	2b04      	cmp	r3, #4
 800a672:	d82a      	bhi.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a69f 	.word	0x0800a69f
 800a684:	0800a6b5 	.word	0x0800a6b5
 800a688:	0800a6d3 	.word	0x0800a6d3
 800a68c:	0800a6d3 	.word	0x0800a6d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a690:	4b7d      	ldr	r3, [pc, #500]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	4a7c      	ldr	r2, [pc, #496]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a69c:	e01a      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f002 fa1a 	bl	800cae0 <RCCEx_PLL2_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6b2:	e00f      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6b8:	3328      	adds	r3, #40	; 0x28
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f002 fac1 	bl	800cc44 <RCCEx_PLL3_Config>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6c8:	e004      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a6d0:	e000      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6dc:	4b6a      	ldr	r3, [pc, #424]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e0:	f023 0107 	bic.w	r1, r3, #7
 800a6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ea:	4a67      	ldr	r2, [pc, #412]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	6513      	str	r3, [r2, #80]	; 0x50
 800a6f0:	e003      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a6f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a706:	f04f 0b00 	mov.w	fp, #0
 800a70a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a70e:	d054      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a716:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a71a:	d036      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a71c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a720:	d82f      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a726:	d032      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72c:	d829      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a72e:	2bc0      	cmp	r3, #192	; 0xc0
 800a730:	d02f      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a732:	2bc0      	cmp	r3, #192	; 0xc0
 800a734:	d825      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a736:	2b80      	cmp	r3, #128	; 0x80
 800a738:	d018      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a73a:	2b80      	cmp	r3, #128	; 0x80
 800a73c:	d821      	bhi.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a742:	2b40      	cmp	r3, #64	; 0x40
 800a744:	d007      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a746:	e01c      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a748:	4b4f      	ldr	r3, [pc, #316]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	4a4e      	ldr	r2, [pc, #312]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a754:	e01e      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a75a:	3308      	adds	r3, #8
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f002 f9be 	bl	800cae0 <RCCEx_PLL2_Config>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a76a:	e013      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a770:	3328      	adds	r3, #40	; 0x28
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f002 fa65 	bl	800cc44 <RCCEx_PLL3_Config>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a780:	e008      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a788:	e004      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a78a:	bf00      	nop
 800a78c:	e002      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a792:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a79c:	4b3a      	ldr	r3, [pc, #232]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7aa:	4a37      	ldr	r2, [pc, #220]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	6513      	str	r3, [r2, #80]	; 0x50
 800a7b0:	e003      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a7b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a7c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a7d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	d05c      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a7e4:	d03b      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7e6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a7ea:	d834      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f0:	d037      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a7f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f6:	d82e      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a7f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a7fc:	d033      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a802:	d828      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a808:	d01a      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a80e:	d822      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a818:	d007      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a81a:	e01c      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a81c:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a820:	4a19      	ldr	r2, [pc, #100]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a828:	e01e      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a82e:	3308      	adds	r3, #8
 800a830:	2100      	movs	r1, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f002 f954 	bl	800cae0 <RCCEx_PLL2_Config>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a83e:	e013      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a844:	3328      	adds	r3, #40	; 0x28
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f002 f9fb 	bl	800cc44 <RCCEx_PLL3_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a854:	e008      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a85c:	e004      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a85e:	bf00      	nop
 800a860:	e002      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a862:	bf00      	nop
 800a864:	e000      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a868:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10d      	bne.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800a878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a87e:	4a02      	ldr	r2, [pc, #8]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a880:	430b      	orrs	r3, r1
 800a882:	6513      	str	r3, [r2, #80]	; 0x50
 800a884:	e006      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a886:	bf00      	nop
 800a888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a8a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d03a      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ba:	2b30      	cmp	r3, #48	; 0x30
 800a8bc:	d01f      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a8be:	2b30      	cmp	r3, #48	; 0x30
 800a8c0:	d819      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a8c2:	2b20      	cmp	r3, #32
 800a8c4:	d00c      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d815      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d019      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d111      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8d2:	4bae      	ldr	r3, [pc, #696]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	4aad      	ldr	r2, [pc, #692]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8de:	e011      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f002 f8f9 	bl	800cae0 <RCCEx_PLL2_Config>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8f4:	e006      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a8fc:	e002      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a8fe:	bf00      	nop
 800a900:	e000      	b.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a902:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a90c:	4b9f      	ldr	r3, [pc, #636]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a910:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a91a:	4a9c      	ldr	r2, [pc, #624]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a91c:	430b      	orrs	r3, r1
 800a91e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a920:	e003      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a922:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a926:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a93a:	2300      	movs	r3, #0
 800a93c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a940:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a944:	460b      	mov	r3, r1
 800a946:	4313      	orrs	r3, r2
 800a948:	d051      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a954:	d035      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a95a:	d82e      	bhi.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a95c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a960:	d031      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a962:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a966:	d828      	bhi.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a96c:	d01a      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a972:	d822      	bhi.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a97c:	d007      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a97e:	e01c      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a980:	4b82      	ldr	r3, [pc, #520]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	4a81      	ldr	r2, [pc, #516]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a98a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a98c:	e01c      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a98e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a992:	3308      	adds	r3, #8
 800a994:	2100      	movs	r1, #0
 800a996:	4618      	mov	r0, r3
 800a998:	f002 f8a2 	bl	800cae0 <RCCEx_PLL2_Config>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9a2:	e011      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a9a8:	3328      	adds	r3, #40	; 0x28
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f002 f949 	bl	800cc44 <RCCEx_PLL3_Config>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9b8:	e006      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a9d0:	4b6e      	ldr	r3, [pc, #440]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a9dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9de:	4a6b      	ldr	r2, [pc, #428]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	6513      	str	r3, [r2, #80]	; 0x50
 800a9e4:	e003      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a9ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a9ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a9fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	d053      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aa0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aa12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa18:	d033      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800aa1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa1e:	d82c      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa24:	d02f      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800aa26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa2a:	d826      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa30:	d02b      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa36:	d820      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa3c:	d012      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800aa3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa42:	d81a      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d022      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800aa48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa4c:	d115      	bne.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aa52:	3308      	adds	r3, #8
 800aa54:	2101      	movs	r1, #1
 800aa56:	4618      	mov	r0, r3
 800aa58:	f002 f842 	bl	800cae0 <RCCEx_PLL2_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa62:	e015      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aa68:	3328      	adds	r3, #40	; 0x28
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 f8e9 	bl	800cc44 <RCCEx_PLL3_Config>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa78:	e00a      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800aa80:	e006      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aa82:	bf00      	nop
 800aa84:	e004      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aa86:	bf00      	nop
 800aa88:	e002      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aa8a:	bf00      	nop
 800aa8c:	e000      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aa8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aa98:	4b3c      	ldr	r3, [pc, #240]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aaa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aaa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa6:	4a39      	ldr	r2, [pc, #228]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	6513      	str	r3, [r2, #80]	; 0x50
 800aaac:	e003      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800aab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aac6:	2300      	movs	r3, #0
 800aac8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aacc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4313      	orrs	r3, r2
 800aad4:	d060      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aade:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800aae2:	d039      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800aae4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800aae8:	d832      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aaea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaee:	d035      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aaf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaf4:	d82c      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aaf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aafa:	d031      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab00:	d826      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab06:	d02d      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ab08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab0c:	d820      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab12:	d012      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ab14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab18:	d81a      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d024      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ab1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab22:	d115      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab28:	3308      	adds	r3, #8
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 ffd7 	bl	800cae0 <RCCEx_PLL2_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab38:	e017      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab3e:	3328      	adds	r3, #40	; 0x28
 800ab40:	2101      	movs	r1, #1
 800ab42:	4618      	mov	r0, r3
 800ab44:	f002 f87e 	bl	800cc44 <RCCEx_PLL3_Config>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab4e:	e00c      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ab56:	e008      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab58:	bf00      	nop
 800ab5a:	e006      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab5c:	bf00      	nop
 800ab5e:	e004      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10e      	bne.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ab7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab82:	4a02      	ldr	r2, [pc, #8]	; (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6593      	str	r3, [r2, #88]	; 0x58
 800ab88:	e006      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ab94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aba8:	2300      	movs	r3, #0
 800abaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800abae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abb2:	460b      	mov	r3, r1
 800abb4:	4313      	orrs	r3, r2
 800abb6:	d037      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800abb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc2:	d00e      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800abc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc8:	d816      	bhi.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d018      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800abce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd2:	d111      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd4:	4bc4      	ldr	r3, [pc, #784]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	4ac3      	ldr	r2, [pc, #780]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abe0:	e00f      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abe6:	3308      	adds	r3, #8
 800abe8:	2101      	movs	r1, #1
 800abea:	4618      	mov	r0, r3
 800abec:	f001 ff78 	bl	800cae0 <RCCEx_PLL2_Config>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abf6:	e004      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800abfe:	e000      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ac00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10a      	bne.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac0a:	4bb7      	ldr	r3, [pc, #732]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ac12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac18:	4ab3      	ldr	r2, [pc, #716]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac1a:	430b      	orrs	r3, r1
 800ac1c:	6513      	str	r3, [r2, #80]	; 0x50
 800ac1e:	e003      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ac24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ac34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4313      	orrs	r3, r2
 800ac46:	d039      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ac48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d81c      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ac52:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ac54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac58:	0800ac95 	.word	0x0800ac95
 800ac5c:	0800ac69 	.word	0x0800ac69
 800ac60:	0800ac77 	.word	0x0800ac77
 800ac64:	0800ac95 	.word	0x0800ac95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac68:	4b9f      	ldr	r3, [pc, #636]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	4a9e      	ldr	r2, [pc, #632]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac74:	e00f      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	2102      	movs	r1, #2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 ff2e 	bl	800cae0 <RCCEx_PLL2_Config>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac8a:	e004      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ac92:	e000      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ac94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac9e:	4b92      	ldr	r3, [pc, #584]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca2:	f023 0103 	bic.w	r1, r3, #3
 800aca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800acaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acac:	4a8e      	ldr	r2, [pc, #568]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acae:	430b      	orrs	r3, r1
 800acb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acb2:	e003      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800acb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800acbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800acc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800accc:	2300      	movs	r3, #0
 800acce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800acd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800acd6:	460b      	mov	r3, r1
 800acd8:	4313      	orrs	r3, r2
 800acda:	f000 8099 	beq.w	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acde:	4b83      	ldr	r3, [pc, #524]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a82      	ldr	r2, [pc, #520]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ace4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acea:	f7f9 f98b 	bl	8004004 <HAL_GetTick>
 800acee:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acf2:	e00b      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acf4:	f7f9 f986 	bl	8004004 <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b64      	cmp	r3, #100	; 0x64
 800ad02:	d903      	bls.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ad0a:	e005      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad0c:	4b77      	ldr	r3, [pc, #476]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d0ed      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ad18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d173      	bne.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad20:	4b71      	ldr	r3, [pc, #452]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad2c:	4053      	eors	r3, r2
 800ad2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d015      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad36:	4b6c      	ldr	r3, [pc, #432]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad42:	4b69      	ldr	r3, [pc, #420]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad46:	4a68      	ldr	r2, [pc, #416]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad4e:	4b66      	ldr	r3, [pc, #408]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	4a65      	ldr	r2, [pc, #404]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad5a:	4a63      	ldr	r2, [pc, #396]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6e:	d118      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad70:	f7f9 f948 	bl	8004004 <HAL_GetTick>
 800ad74:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad78:	e00d      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad7a:	f7f9 f943 	bl	8004004 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d903      	bls.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800ad94:	e005      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad96:	4b54      	ldr	r3, [pc, #336]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0eb      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ada2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d129      	bne.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800adae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800adb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adba:	d10e      	bne.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x846>
 800adbc:	4b4a      	ldr	r3, [pc, #296]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800adc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800adc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800adcc:	091a      	lsrs	r2, r3, #4
 800adce:	4b48      	ldr	r3, [pc, #288]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800add0:	4013      	ands	r3, r2
 800add2:	4a45      	ldr	r2, [pc, #276]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800add4:	430b      	orrs	r3, r1
 800add6:	6113      	str	r3, [r2, #16]
 800add8:	e005      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800adda:	4b43      	ldr	r3, [pc, #268]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	4a42      	ldr	r2, [pc, #264]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ade4:	6113      	str	r3, [r2, #16]
 800ade6:	4b40      	ldr	r3, [pc, #256]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800adea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800adee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800adf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adf6:	4a3c      	ldr	r2, [pc, #240]	; (800aee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adf8:	430b      	orrs	r3, r1
 800adfa:	6713      	str	r3, [r2, #112]	; 0x70
 800adfc:	e008      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adfe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ae02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800ae06:	e003      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ae0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f002 0301 	and.w	r3, r2, #1
 800ae1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae20:	2300      	movs	r3, #0
 800ae22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	f000 8090 	beq.w	800af52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ae36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae3a:	2b28      	cmp	r3, #40	; 0x28
 800ae3c:	d870      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800af29 	.word	0x0800af29
 800ae48:	0800af21 	.word	0x0800af21
 800ae4c:	0800af21 	.word	0x0800af21
 800ae50:	0800af21 	.word	0x0800af21
 800ae54:	0800af21 	.word	0x0800af21
 800ae58:	0800af21 	.word	0x0800af21
 800ae5c:	0800af21 	.word	0x0800af21
 800ae60:	0800af21 	.word	0x0800af21
 800ae64:	0800aef5 	.word	0x0800aef5
 800ae68:	0800af21 	.word	0x0800af21
 800ae6c:	0800af21 	.word	0x0800af21
 800ae70:	0800af21 	.word	0x0800af21
 800ae74:	0800af21 	.word	0x0800af21
 800ae78:	0800af21 	.word	0x0800af21
 800ae7c:	0800af21 	.word	0x0800af21
 800ae80:	0800af21 	.word	0x0800af21
 800ae84:	0800af0b 	.word	0x0800af0b
 800ae88:	0800af21 	.word	0x0800af21
 800ae8c:	0800af21 	.word	0x0800af21
 800ae90:	0800af21 	.word	0x0800af21
 800ae94:	0800af21 	.word	0x0800af21
 800ae98:	0800af21 	.word	0x0800af21
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800af21 	.word	0x0800af21
 800aea4:	0800af29 	.word	0x0800af29
 800aea8:	0800af21 	.word	0x0800af21
 800aeac:	0800af21 	.word	0x0800af21
 800aeb0:	0800af21 	.word	0x0800af21
 800aeb4:	0800af21 	.word	0x0800af21
 800aeb8:	0800af21 	.word	0x0800af21
 800aebc:	0800af21 	.word	0x0800af21
 800aec0:	0800af21 	.word	0x0800af21
 800aec4:	0800af29 	.word	0x0800af29
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af21 	.word	0x0800af21
 800aed0:	0800af21 	.word	0x0800af21
 800aed4:	0800af21 	.word	0x0800af21
 800aed8:	0800af21 	.word	0x0800af21
 800aedc:	0800af21 	.word	0x0800af21
 800aee0:	0800af21 	.word	0x0800af21
 800aee4:	0800af29 	.word	0x0800af29
 800aee8:	58024400 	.word	0x58024400
 800aeec:	58024800 	.word	0x58024800
 800aef0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aef8:	3308      	adds	r3, #8
 800aefa:	2101      	movs	r1, #1
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 fdef 	bl	800cae0 <RCCEx_PLL2_Config>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af08:	e00f      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af0e:	3328      	adds	r3, #40	; 0x28
 800af10:	2101      	movs	r1, #1
 800af12:	4618      	mov	r0, r3
 800af14:	f001 fe96 	bl	800cc44 <RCCEx_PLL3_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af1e:	e004      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af32:	4bc0      	ldr	r3, [pc, #768]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800af3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af42:	4abc      	ldr	r2, [pc, #752]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af44:	430b      	orrs	r3, r1
 800af46:	6553      	str	r3, [r2, #84]	; 0x54
 800af48:	e003      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800af4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	f002 0302 	and.w	r3, r2, #2
 800af5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af62:	2300      	movs	r3, #0
 800af64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af68:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800af6c:	460b      	mov	r3, r1
 800af6e:	4313      	orrs	r3, r2
 800af70:	d043      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d824      	bhi.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800af7e:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800afd1 	.word	0x0800afd1
 800af88:	0800af9d 	.word	0x0800af9d
 800af8c:	0800afb3 	.word	0x0800afb3
 800af90:	0800afd1 	.word	0x0800afd1
 800af94:	0800afd1 	.word	0x0800afd1
 800af98:	0800afd1 	.word	0x0800afd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afa0:	3308      	adds	r3, #8
 800afa2:	2101      	movs	r1, #1
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 fd9b 	bl	800cae0 <RCCEx_PLL2_Config>
 800afaa:	4603      	mov	r3, r0
 800afac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800afb0:	e00f      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afb6:	3328      	adds	r3, #40	; 0x28
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 fe42 	bl	800cc44 <RCCEx_PLL3_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800afc6:	e004      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800afce:	e000      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800afd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afda:	4b96      	ldr	r3, [pc, #600]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800afdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afde:	f023 0107 	bic.w	r1, r3, #7
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afea:	4a92      	ldr	r2, [pc, #584]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800afec:	430b      	orrs	r3, r1
 800afee:	6553      	str	r3, [r2, #84]	; 0x54
 800aff0:	e003      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800aff6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800affa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f002 0304 	and.w	r3, r2, #4
 800b006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b00a:	2300      	movs	r3, #0
 800b00c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b010:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b014:	460b      	mov	r3, r1
 800b016:	4313      	orrs	r3, r2
 800b018:	d043      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b01e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b022:	2b05      	cmp	r3, #5
 800b024:	d824      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b079 	.word	0x0800b079
 800b030:	0800b045 	.word	0x0800b045
 800b034:	0800b05b 	.word	0x0800b05b
 800b038:	0800b079 	.word	0x0800b079
 800b03c:	0800b079 	.word	0x0800b079
 800b040:	0800b079 	.word	0x0800b079
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b048:	3308      	adds	r3, #8
 800b04a:	2101      	movs	r1, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 fd47 	bl	800cae0 <RCCEx_PLL2_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b058:	e00f      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b05e:	3328      	adds	r3, #40	; 0x28
 800b060:	2101      	movs	r1, #1
 800b062:	4618      	mov	r0, r3
 800b064:	f001 fdee 	bl	800cc44 <RCCEx_PLL3_Config>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b06e:	e004      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b076:	e000      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b07a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10b      	bne.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b082:	4b6c      	ldr	r3, [pc, #432]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b086:	f023 0107 	bic.w	r1, r3, #7
 800b08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b08e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b092:	4a68      	ldr	r2, [pc, #416]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b094:	430b      	orrs	r3, r1
 800b096:	6593      	str	r3, [r2, #88]	; 0x58
 800b098:	e003      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b09e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f002 0320 	and.w	r3, r2, #32
 800b0ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	d055      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0ce:	d033      	beq.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d4:	d82c      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0da:	d02f      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e0:	d826      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b0e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0e6:	d02b      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b0e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0ec:	d820      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b0ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f2:	d012      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f8:	d81a      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d022      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b0fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b102:	d115      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b108:	3308      	adds	r3, #8
 800b10a:	2100      	movs	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 fce7 	bl	800cae0 <RCCEx_PLL2_Config>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b118:	e015      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b11e:	3328      	adds	r3, #40	; 0x28
 800b120:	2102      	movs	r1, #2
 800b122:	4618      	mov	r0, r3
 800b124:	f001 fd8e 	bl	800cc44 <RCCEx_PLL3_Config>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b12e:	e00a      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b136:	e006      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b138:	bf00      	nop
 800b13a:	e004      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b13c:	bf00      	nop
 800b13e:	e002      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b144:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b146:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b14e:	4b39      	ldr	r3, [pc, #228]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b152:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b15a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b15e:	4a35      	ldr	r2, [pc, #212]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b160:	430b      	orrs	r3, r1
 800b162:	6553      	str	r3, [r2, #84]	; 0x54
 800b164:	e003      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b16a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b17a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b17e:	2300      	movs	r3, #0
 800b180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b184:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b188:	460b      	mov	r3, r1
 800b18a:	4313      	orrs	r3, r2
 800b18c:	d058      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b196:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b19a:	d033      	beq.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b19c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1a0:	d82c      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a6:	d02f      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ac:	d826      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1b2:	d02b      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b1b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1b8:	d820      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1be:	d012      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b1c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1c4:	d81a      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d022      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ce:	d115      	bne.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1d4:	3308      	adds	r3, #8
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 fc81 	bl	800cae0 <RCCEx_PLL2_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1e4:	e015      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1ea:	3328      	adds	r3, #40	; 0x28
 800b1ec:	2102      	movs	r1, #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 fd28 	bl	800cc44 <RCCEx_PLL3_Config>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1fa:	e00a      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b202:	e006      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b204:	bf00      	nop
 800b206:	e004      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b208:	bf00      	nop
 800b20a:	e002      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b20c:	bf00      	nop
 800b20e:	e000      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b210:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b212:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10e      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b21a:	4b06      	ldr	r3, [pc, #24]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b22a:	4a02      	ldr	r2, [pc, #8]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b22c:	430b      	orrs	r3, r1
 800b22e:	6593      	str	r3, [r2, #88]	; 0x58
 800b230:	e006      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b232:	bf00      	nop
 800b234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b23c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b24c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b250:	2300      	movs	r3, #0
 800b252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b256:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b25a:	460b      	mov	r3, r1
 800b25c:	4313      	orrs	r3, r2
 800b25e:	d055      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b268:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b26c:	d033      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b26e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b272:	d82c      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b278:	d02f      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b27a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b27e:	d826      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b280:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b284:	d02b      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b28a:	d820      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b28c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b290:	d012      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b296:	d81a      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d022      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b29c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a0:	d115      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f001 fc18 	bl	800cae0 <RCCEx_PLL2_Config>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b2b6:	e015      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2bc:	3328      	adds	r3, #40	; 0x28
 800b2be:	2102      	movs	r1, #2
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 fcbf 	bl	800cc44 <RCCEx_PLL3_Config>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b2cc:	e00a      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b2d4:	e006      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b2d6:	bf00      	nop
 800b2d8:	e004      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b2da:	bf00      	nop
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b2de:	bf00      	nop
 800b2e0:	e000      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b2ec:	4ba1      	ldr	r3, [pc, #644]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2fc:	4a9d      	ldr	r2, [pc, #628]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b2fe:	430b      	orrs	r3, r1
 800b300:	6593      	str	r3, [r2, #88]	; 0x58
 800b302:	e003      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f002 0308 	and.w	r3, r2, #8
 800b318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b31c:	2300      	movs	r3, #0
 800b31e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b322:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b326:	460b      	mov	r3, r1
 800b328:	4313      	orrs	r3, r2
 800b32a:	d01e      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b338:	d10c      	bne.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b33a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b33e:	3328      	adds	r3, #40	; 0x28
 800b340:	2102      	movs	r1, #2
 800b342:	4618      	mov	r0, r3
 800b344:	f001 fc7e 	bl	800cc44 <RCCEx_PLL3_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b354:	4b87      	ldr	r3, [pc, #540]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b358:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b364:	4a83      	ldr	r2, [pc, #524]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b366:	430b      	orrs	r3, r1
 800b368:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b36a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f002 0310 	and.w	r3, r2, #16
 800b376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b37a:	2300      	movs	r3, #0
 800b37c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b380:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b384:	460b      	mov	r3, r1
 800b386:	4313      	orrs	r3, r2
 800b388:	d01e      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b38e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b396:	d10c      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b39c:	3328      	adds	r3, #40	; 0x28
 800b39e:	2102      	movs	r1, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fc4f 	bl	800cc44 <RCCEx_PLL3_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3b2:	4b70      	ldr	r3, [pc, #448]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3c2:	4a6c      	ldr	r2, [pc, #432]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3c4:	430b      	orrs	r3, r1
 800b3c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b3d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	d03e      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f4:	d022      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3fa:	d81b      	bhi.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b404:	d00b      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b406:	e015      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b40c:	3308      	adds	r3, #8
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f001 fb65 	bl	800cae0 <RCCEx_PLL2_Config>
 800b416:	4603      	mov	r3, r0
 800b418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b41c:	e00f      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b422:	3328      	adds	r3, #40	; 0x28
 800b424:	2102      	movs	r1, #2
 800b426:	4618      	mov	r0, r3
 800b428:	f001 fc0c 	bl	800cc44 <RCCEx_PLL3_Config>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b432:	e004      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b43a:	e000      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b43e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10b      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b446:	4b4b      	ldr	r3, [pc, #300]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b456:	4a47      	ldr	r2, [pc, #284]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b458:	430b      	orrs	r3, r1
 800b45a:	6593      	str	r3, [r2, #88]	; 0x58
 800b45c:	e003      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b472:	67bb      	str	r3, [r7, #120]	; 0x78
 800b474:	2300      	movs	r3, #0
 800b476:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b478:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b47c:	460b      	mov	r3, r1
 800b47e:	4313      	orrs	r3, r2
 800b480:	d03b      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b48e:	d01f      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b494:	d818      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b49a:	d003      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b49c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4a0:	d007      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b4a2:	e011      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a4:	4b33      	ldr	r3, [pc, #204]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	4a32      	ldr	r2, [pc, #200]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b4b0:	e00f      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4b6:	3328      	adds	r3, #40	; 0x28
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 fbc2 	bl	800cc44 <RCCEx_PLL3_Config>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b4c6:	e004      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b4ce:	e000      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b4d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10b      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4da:	4b26      	ldr	r3, [pc, #152]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ea:	4a22      	ldr	r2, [pc, #136]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	6553      	str	r3, [r2, #84]	; 0x54
 800b4f0:	e003      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b506:	673b      	str	r3, [r7, #112]	; 0x70
 800b508:	2300      	movs	r3, #0
 800b50a:	677b      	str	r3, [r7, #116]	; 0x74
 800b50c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b510:	460b      	mov	r3, r1
 800b512:	4313      	orrs	r3, r2
 800b514:	d034      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b524:	d007      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b526:	e011      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	4a11      	ldr	r2, [pc, #68]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b534:	e00e      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b53a:	3308      	adds	r3, #8
 800b53c:	2102      	movs	r1, #2
 800b53e:	4618      	mov	r0, r3
 800b540:	f001 face 	bl	800cae0 <RCCEx_PLL2_Config>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b54a:	e003      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10d      	bne.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b55c:	4b05      	ldr	r3, [pc, #20]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b56a:	4a02      	ldr	r2, [pc, #8]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b56c:	430b      	orrs	r3, r1
 800b56e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b570:	e006      	b.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b572:	bf00      	nop
 800b574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b578:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b57c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b58c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b58e:	2300      	movs	r3, #0
 800b590:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b592:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b596:	460b      	mov	r3, r1
 800b598:	4313      	orrs	r3, r2
 800b59a:	d00c      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5a0:	3328      	adds	r3, #40	; 0x28
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fb4d 	bl	800cc44 <RCCEx_PLL3_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b5c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	667b      	str	r3, [r7, #100]	; 0x64
 800b5c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	d038      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5de:	d018      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b5e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e4:	d811      	bhi.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ea:	d014      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b5ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f0:	d80b      	bhi.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d011      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5fa:	d106      	bne.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5fc:	4bc3      	ldr	r3, [pc, #780]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4ac2      	ldr	r2, [pc, #776]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b608:	e008      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b610:	e004      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b612:	bf00      	nop
 800b614:	e002      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b616:	bf00      	nop
 800b618:	e000      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b61c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10b      	bne.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b624:	4bb9      	ldr	r3, [pc, #740]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b628:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b634:	4ab5      	ldr	r2, [pc, #724]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b636:	430b      	orrs	r3, r1
 800b638:	6553      	str	r3, [r2, #84]	; 0x54
 800b63a:	e003      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b63c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b640:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b650:	65bb      	str	r3, [r7, #88]	; 0x58
 800b652:	2300      	movs	r3, #0
 800b654:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b656:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b65a:	460b      	mov	r3, r1
 800b65c:	4313      	orrs	r3, r2
 800b65e:	d009      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b660:	4baa      	ldr	r3, [pc, #680]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66e:	4aa7      	ldr	r2, [pc, #668]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b670:	430b      	orrs	r3, r1
 800b672:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b680:	653b      	str	r3, [r7, #80]	; 0x50
 800b682:	2300      	movs	r3, #0
 800b684:	657b      	str	r3, [r7, #84]	; 0x54
 800b686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b68a:	460b      	mov	r3, r1
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d009      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b690:	4b9e      	ldr	r3, [pc, #632]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b694:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69e:	4a9b      	ldr	r2, [pc, #620]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6a0:	430b      	orrs	r3, r1
 800b6a2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b6b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	d009      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b6c0:	4b92      	ldr	r3, [pc, #584]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800b6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ce:	4a8f      	ldr	r2, [pc, #572]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6d0:	430b      	orrs	r3, r1
 800b6d2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b6e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b6e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	d00e      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b6f0:	4b86      	ldr	r3, [pc, #536]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	4a85      	ldr	r2, [pc, #532]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6fa:	6113      	str	r3, [r2, #16]
 800b6fc:	4b83      	ldr	r3, [pc, #524]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6fe:	6919      	ldr	r1, [r3, #16]
 800b700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b704:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b708:	4a80      	ldr	r2, [pc, #512]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b70a:	430b      	orrs	r3, r1
 800b70c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b70e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b71c:	2300      	movs	r3, #0
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b720:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b724:	460b      	mov	r3, r1
 800b726:	4313      	orrs	r3, r2
 800b728:	d009      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b72a:	4b78      	ldr	r3, [pc, #480]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b738:	4a74      	ldr	r2, [pc, #464]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b73a:	430b      	orrs	r3, r1
 800b73c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b73e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b74a:	633b      	str	r3, [r7, #48]	; 0x30
 800b74c:	2300      	movs	r3, #0
 800b74e:	637b      	str	r3, [r7, #52]	; 0x34
 800b750:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b754:	460b      	mov	r3, r1
 800b756:	4313      	orrs	r3, r2
 800b758:	d00a      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b75a:	4b6c      	ldr	r3, [pc, #432]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b75e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b76a:	4a68      	ldr	r2, [pc, #416]	; (800b90c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	2100      	movs	r1, #0
 800b77a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b782:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b786:	460b      	mov	r3, r1
 800b788:	4313      	orrs	r3, r2
 800b78a:	d011      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b790:	3308      	adds	r3, #8
 800b792:	2100      	movs	r1, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f001 f9a3 	bl	800cae0 <RCCEx_PLL2_Config>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800b7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	6239      	str	r1, [r7, #32]
 800b7bc:	f003 0302 	and.w	r3, r3, #2
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	d011      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d0:	3308      	adds	r3, #8
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 f983 	bl	800cae0 <RCCEx_PLL2_Config>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800b7e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	61b9      	str	r1, [r7, #24]
 800b7fc:	f003 0304 	and.w	r3, r3, #4
 800b800:	61fb      	str	r3, [r7, #28]
 800b802:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b806:	460b      	mov	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	d011      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b810:	3308      	adds	r3, #8
 800b812:	2102      	movs	r1, #2
 800b814:	4618      	mov	r0, r3
 800b816:	f001 f963 	bl	800cae0 <RCCEx_PLL2_Config>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800b820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b82c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	2100      	movs	r1, #0
 800b83a:	6139      	str	r1, [r7, #16]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b846:	460b      	mov	r3, r1
 800b848:	4313      	orrs	r3, r2
 800b84a:	d011      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b84c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b850:	3328      	adds	r3, #40	; 0x28
 800b852:	2100      	movs	r1, #0
 800b854:	4618      	mov	r0, r3
 800b856:	f001 f9f5 	bl	800cc44 <RCCEx_PLL3_Config>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800b860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b86c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	2100      	movs	r1, #0
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	f003 0310 	and.w	r3, r3, #16
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b886:	460b      	mov	r3, r1
 800b888:	4313      	orrs	r3, r2
 800b88a:	d011      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b890:	3328      	adds	r3, #40	; 0x28
 800b892:	2101      	movs	r1, #1
 800b894:	4618      	mov	r0, r3
 800b896:	f001 f9d5 	bl	800cc44 <RCCEx_PLL3_Config>
 800b89a:	4603      	mov	r3, r0
 800b89c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800b8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6039      	str	r1, [r7, #0]
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	607b      	str	r3, [r7, #4]
 800b8c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	d011      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8d0:	3328      	adds	r3, #40	; 0x28
 800b8d2:	2102      	movs	r1, #2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 f9b5 	bl	800cc44 <RCCEx_PLL3_Config>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800b8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800b8f0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e000      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b904:	46bd      	mov	sp, r7
 800b906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b90a:	bf00      	nop
 800b90c:	58024400 	.word	0x58024400

0800b910 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b090      	sub	sp, #64	; 0x40
 800b914:	af00      	add	r7, sp, #0
 800b916:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b91e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b922:	430b      	orrs	r3, r1
 800b924:	f040 8094 	bne.w	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b928:	4b97      	ldr	r3, [pc, #604]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	2b04      	cmp	r3, #4
 800b936:	f200 8087 	bhi.w	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b955 	.word	0x0800b955
 800b944:	0800b97d 	.word	0x0800b97d
 800b948:	0800b9a5 	.word	0x0800b9a5
 800b94c:	0800ba41 	.word	0x0800ba41
 800b950:	0800b9cd 	.word	0x0800b9cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b954:	4b8c      	ldr	r3, [pc, #560]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b960:	d108      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b966:	4618      	mov	r0, r3
 800b968:	f000 ff68 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b970:	f000 bc97 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b978:	f000 bc93 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b97c:	4b82      	ldr	r3, [pc, #520]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b988:	d108      	bne.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b98a:	f107 0318 	add.w	r3, r7, #24
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fcac 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b998:	f000 bc83 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a0:	f000 bc7f 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9a4:	4b78      	ldr	r3, [pc, #480]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b0:	d108      	bne.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9b2:	f107 030c 	add.w	r3, r7, #12
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fdec 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9c0:	f000 bc6f 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c8:	f000 bc6b 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9cc:	4b6e      	ldr	r3, [pc, #440]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9d6:	4b6c      	ldr	r3, [pc, #432]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d10c      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d109      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9e8:	4b67      	ldr	r3, [pc, #412]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	08db      	lsrs	r3, r3, #3
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	4a66      	ldr	r2, [pc, #408]	; (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fa:	e01f      	b.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9fc:	4b62      	ldr	r3, [pc, #392]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba08:	d106      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba10:	d102      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba12:	4b5f      	ldr	r3, [pc, #380]	; (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ba14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba16:	e011      	b.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba18:	4b5b      	ldr	r3, [pc, #364]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba24:	d106      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ba26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba2c:	d102      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba2e:	4b59      	ldr	r3, [pc, #356]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba32:	e003      	b.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ba38:	f000 bc33 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ba3c:	f000 bc31 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba40:	4b55      	ldr	r3, [pc, #340]	; (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba44:	f000 bc2d 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba4c:	f000 bc29 	b.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800ba50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba54:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ba58:	430b      	orrs	r3, r1
 800ba5a:	f040 809f 	bne.w	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800ba5e:	4b4a      	ldr	r3, [pc, #296]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ba60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ba66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6e:	d04d      	beq.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba76:	f200 8084 	bhi.w	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	2bc0      	cmp	r3, #192	; 0xc0
 800ba7e:	d07d      	beq.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	2bc0      	cmp	r3, #192	; 0xc0
 800ba84:	d87d      	bhi.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	2b80      	cmp	r3, #128	; 0x80
 800ba8a:	d02d      	beq.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	2b80      	cmp	r3, #128	; 0x80
 800ba90:	d877      	bhi.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	d012      	beq.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800ba9e:	e070      	b.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800baa0:	4b39      	ldr	r3, [pc, #228]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baac:	d107      	bne.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fec2 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800babc:	e3f1      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac2:	e3ee      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bac4:	4b30      	ldr	r3, [pc, #192]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bacc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bad0:	d107      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bad2:	f107 0318 	add.w	r3, r7, #24
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 fc08 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae0:	e3df      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae6:	e3dc      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bae8:	4b27      	ldr	r3, [pc, #156]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baf4:	d107      	bne.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baf6:	f107 030c 	add.w	r3, r7, #12
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fd4a 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb04:	e3cd      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0a:	e3ca      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb0c:	4b1e      	ldr	r3, [pc, #120]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb16:	4b1c      	ldr	r3, [pc, #112]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0304 	and.w	r3, r3, #4
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d10c      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800bb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d109      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb28:	4b17      	ldr	r3, [pc, #92]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	08db      	lsrs	r3, r3, #3
 800bb2e:	f003 0303 	and.w	r3, r3, #3
 800bb32:	4a16      	ldr	r2, [pc, #88]	; (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bb34:	fa22 f303 	lsr.w	r3, r2, r3
 800bb38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb3a:	e01e      	b.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb3c:	4b12      	ldr	r3, [pc, #72]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb48:	d106      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb50:	d102      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb52:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb56:	e010      	b.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb58:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb64:	d106      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb6c:	d102      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800bb70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb72:	e002      	b.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb78:	e393      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800bb7a:	e392      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb7c:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb80:	e38f      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb86:	e38c      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800bb88:	58024400 	.word	0x58024400
 800bb8c:	03d09000 	.word	0x03d09000
 800bb90:	003d0900 	.word	0x003d0900
 800bb94:	016e3600 	.word	0x016e3600
 800bb98:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800bb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bba0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bba4:	430b      	orrs	r3, r1
 800bba6:	f040 809c 	bne.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800bbaa:	4b9e      	ldr	r3, [pc, #632]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbae:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800bbb2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbba:	d054      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbc2:	f200 808b 	bhi.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bbcc:	f000 8083 	beq.w	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bbd6:	f200 8081 	bhi.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbe0:	d02f      	beq.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbe8:	d878      	bhi.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf6:	d012      	beq.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800bbf8:	e070      	b.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbfa:	4b8a      	ldr	r3, [pc, #552]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc06:	d107      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fe15 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc16:	e344      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc1c:	e341      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc1e:	4b81      	ldr	r3, [pc, #516]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc2a:	d107      	bne.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc2c:	f107 0318 	add.w	r3, r7, #24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fb5b 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc3a:	e332      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc40:	e32f      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc42:	4b78      	ldr	r3, [pc, #480]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc4e:	d107      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 fc9d 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5e:	e320      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc64:	e31d      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc66:	4b6f      	ldr	r3, [pc, #444]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc70:	4b6c      	ldr	r3, [pc, #432]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b04      	cmp	r3, #4
 800bc7a:	d10c      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d109      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc82:	4b68      	ldr	r3, [pc, #416]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	08db      	lsrs	r3, r3, #3
 800bc88:	f003 0303 	and.w	r3, r3, #3
 800bc8c:	4a66      	ldr	r2, [pc, #408]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800bc8e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc94:	e01e      	b.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc96:	4b63      	ldr	r3, [pc, #396]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca2:	d106      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcaa:	d102      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcac:	4b5f      	ldr	r3, [pc, #380]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb0:	e010      	b.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcb2:	4b5c      	ldr	r3, [pc, #368]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcbe:	d106      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc6:	d102      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcc8:	4b59      	ldr	r3, [pc, #356]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bccc:	e002      	b.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800bcd2:	e2e6      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800bcd4:	e2e5      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcd6:	4b57      	ldr	r3, [pc, #348]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcda:	e2e2      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce0:	e2df      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bcea:	430b      	orrs	r3, r1
 800bcec:	f040 80a7 	bne.w	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bcf0:	4b4c      	ldr	r3, [pc, #304]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bcf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bcf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd00:	d055      	beq.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd08:	f200 8096 	bhi.w	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd12:	f000 8084 	beq.w	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800bd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd1c:	f200 808c 	bhi.w	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd26:	d030      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd2e:	f200 8083 	bhi.w	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd3e:	d012      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800bd40:	e07a      	b.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd42:	4b38      	ldr	r3, [pc, #224]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fd71 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5e:	e2a0      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd64:	e29d      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd66:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd72:	d107      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd74:	f107 0318 	add.w	r3, r7, #24
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fab7 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd82:	e28e      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd88:	e28b      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd8a:	4b26      	ldr	r3, [pc, #152]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd96:	d107      	bne.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fbf9 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bda6:	e27c      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdac:	e279      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdae:	4b1d      	ldr	r3, [pc, #116]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdb8:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b04      	cmp	r3, #4
 800bdc2:	d10c      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d109      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdca:	4b16      	ldr	r3, [pc, #88]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	08db      	lsrs	r3, r3, #3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	4a14      	ldr	r2, [pc, #80]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800bdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bddc:	e01e      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdde:	4b11      	ldr	r3, [pc, #68]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdea:	d106      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdf2:	d102      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf8:	e010      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be06:	d106      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0e:	d102      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be10:	4b07      	ldr	r3, [pc, #28]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be14:	e002      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be1a:	e242      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800be1c:	e241      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be1e:	4b05      	ldr	r3, [pc, #20]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be22:	e23e      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800be24:	58024400 	.word	0x58024400
 800be28:	03d09000 	.word	0x03d09000
 800be2c:	003d0900 	.word	0x003d0900
 800be30:	016e3600 	.word	0x016e3600
 800be34:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be3c:	e231      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800be3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be42:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800be46:	430b      	orrs	r3, r1
 800be48:	f040 8085 	bne.w	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800be4c:	4b9c      	ldr	r3, [pc, #624]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800be4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be50:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800be54:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be5c:	d06b      	beq.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800be5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be64:	d874      	bhi.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be6c:	d056      	beq.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be74:	d86c      	bhi.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be7c:	d03b      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be84:	d864      	bhi.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be8c:	d021      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be94:	d85c      	bhi.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800be96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea2:	d004      	beq.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800bea4:	e054      	b.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bea6:	f7fe fb49 	bl	800a53c <HAL_RCC_GetPCLK1Freq>
 800beaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800beac:	e1f9      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800beae:	4b84      	ldr	r3, [pc, #528]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beba:	d107      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bebc:	f107 0318 	add.w	r3, r7, #24
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fa13 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beca:	e1ea      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed0:	e1e7      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bed2:	4b7b      	ldr	r3, [pc, #492]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bede:	d107      	bne.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bee0:	f107 030c 	add.w	r3, r7, #12
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 fb55 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beee:	e1d8      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef4:	e1d5      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bef6:	4b72      	ldr	r3, [pc, #456]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d109      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf02:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	08db      	lsrs	r3, r3, #3
 800bf08:	f003 0303 	and.w	r3, r3, #3
 800bf0c:	4a6d      	ldr	r2, [pc, #436]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf14:	e1c5      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf1a:	e1c2      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf1c:	4b68      	ldr	r3, [pc, #416]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf28:	d102      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800bf2a:	4b67      	ldr	r3, [pc, #412]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf2e:	e1b8      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf34:	e1b5      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf36:	4b62      	ldr	r3, [pc, #392]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf42:	d102      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800bf44:	4b61      	ldr	r3, [pc, #388]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf48:	e1ab      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4e:	e1a8      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf54:	e1a5      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bf56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf5a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	d173      	bne.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf62:	4b57      	ldr	r3, [pc, #348]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf6a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf72:	d02f      	beq.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf7a:	d863      	bhi.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d004      	beq.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf88:	d012      	beq.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800bf8a:	e05b      	b.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf8c:	4b4c      	ldr	r3, [pc, #304]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf98:	d107      	bne.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf9a:	f107 0318 	add.w	r3, r7, #24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 f9a4 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa8:	e17b      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfae:	e178      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfb0:	4b43      	ldr	r3, [pc, #268]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfbc:	d107      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfbe:	f107 030c 	add.w	r3, r7, #12
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 fae6 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfcc:	e169      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd2:	e166      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfd4:	4b3a      	ldr	r3, [pc, #232]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bfd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfdc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfde:	4b38      	ldr	r3, [pc, #224]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	2b04      	cmp	r3, #4
 800bfe8:	d10c      	bne.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d109      	bne.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bff0:	4b33      	ldr	r3, [pc, #204]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	08db      	lsrs	r3, r3, #3
 800bff6:	f003 0303 	and.w	r3, r3, #3
 800bffa:	4a32      	ldr	r2, [pc, #200]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bffc:	fa22 f303 	lsr.w	r3, r2, r3
 800c000:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c002:	e01e      	b.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c004:	4b2e      	ldr	r3, [pc, #184]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c00c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c010:	d106      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800c012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c018:	d102      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c01a:	4b2b      	ldr	r3, [pc, #172]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01e:	e010      	b.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c020:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c02c:	d106      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c034:	d102      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c036:	4b25      	ldr	r3, [pc, #148]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c03a:	e002      	b.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c040:	e12f      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800c042:	e12e      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	e12b      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c052:	430b      	orrs	r3, r1
 800c054:	d13c      	bne.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c056:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c05a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	2b00      	cmp	r3, #0
 800c064:	d004      	beq.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800c066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	d012      	beq.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800c06e:	e023      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c07c:	d107      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fbda 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08c:	e109      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c08e:	2300      	movs	r3, #0
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c092:	e106      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c09c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0a0:	d107      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0a2:	f107 0318 	add.w	r3, r7, #24
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f920 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b0:	e0f7      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b6:	e0f4      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0bc:	e0f1      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800c0be:	bf00      	nop
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	003d0900 	.word	0x003d0900
 800c0cc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c0d8:	430b      	orrs	r3, r1
 800c0da:	f040 8091 	bne.w	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c0de:	4b73      	ldr	r3, [pc, #460]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c0e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c0ee:	f000 8081 	beq.w	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c0f8:	d87f      	bhi.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c100:	d06b      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c108:	d877      	bhi.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c110:	d056      	beq.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c118:	d86f      	bhi.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c120:	d03b      	beq.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c128:	d867      	bhi.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c130:	d021      	beq.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c138:	d85f      	bhi.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d004      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c146:	d004      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800c148:	e057      	b.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c14a:	f000 f8b9 	bl	800c2c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c14e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c150:	e0a7      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c152:	4b56      	ldr	r3, [pc, #344]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c15e:	d107      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c160:	f107 0318 	add.w	r3, r7, #24
 800c164:	4618      	mov	r0, r3
 800c166:	f000 f8c1 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16e:	e098      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	e095      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c176:	4b4d      	ldr	r3, [pc, #308]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c182:	d107      	bne.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fa03 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c192:	e086      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c198:	e083      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c19a:	4b44      	ldr	r3, [pc, #272]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0304 	and.w	r3, r3, #4
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d109      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1a6:	4b41      	ldr	r3, [pc, #260]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	08db      	lsrs	r3, r3, #3
 800c1ac:	f003 0303 	and.w	r3, r3, #3
 800c1b0:	4a3f      	ldr	r2, [pc, #252]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b8:	e073      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1be:	e070      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1c0:	4b3a      	ldr	r3, [pc, #232]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1cc:	d102      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800c1ce:	4b39      	ldr	r3, [pc, #228]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d2:	e066      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e063      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1da:	4b34      	ldr	r3, [pc, #208]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e6:	d102      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800c1e8:	4b33      	ldr	r3, [pc, #204]	; (800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ec:	e059      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	e056      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1f4:	4b31      	ldr	r3, [pc, #196]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f8:	e053      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fe:	e050      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c204:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c208:	430b      	orrs	r3, r1
 800c20a:	d148      	bne.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c20c:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c214:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c21c:	d02a      	beq.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c224:	d838      	bhi.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c232:	d00d      	beq.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800c234:	e030      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c236:	4b1d      	ldr	r3, [pc, #116]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c242:	d102      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800c244:	4b1c      	ldr	r3, [pc, #112]	; (800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c248:	e02b      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24e:	e028      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c250:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c25c:	d107      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c262:	4618      	mov	r0, r3
 800c264:	f000 faea 	bl	800c83c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c26c:	e019      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c272:	e016      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c274:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c27c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c280:	d107      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c282:	f107 0318 	add.w	r3, r7, #24
 800c286:	4618      	mov	r0, r3
 800c288:	f000 f830 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c290:	e007      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c296:	e004      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29c:	e001      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3740      	adds	r7, #64	; 0x40
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	58024400 	.word	0x58024400
 800c2b0:	03d09000 	.word	0x03d09000
 800c2b4:	003d0900 	.word	0x003d0900
 800c2b8:	016e3600 	.word	0x016e3600
 800c2bc:	00bb8000 	.word	0x00bb8000

0800c2c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c2c4:	f7fe f90a 	bl	800a4dc <HAL_RCC_GetHCLKFreq>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	4b06      	ldr	r3, [pc, #24]	; (800c2e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	091b      	lsrs	r3, r3, #4
 800c2d0:	f003 0307 	and.w	r3, r3, #7
 800c2d4:	4904      	ldr	r1, [pc, #16]	; (800c2e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c2d6:	5ccb      	ldrb	r3, [r1, r3]
 800c2d8:	f003 031f 	and.w	r3, r3, #31
 800c2dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	58024400 	.word	0x58024400
 800c2e8:	080177c8 	.word	0x080177c8

0800c2ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b089      	sub	sp, #36	; 0x24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2f4:	4ba1      	ldr	r3, [pc, #644]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f8:	f003 0303 	and.w	r3, r3, #3
 800c2fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c2fe:	4b9f      	ldr	r3, [pc, #636]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c302:	0b1b      	lsrs	r3, r3, #12
 800c304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c308:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c30a:	4b9c      	ldr	r3, [pc, #624]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	091b      	lsrs	r3, r3, #4
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c316:	4b99      	ldr	r3, [pc, #612]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31a:	08db      	lsrs	r3, r3, #3
 800c31c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 8111 	beq.w	800c55c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	f000 8083 	beq.w	800c448 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b02      	cmp	r3, #2
 800c346:	f200 80a1 	bhi.w	800c48c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d003      	beq.n	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d056      	beq.n	800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c356:	e099      	b.n	800c48c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c358:	4b88      	ldr	r3, [pc, #544]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0320 	and.w	r3, r3, #32
 800c360:	2b00      	cmp	r3, #0
 800c362:	d02d      	beq.n	800c3c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c364:	4b85      	ldr	r3, [pc, #532]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	08db      	lsrs	r3, r3, #3
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	4a84      	ldr	r2, [pc, #528]	; (800c580 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c370:	fa22 f303 	lsr.w	r3, r2, r3
 800c374:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	ee07 3a90 	vmov	s15, r3
 800c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38e:	4b7b      	ldr	r3, [pc, #492]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3be:	e087      	b.n	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c588 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d2:	4b6a      	ldr	r3, [pc, #424]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c402:	e065      	b.n	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c416:	4b59      	ldr	r3, [pc, #356]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c426:	ed97 6a03 	vldr	s12, [r7, #12]
 800c42a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c446:	e043      	b.n	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c452:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c45a:	4b48      	ldr	r3, [pc, #288]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c46a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c46e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c47a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c48a:	e021      	b.n	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c496:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c49e:	4b37      	ldr	r3, [pc, #220]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a6:	ee07 3a90 	vmov	s15, r3
 800c4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c4d0:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d4:	0a5b      	lsrs	r3, r3, #9
 800c4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f6:	ee17 2a90 	vmov	r2, s15
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c4fe:	4b1f      	ldr	r3, [pc, #124]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c502:	0c1b      	lsrs	r3, r3, #16
 800c504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c508:	ee07 3a90 	vmov	s15, r3
 800c50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c514:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c518:	edd7 6a07 	vldr	s13, [r7, #28]
 800c51c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c524:	ee17 2a90 	vmov	r2, s15
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c52c:	4b13      	ldr	r3, [pc, #76]	; (800c57c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c530:	0e1b      	lsrs	r3, r3, #24
 800c532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c542:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c546:	edd7 6a07 	vldr	s13, [r7, #28]
 800c54a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c552:	ee17 2a90 	vmov	r2, s15
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c55a:	e008      	b.n	800c56e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	609a      	str	r2, [r3, #8]
}
 800c56e:	bf00      	nop
 800c570:	3724      	adds	r7, #36	; 0x24
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	58024400 	.word	0x58024400
 800c580:	03d09000 	.word	0x03d09000
 800c584:	46000000 	.word	0x46000000
 800c588:	4c742400 	.word	0x4c742400
 800c58c:	4a742400 	.word	0x4a742400
 800c590:	4bb71b00 	.word	0x4bb71b00

0800c594 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c594:	b480      	push	{r7}
 800c596:	b089      	sub	sp, #36	; 0x24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c59c:	4ba1      	ldr	r3, [pc, #644]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a0:	f003 0303 	and.w	r3, r3, #3
 800c5a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c5a6:	4b9f      	ldr	r3, [pc, #636]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5aa:	0d1b      	lsrs	r3, r3, #20
 800c5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c5b2:	4b9c      	ldr	r3, [pc, #624]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b6:	0a1b      	lsrs	r3, r3, #8
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c5be:	4b99      	ldr	r3, [pc, #612]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c2:	08db      	lsrs	r3, r3, #3
 800c5c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	fb02 f303 	mul.w	r3, r2, r3
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8111 	beq.w	800c804 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	f000 8083 	beq.w	800c6f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	f200 80a1 	bhi.w	800c734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d056      	beq.n	800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c5fe:	e099      	b.n	800c734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c600:	4b88      	ldr	r3, [pc, #544]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d02d      	beq.n	800c668 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c60c:	4b85      	ldr	r3, [pc, #532]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	08db      	lsrs	r3, r3, #3
 800c612:	f003 0303 	and.w	r3, r3, #3
 800c616:	4a84      	ldr	r2, [pc, #528]	; (800c828 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c618:	fa22 f303 	lsr.w	r3, r2, r3
 800c61c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	ee07 3a90 	vmov	s15, r3
 800c624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	ee07 3a90 	vmov	s15, r3
 800c62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c636:	4b7b      	ldr	r3, [pc, #492]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c646:	ed97 6a03 	vldr	s12, [r7, #12]
 800c64a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c666:	e087      	b.n	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	ee07 3a90 	vmov	s15, r3
 800c66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c830 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c67a:	4b6a      	ldr	r3, [pc, #424]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c68e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6aa:	e065      	b.n	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	ee07 3a90 	vmov	s15, r3
 800c6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6be:	4b59      	ldr	r3, [pc, #356]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ee:	e043      	b.n	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	ee07 3a90 	vmov	s15, r3
 800c6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c702:	4b48      	ldr	r3, [pc, #288]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70a:	ee07 3a90 	vmov	s15, r3
 800c70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c712:	ed97 6a03 	vldr	s12, [r7, #12]
 800c716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c732:	e021      	b.n	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	ee07 3a90 	vmov	s15, r3
 800c73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c746:	4b37      	ldr	r3, [pc, #220]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c756:	ed97 6a03 	vldr	s12, [r7, #12]
 800c75a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c776:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c778:	4b2a      	ldr	r3, [pc, #168]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77c:	0a5b      	lsrs	r3, r3, #9
 800c77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c78e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c792:	edd7 6a07 	vldr	s13, [r7, #28]
 800c796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79e:	ee17 2a90 	vmov	r2, s15
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c7a6:	4b1f      	ldr	r3, [pc, #124]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	0c1b      	lsrs	r3, r3, #16
 800c7ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b0:	ee07 3a90 	vmov	s15, r3
 800c7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7cc:	ee17 2a90 	vmov	r2, s15
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c7d4:	4b13      	ldr	r3, [pc, #76]	; (800c824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	0e1b      	lsrs	r3, r3, #24
 800c7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7de:	ee07 3a90 	vmov	s15, r3
 800c7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fa:	ee17 2a90 	vmov	r2, s15
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c802:	e008      	b.n	800c816 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	609a      	str	r2, [r3, #8]
}
 800c816:	bf00      	nop
 800c818:	3724      	adds	r7, #36	; 0x24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	58024400 	.word	0x58024400
 800c828:	03d09000 	.word	0x03d09000
 800c82c:	46000000 	.word	0x46000000
 800c830:	4c742400 	.word	0x4c742400
 800c834:	4a742400 	.word	0x4a742400
 800c838:	4bb71b00 	.word	0x4bb71b00

0800c83c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b089      	sub	sp, #36	; 0x24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c844:	4ba0      	ldr	r3, [pc, #640]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	f003 0303 	and.w	r3, r3, #3
 800c84c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c84e:	4b9e      	ldr	r3, [pc, #632]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c852:	091b      	lsrs	r3, r3, #4
 800c854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c858:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c85a:	4b9b      	ldr	r3, [pc, #620]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c864:	4b98      	ldr	r3, [pc, #608]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c868:	08db      	lsrs	r3, r3, #3
 800c86a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	fb02 f303 	mul.w	r3, r2, r3
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 8111 	beq.w	800caaa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	f000 8083 	beq.w	800c996 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2b02      	cmp	r3, #2
 800c894:	f200 80a1 	bhi.w	800c9da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d056      	beq.n	800c952 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c8a4:	e099      	b.n	800c9da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8a6:	4b88      	ldr	r3, [pc, #544]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f003 0320 	and.w	r3, r3, #32
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d02d      	beq.n	800c90e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8b2:	4b85      	ldr	r3, [pc, #532]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	08db      	lsrs	r3, r3, #3
 800c8b8:	f003 0303 	and.w	r3, r3, #3
 800c8bc:	4a83      	ldr	r2, [pc, #524]	; (800cacc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c8be:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	ee07 3a90 	vmov	s15, r3
 800c8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8dc:	4b7a      	ldr	r3, [pc, #488]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e4:	ee07 3a90 	vmov	s15, r3
 800c8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c904:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c908:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c90c:	e087      	b.n	800ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	ee07 3a90 	vmov	s15, r3
 800c914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c918:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cad4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c91c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c920:	4b69      	ldr	r3, [pc, #420]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c930:	ed97 6a03 	vldr	s12, [r7, #12]
 800c934:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c93c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c94c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c950:	e065      	b.n	800ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	ee07 3a90 	vmov	s15, r3
 800c958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cad8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c964:	4b58      	ldr	r3, [pc, #352]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96c:	ee07 3a90 	vmov	s15, r3
 800c970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c974:	ed97 6a03 	vldr	s12, [r7, #12]
 800c978:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c97c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c994:	e043      	b.n	800ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	ee07 3a90 	vmov	s15, r3
 800c99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cadc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c9a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a8:	4b47      	ldr	r3, [pc, #284]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b0:	ee07 3a90 	vmov	s15, r3
 800c9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c9c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9d8:	e021      	b.n	800ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	ee07 3a90 	vmov	s15, r3
 800c9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cad4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c9e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ec:	4b36      	ldr	r3, [pc, #216]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f4:	ee07 3a90 	vmov	s15, r3
 800c9f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca00:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca1e:	4b2a      	ldr	r3, [pc, #168]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca22:	0a5b      	lsrs	r3, r3, #9
 800ca24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca44:	ee17 2a90 	vmov	r2, s15
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ca4c:	4b1e      	ldr	r3, [pc, #120]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca50:	0c1b      	lsrs	r3, r3, #16
 800ca52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca72:	ee17 2a90 	vmov	r2, s15
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca7a:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	0e1b      	lsrs	r3, r3, #24
 800ca80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca84:	ee07 3a90 	vmov	s15, r3
 800ca88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa0:	ee17 2a90 	vmov	r2, s15
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800caa8:	e008      	b.n	800cabc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	609a      	str	r2, [r3, #8]
}
 800cabc:	bf00      	nop
 800cabe:	3724      	adds	r7, #36	; 0x24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	58024400 	.word	0x58024400
 800cacc:	03d09000 	.word	0x03d09000
 800cad0:	46000000 	.word	0x46000000
 800cad4:	4c742400 	.word	0x4c742400
 800cad8:	4a742400 	.word	0x4a742400
 800cadc:	4bb71b00 	.word	0x4bb71b00

0800cae0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800caee:	4b53      	ldr	r3, [pc, #332]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf2:	f003 0303 	and.w	r3, r3, #3
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d101      	bne.n	800cafe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e099      	b.n	800cc32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cafe:	4b4f      	ldr	r3, [pc, #316]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a4e      	ldr	r2, [pc, #312]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb0a:	f7f7 fa7b 	bl	8004004 <HAL_GetTick>
 800cb0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb10:	e008      	b.n	800cb24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb12:	f7f7 fa77 	bl	8004004 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d901      	bls.n	800cb24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e086      	b.n	800cc32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb24:	4b45      	ldr	r3, [pc, #276]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1f0      	bne.n	800cb12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb30:	4b42      	ldr	r3, [pc, #264]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	031b      	lsls	r3, r3, #12
 800cb3e:	493f      	ldr	r1, [pc, #252]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb40:	4313      	orrs	r3, r2
 800cb42:	628b      	str	r3, [r1, #40]	; 0x28
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	025b      	lsls	r3, r3, #9
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	041b      	lsls	r3, r3, #16
 800cb62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb66:	431a      	orrs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	061b      	lsls	r3, r3, #24
 800cb70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb74:	4931      	ldr	r1, [pc, #196]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cb7a:	4b30      	ldr	r3, [pc, #192]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	492d      	ldr	r1, [pc, #180]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb8c:	4b2b      	ldr	r3, [pc, #172]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb90:	f023 0220 	bic.w	r2, r3, #32
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	4928      	ldr	r1, [pc, #160]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb9e:	4b27      	ldr	r3, [pc, #156]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba2:	4a26      	ldr	r2, [pc, #152]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cba4:	f023 0310 	bic.w	r3, r3, #16
 800cba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cbaa:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbae:	4b24      	ldr	r3, [pc, #144]	; (800cc40 <RCCEx_PLL2_Config+0x160>)
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	69d2      	ldr	r2, [r2, #28]
 800cbb6:	00d2      	lsls	r2, r2, #3
 800cbb8:	4920      	ldr	r1, [pc, #128]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cbbe:	4b1f      	ldr	r3, [pc, #124]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	4a1e      	ldr	r2, [pc, #120]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbc4:	f043 0310 	orr.w	r3, r3, #16
 800cbc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cbd0:	4b1a      	ldr	r3, [pc, #104]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbdc:	e00f      	b.n	800cbfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d106      	bne.n	800cbf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cbe4:	4b15      	ldr	r3, [pc, #84]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	4a14      	ldr	r2, [pc, #80]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbf0:	e005      	b.n	800cbfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	4a11      	ldr	r2, [pc, #68]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cbf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cbfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a0e      	ldr	r2, [pc, #56]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cc04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc0a:	f7f7 f9fb 	bl	8004004 <HAL_GetTick>
 800cc0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc10:	e008      	b.n	800cc24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc12:	f7f7 f9f7 	bl	8004004 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d901      	bls.n	800cc24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e006      	b.n	800cc32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc24:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <RCCEx_PLL2_Config+0x15c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d0f0      	beq.n	800cc12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	58024400 	.word	0x58024400
 800cc40:	ffff0007 	.word	0xffff0007

0800cc44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc52:	4b53      	ldr	r3, [pc, #332]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc56:	f003 0303 	and.w	r3, r3, #3
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d101      	bne.n	800cc62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e099      	b.n	800cd96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cc62:	4b4f      	ldr	r3, [pc, #316]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a4e      	ldr	r2, [pc, #312]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cc68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6e:	f7f7 f9c9 	bl	8004004 <HAL_GetTick>
 800cc72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc74:	e008      	b.n	800cc88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cc76:	f7f7 f9c5 	bl	8004004 <HAL_GetTick>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d901      	bls.n	800cc88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc84:	2303      	movs	r3, #3
 800cc86:	e086      	b.n	800cd96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc88:	4b45      	ldr	r3, [pc, #276]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1f0      	bne.n	800cc76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc94:	4b42      	ldr	r3, [pc, #264]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	051b      	lsls	r3, r3, #20
 800cca2:	493f      	ldr	r1, [pc, #252]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cca4:	4313      	orrs	r3, r2
 800cca6:	628b      	str	r3, [r1, #40]	; 0x28
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	025b      	lsls	r3, r3, #9
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	041b      	lsls	r3, r3, #16
 800ccc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccca:	431a      	orrs	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	061b      	lsls	r3, r3, #24
 800ccd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccd8:	4931      	ldr	r1, [pc, #196]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ccde:	4b30      	ldr	r3, [pc, #192]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	492d      	ldr	r1, [pc, #180]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800ccec:	4313      	orrs	r3, r2
 800ccee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ccf0:	4b2b      	ldr	r3, [pc, #172]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	4928      	ldr	r1, [pc, #160]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd06:	4a26      	ldr	r2, [pc, #152]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd0e:	4b24      	ldr	r3, [pc, #144]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd12:	4b24      	ldr	r3, [pc, #144]	; (800cda4 <RCCEx_PLL3_Config+0x160>)
 800cd14:	4013      	ands	r3, r2
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	69d2      	ldr	r2, [r2, #28]
 800cd1a:	00d2      	lsls	r2, r2, #3
 800cd1c:	4920      	ldr	r1, [pc, #128]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd22:	4b1f      	ldr	r3, [pc, #124]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	4a1e      	ldr	r2, [pc, #120]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d106      	bne.n	800cd42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd34:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	4a19      	ldr	r2, [pc, #100]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd40:	e00f      	b.n	800cd62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d106      	bne.n	800cd56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	4a14      	ldr	r2, [pc, #80]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd54:	e005      	b.n	800cd62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cd56:	4b12      	ldr	r3, [pc, #72]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	4a11      	ldr	r2, [pc, #68]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cd62:	4b0f      	ldr	r3, [pc, #60]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a0e      	ldr	r2, [pc, #56]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd6e:	f7f7 f949 	bl	8004004 <HAL_GetTick>
 800cd72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd74:	e008      	b.n	800cd88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cd76:	f7f7 f945 	bl	8004004 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d901      	bls.n	800cd88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd84:	2303      	movs	r3, #3
 800cd86:	e006      	b.n	800cd96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd88:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <RCCEx_PLL3_Config+0x15c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d0f0      	beq.n	800cd76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	58024400 	.word	0x58024400
 800cda4:	ffff0007 	.word	0xffff0007

0800cda8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e10f      	b.n	800cfda <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a87      	ldr	r2, [pc, #540]	; (800cfe4 <HAL_SPI_Init+0x23c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00f      	beq.n	800cdea <HAL_SPI_Init+0x42>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a86      	ldr	r2, [pc, #536]	; (800cfe8 <HAL_SPI_Init+0x240>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d00a      	beq.n	800cdea <HAL_SPI_Init+0x42>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a84      	ldr	r2, [pc, #528]	; (800cfec <HAL_SPI_Init+0x244>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d005      	beq.n	800cdea <HAL_SPI_Init+0x42>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	2b0f      	cmp	r3, #15
 800cde4:	d901      	bls.n	800cdea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e0f7      	b.n	800cfda <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fde6 	bl	800d9bc <SPI_GetPacketSize>
 800cdf0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a7b      	ldr	r2, [pc, #492]	; (800cfe4 <HAL_SPI_Init+0x23c>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d00c      	beq.n	800ce16 <HAL_SPI_Init+0x6e>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a79      	ldr	r2, [pc, #484]	; (800cfe8 <HAL_SPI_Init+0x240>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d007      	beq.n	800ce16 <HAL_SPI_Init+0x6e>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a78      	ldr	r2, [pc, #480]	; (800cfec <HAL_SPI_Init+0x244>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d002      	beq.n	800ce16 <HAL_SPI_Init+0x6e>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	d811      	bhi.n	800ce3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce1a:	4a72      	ldr	r2, [pc, #456]	; (800cfe4 <HAL_SPI_Init+0x23c>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d009      	beq.n	800ce34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a70      	ldr	r2, [pc, #448]	; (800cfe8 <HAL_SPI_Init+0x240>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d004      	beq.n	800ce34 <HAL_SPI_Init+0x8c>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a6f      	ldr	r2, [pc, #444]	; (800cfec <HAL_SPI_Init+0x244>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d104      	bne.n	800ce3e <HAL_SPI_Init+0x96>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b10      	cmp	r3, #16
 800ce38:	d901      	bls.n	800ce3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e0cd      	b.n	800cfda <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d106      	bne.n	800ce58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7f6 fb6e 	bl	8003534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0201 	bic.w	r2, r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ce7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce84:	d119      	bne.n	800ceba <HAL_SPI_Init+0x112>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce8e:	d103      	bne.n	800ce98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d008      	beq.n	800ceaa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10c      	bne.n	800ceba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cea8:	d107      	bne.n	800ceba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ceb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00f      	beq.n	800cee6 <HAL_SPI_Init+0x13e>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	2b06      	cmp	r3, #6
 800cecc:	d90b      	bls.n	800cee6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	e007      	b.n	800cef6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cef4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	69da      	ldr	r2, [r3, #28]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefe:	431a      	orrs	r2, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf08:	ea42 0103 	orr.w	r1, r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68da      	ldr	r2, [r3, #12]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	430a      	orrs	r2, r1
 800cf16:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	431a      	orrs	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	431a      	orrs	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	431a      	orrs	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf56:	ea42 0103 	orr.w	r1, r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d113      	bne.n	800cf96 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf80:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf94:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0201 	bic.w	r2, r2, #1
 800cfa4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	40013000 	.word	0x40013000
 800cfe8:	40003800 	.word	0x40003800
 800cfec:	40003c00 	.word	0x40003c00

0800cff0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	; 0x28
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	603b      	str	r3, [r7, #0]
 800cffc:	4613      	mov	r3, r2
 800cffe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3320      	adds	r3, #32
 800d006:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <HAL_SPI_Transmit+0x2a>
 800d016:	2302      	movs	r3, #2
 800d018:	e1e1      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d022:	f7f6 ffef 	bl	8004004 <HAL_GetTick>
 800d026:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b01      	cmp	r3, #1
 800d032:	d007      	beq.n	800d044 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d034:	2302      	movs	r3, #2
 800d036:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d040:	7efb      	ldrb	r3, [r7, #27]
 800d042:	e1cc      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <HAL_SPI_Transmit+0x60>
 800d04a:	88fb      	ldrh	r3, [r7, #6]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d107      	bne.n	800d060 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d05c:	7efb      	ldrb	r3, [r7, #27]
 800d05e:	e1be      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2203      	movs	r2, #3
 800d064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	88fa      	ldrh	r2, [r7, #6]
 800d07a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	88fa      	ldrh	r2, [r7, #6]
 800d082:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d0b0:	d108      	bne.n	800d0c4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	e009      	b.n	800d0d8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d0d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	4b96      	ldr	r3, [pc, #600]	; (800d338 <HAL_SPI_Transmit+0x348>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	88f9      	ldrh	r1, [r7, #6]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	430b      	orrs	r3, r1
 800d0ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0201 	orr.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d104:	d107      	bne.n	800d116 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	2b0f      	cmp	r3, #15
 800d11c:	d947      	bls.n	800d1ae <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d11e:	e03f      	b.n	800d1a0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	f003 0302 	and.w	r3, r3, #2
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d114      	bne.n	800d158 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6812      	ldr	r2, [r2, #0]
 800d138:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d156:	e023      	b.n	800d1a0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d158:	f7f6 ff54 	bl	8004004 <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d803      	bhi.n	800d170 <HAL_SPI_Transmit+0x180>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d16e:	d102      	bne.n	800d176 <HAL_SPI_Transmit+0x186>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d114      	bne.n	800d1a0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 fb52 	bl	800d820 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d18a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e11e      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1b9      	bne.n	800d120 <HAL_SPI_Transmit+0x130>
 800d1ac:	e0f1      	b.n	800d392 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	2b07      	cmp	r3, #7
 800d1b4:	f240 80e6 	bls.w	800d384 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d1b8:	e05d      	b.n	800d276 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	695b      	ldr	r3, [r3, #20]
 800d1c0:	f003 0302 	and.w	r3, r3, #2
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d132      	bne.n	800d22e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d918      	bls.n	800d206 <HAL_SPI_Transmit+0x216>
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d014      	beq.n	800d206 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1ec:	1d1a      	adds	r2, r3, #4
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	3b02      	subs	r3, #2
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d204:	e037      	b.n	800d276 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d20a:	881a      	ldrh	r2, [r3, #0]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d214:	1c9a      	adds	r2, r3, #2
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d220:	b29b      	uxth	r3, r3
 800d222:	3b01      	subs	r3, #1
 800d224:	b29a      	uxth	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d22c:	e023      	b.n	800d276 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d22e:	f7f6 fee9 	bl	8004004 <HAL_GetTick>
 800d232:	4602      	mov	r2, r0
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d803      	bhi.n	800d246 <HAL_SPI_Transmit+0x256>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d244:	d102      	bne.n	800d24c <HAL_SPI_Transmit+0x25c>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d114      	bne.n	800d276 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 fae7 	bl	800d820 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	e0b3      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d19b      	bne.n	800d1ba <HAL_SPI_Transmit+0x1ca>
 800d282:	e086      	b.n	800d392 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d154      	bne.n	800d33c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d298:	b29b      	uxth	r3, r3
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d918      	bls.n	800d2d0 <HAL_SPI_Transmit+0x2e0>
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a2:	2b40      	cmp	r3, #64	; 0x40
 800d2a4:	d914      	bls.n	800d2d0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2b6:	1d1a      	adds	r2, r3, #4
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b04      	subs	r3, #4
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d2ce:	e059      	b.n	800d384 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d917      	bls.n	800d30c <HAL_SPI_Transmit+0x31c>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d013      	beq.n	800d30c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2e8:	881a      	ldrh	r2, [r3, #0]
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f2:	1c9a      	adds	r2, r3, #2
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	3b02      	subs	r3, #2
 800d302:	b29a      	uxth	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d30a:	e03b      	b.n	800d384 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3320      	adds	r3, #32
 800d316:	7812      	ldrb	r2, [r2, #0]
 800d318:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	3b01      	subs	r3, #1
 800d32e:	b29a      	uxth	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d336:	e025      	b.n	800d384 <HAL_SPI_Transmit+0x394>
 800d338:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d33c:	f7f6 fe62 	bl	8004004 <HAL_GetTick>
 800d340:	4602      	mov	r2, r0
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d803      	bhi.n	800d354 <HAL_SPI_Transmit+0x364>
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d352:	d102      	bne.n	800d35a <HAL_SPI_Transmit+0x36a>
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d114      	bne.n	800d384 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 fa60 	bl	800d820 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d36e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e02c      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f47f af79 	bne.w	800d284 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2200      	movs	r2, #0
 800d39a:	2108      	movs	r1, #8
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f000 fadf 	bl	800d960 <SPI_WaitOnFlagUntilTimeout>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ae:	f043 0220 	orr.w	r2, r3, #32
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fa31 	bl	800d820 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800d3dc:	7efb      	ldrb	r3, [r7, #27]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3720      	adds	r7, #32
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop

0800d3e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08c      	sub	sp, #48	; 0x30
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3320      	adds	r3, #32
 800d402:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3330      	adds	r3, #48	; 0x30
 800d40a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d412:	2b01      	cmp	r3, #1
 800d414:	d101      	bne.n	800d41a <HAL_SPI_TransmitReceive+0x32>
 800d416:	2302      	movs	r3, #2
 800d418:	e1fd      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d422:	f7f6 fdef 	bl	8004004 <HAL_GetTick>
 800d426:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800d428:	887b      	ldrh	r3, [r7, #2]
 800d42a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800d42c:	887b      	ldrh	r3, [r7, #2]
 800d42e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d009      	beq.n	800d450 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800d43c:	2302      	movs	r3, #2
 800d43e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d44a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d44e:	e1e2      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <HAL_SPI_TransmitReceive+0x7a>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <HAL_SPI_TransmitReceive+0x7a>
 800d45c:	887b      	ldrh	r3, [r7, #2]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d109      	bne.n	800d476 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d474:	e1cf      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2205      	movs	r2, #5
 800d47a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	887a      	ldrh	r2, [r7, #2]
 800d490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	887a      	ldrh	r2, [r7, #2]
 800d498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	887a      	ldrh	r2, [r7, #2]
 800d4a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	887a      	ldrh	r2, [r7, #2]
 800d4ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68da      	ldr	r2, [r3, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800d4cc:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	4b82      	ldr	r3, [pc, #520]	; (800d6e0 <HAL_SPI_TransmitReceive+0x2f8>)
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	8879      	ldrh	r1, [r7, #2]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	6812      	ldr	r2, [r2, #0]
 800d4de:	430b      	orrs	r3, r1
 800d4e0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f042 0201 	orr.w	r2, r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4fa:	d107      	bne.n	800d50c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d50a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	2b0f      	cmp	r3, #15
 800d512:	d970      	bls.n	800d5f6 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d514:	e068      	b.n	800d5e8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b02      	cmp	r3, #2
 800d522:	d11a      	bne.n	800d55a <HAL_SPI_TransmitReceive+0x172>
 800d524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d526:	2b00      	cmp	r3, #0
 800d528:	d017      	beq.n	800d55a <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d53a:	1d1a      	adds	r2, r3, #4
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d546:	b29b      	uxth	r3, r3
 800d548:	3b01      	subs	r3, #1
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d558:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	695a      	ldr	r2, [r3, #20]
 800d560:	f248 0308 	movw	r3, #32776	; 0x8008
 800d564:	4013      	ands	r3, r2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d01a      	beq.n	800d5a0 <HAL_SPI_TransmitReceive+0x1b8>
 800d56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d017      	beq.n	800d5a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d57a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d580:	1d1a      	adds	r2, r3, #4
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	3b01      	subs	r3, #1
 800d590:	b29a      	uxth	r2, r3
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d59e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5a0:	f7f6 fd30 	bl	8004004 <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d803      	bhi.n	800d5b8 <HAL_SPI_TransmitReceive+0x1d0>
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5b6:	d102      	bne.n	800d5be <HAL_SPI_TransmitReceive+0x1d6>
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d114      	bne.n	800d5e8 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f000 f92e 	bl	800d820 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d5e4:	2303      	movs	r3, #3
 800d5e6:	e116      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d5e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d193      	bne.n	800d516 <HAL_SPI_TransmitReceive+0x12e>
 800d5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d190      	bne.n	800d516 <HAL_SPI_TransmitReceive+0x12e>
 800d5f4:	e0e8      	b.n	800d7c8 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b07      	cmp	r3, #7
 800d5fc:	f240 80de 	bls.w	800d7bc <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d600:	e066      	b.n	800d6d0 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	695b      	ldr	r3, [r3, #20]
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d119      	bne.n	800d644 <HAL_SPI_TransmitReceive+0x25c>
 800d610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d612:	2b00      	cmp	r3, #0
 800d614:	d016      	beq.n	800d644 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d61a:	881a      	ldrh	r2, [r3, #0]
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d624:	1c9a      	adds	r2, r3, #2
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d642:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d11a      	bne.n	800d688 <HAL_SPI_TransmitReceive+0x2a0>
 800d652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d654:	2b00      	cmp	r3, #0
 800d656:	d017      	beq.n	800d688 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65c:	69ba      	ldr	r2, [r7, #24]
 800d65e:	8812      	ldrh	r2, [r2, #0]
 800d660:	b292      	uxth	r2, r2
 800d662:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d668:	1c9a      	adds	r2, r3, #2
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d674:	b29b      	uxth	r3, r3
 800d676:	3b01      	subs	r3, #1
 800d678:	b29a      	uxth	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d686:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d688:	f7f6 fcbc 	bl	8004004 <HAL_GetTick>
 800d68c:	4602      	mov	r2, r0
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d694:	429a      	cmp	r2, r3
 800d696:	d803      	bhi.n	800d6a0 <HAL_SPI_TransmitReceive+0x2b8>
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d69e:	d102      	bne.n	800d6a6 <HAL_SPI_TransmitReceive+0x2be>
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d114      	bne.n	800d6d0 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f000 f8ba 	bl	800d820 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	e0a2      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d6d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d195      	bne.n	800d602 <HAL_SPI_TransmitReceive+0x21a>
 800d6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d192      	bne.n	800d602 <HAL_SPI_TransmitReceive+0x21a>
 800d6dc:	e074      	b.n	800d7c8 <HAL_SPI_TransmitReceive+0x3e0>
 800d6de:	bf00      	nop
 800d6e0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	f003 0302 	and.w	r3, r3, #2
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d11b      	bne.n	800d72a <HAL_SPI_TransmitReceive+0x342>
 800d6f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d018      	beq.n	800d72a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3320      	adds	r3, #32
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d716:	b29b      	uxth	r3, r3
 800d718:	3b01      	subs	r3, #1
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d728:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b01      	cmp	r3, #1
 800d736:	d11d      	bne.n	800d774 <HAL_SPI_TransmitReceive+0x38c>
 800d738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d01a      	beq.n	800d774 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d74a:	7812      	ldrb	r2, [r2, #0]
 800d74c:	b2d2      	uxtb	r2, r2
 800d74e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d754:	1c5a      	adds	r2, r3, #1
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d760:	b29b      	uxth	r3, r3
 800d762:	3b01      	subs	r3, #1
 800d764:	b29a      	uxth	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d772:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d774:	f7f6 fc46 	bl	8004004 <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d780:	429a      	cmp	r2, r3
 800d782:	d803      	bhi.n	800d78c <HAL_SPI_TransmitReceive+0x3a4>
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d78a:	d102      	bne.n	800d792 <HAL_SPI_TransmitReceive+0x3aa>
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d114      	bne.n	800d7bc <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f000 f844 	bl	800d820 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	e02c      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d7bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d190      	bne.n	800d6e4 <HAL_SPI_TransmitReceive+0x2fc>
 800d7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d18d      	bne.n	800d6e4 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2108      	movs	r1, #8
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f000 f8c4 	bl	800d960 <SPI_WaitOnFlagUntilTimeout>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d007      	beq.n	800d7ee <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7e4:	f043 0220 	orr.w	r2, r3, #32
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 f816 	bl	800d820 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e001      	b.n	800d816 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800d812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d816:	4618      	mov	r0, r3
 800d818:	3728      	adds	r7, #40	; 0x28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop

0800d820 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	699a      	ldr	r2, [r3, #24]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f042 0208 	orr.w	r2, r2, #8
 800d83e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	699a      	ldr	r2, [r3, #24]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f042 0210 	orr.w	r2, r2, #16
 800d84e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f022 0201 	bic.w	r2, r2, #1
 800d85e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6919      	ldr	r1, [r3, #16]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	4b3c      	ldr	r3, [pc, #240]	; (800d95c <SPI_CloseTransfer+0x13c>)
 800d86c:	400b      	ands	r3, r1
 800d86e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689a      	ldr	r2, [r3, #8]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d87e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b04      	cmp	r3, #4
 800d88a:	d014      	beq.n	800d8b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f003 0320 	and.w	r3, r3, #32
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00f      	beq.n	800d8b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d89c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	699a      	ldr	r2, [r3, #24]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f042 0220 	orr.w	r2, r2, #32
 800d8b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d014      	beq.n	800d8ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00f      	beq.n	800d8ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8d2:	f043 0204 	orr.w	r2, r3, #4
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	699a      	ldr	r2, [r3, #24]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00f      	beq.n	800d916 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8fc:	f043 0201 	orr.w	r2, r3, #1
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	699a      	ldr	r2, [r3, #24]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d914:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00f      	beq.n	800d940 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d926:	f043 0208 	orr.w	r2, r3, #8
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	699a      	ldr	r2, [r3, #24]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d93e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d950:	bf00      	nop
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	fffffc90 	.word	0xfffffc90

0800d960 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	603b      	str	r3, [r7, #0]
 800d96c:	4613      	mov	r3, r2
 800d96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d970:	e010      	b.n	800d994 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d972:	f7f6 fb47 	bl	8004004 <HAL_GetTick>
 800d976:	4602      	mov	r2, r0
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d803      	bhi.n	800d98a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d988:	d102      	bne.n	800d990 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e00f      	b.n	800d9b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	695a      	ldr	r2, [r3, #20]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	4013      	ands	r3, r2
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	bf0c      	ite	eq
 800d9a4:	2301      	moveq	r3, #1
 800d9a6:	2300      	movne	r3, #0
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d0df      	beq.n	800d972 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c8:	095b      	lsrs	r3, r3, #5
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	3307      	adds	r3, #7
 800d9da:	08db      	lsrs	r3, r3, #3
 800d9dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b082      	sub	sp, #8
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e042      	b.n	800da8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7f5 fe6c 	bl	80036f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2224      	movs	r2, #36	; 0x24
 800da20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f022 0201 	bic.w	r2, r2, #1
 800da32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 fda7 	bl	800e588 <UART_SetConfig>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d101      	bne.n	800da44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e022      	b.n	800da8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f001 fc07 	bl	800f260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	689a      	ldr	r2, [r3, #8]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f042 0201 	orr.w	r2, r2, #1
 800da80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f001 fc8e 	bl	800f3a4 <UART_CheckIdleState>
 800da88:	4603      	mov	r3, r0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b08a      	sub	sp, #40	; 0x28
 800da96:	af02      	add	r7, sp, #8
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	603b      	str	r3, [r7, #0]
 800da9e:	4613      	mov	r3, r2
 800daa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daa8:	2b20      	cmp	r3, #32
 800daaa:	d17b      	bne.n	800dba4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <HAL_UART_Transmit+0x26>
 800dab2:	88fb      	ldrh	r3, [r7, #6]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dab8:	2301      	movs	r3, #1
 800daba:	e074      	b.n	800dba6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2221      	movs	r2, #33	; 0x21
 800dac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dacc:	f7f6 fa9a 	bl	8004004 <HAL_GetTick>
 800dad0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	88fa      	ldrh	r2, [r7, #6]
 800dade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daea:	d108      	bne.n	800dafe <HAL_UART_Transmit+0x6c>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d104      	bne.n	800dafe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800daf4:	2300      	movs	r3, #0
 800daf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	61bb      	str	r3, [r7, #24]
 800dafc:	e003      	b.n	800db06 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db02:	2300      	movs	r3, #0
 800db04:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db06:	e030      	b.n	800db6a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2200      	movs	r2, #0
 800db10:	2180      	movs	r1, #128	; 0x80
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f001 fcf0 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d005      	beq.n	800db2a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2220      	movs	r2, #32
 800db22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e03d      	b.n	800dba6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10b      	bne.n	800db48 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	3302      	adds	r3, #2
 800db44:	61bb      	str	r3, [r7, #24]
 800db46:	e007      	b.n	800db58 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	781a      	ldrb	r2, [r3, #0]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	3301      	adds	r3, #1
 800db56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db5e:	b29b      	uxth	r3, r3
 800db60:	3b01      	subs	r3, #1
 800db62:	b29a      	uxth	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db70:	b29b      	uxth	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1c8      	bne.n	800db08 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2200      	movs	r2, #0
 800db7e:	2140      	movs	r1, #64	; 0x40
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f001 fcb9 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d005      	beq.n	800db98 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2220      	movs	r2, #32
 800db90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800db94:	2303      	movs	r3, #3
 800db96:	e006      	b.n	800dba6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2220      	movs	r2, #32
 800db9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	e000      	b.n	800dba6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dba4:	2302      	movs	r3, #2
  }
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3720      	adds	r7, #32
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b08a      	sub	sp, #40	; 0x28
 800dbb2:	af02      	add	r7, sp, #8
 800dbb4:	60f8      	str	r0, [r7, #12]
 800dbb6:	60b9      	str	r1, [r7, #8]
 800dbb8:	603b      	str	r3, [r7, #0]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	f040 80b5 	bne.w	800dd34 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <HAL_UART_Receive+0x28>
 800dbd0:	88fb      	ldrh	r3, [r7, #6]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e0ad      	b.n	800dd36 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2222      	movs	r2, #34	; 0x22
 800dbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbf0:	f7f6 fa08 	bl	8004004 <HAL_GetTick>
 800dbf4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	88fa      	ldrh	r2, [r7, #6]
 800dbfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	88fa      	ldrh	r2, [r7, #6]
 800dc02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc0e:	d10e      	bne.n	800dc2e <HAL_UART_Receive+0x80>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d105      	bne.n	800dc24 <HAL_UART_Receive+0x76>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dc1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc22:	e02d      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	22ff      	movs	r2, #255	; 0xff
 800dc28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc2c:	e028      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d10d      	bne.n	800dc52 <HAL_UART_Receive+0xa4>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d104      	bne.n	800dc48 <HAL_UART_Receive+0x9a>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	22ff      	movs	r2, #255	; 0xff
 800dc42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc46:	e01b      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	227f      	movs	r2, #127	; 0x7f
 800dc4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc50:	e016      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc5a:	d10d      	bne.n	800dc78 <HAL_UART_Receive+0xca>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <HAL_UART_Receive+0xc0>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	227f      	movs	r2, #127	; 0x7f
 800dc68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc6c:	e008      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	223f      	movs	r2, #63	; 0x3f
 800dc72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc76:	e003      	b.n	800dc80 <HAL_UART_Receive+0xd2>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc86:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc90:	d108      	bne.n	800dca4 <HAL_UART_Receive+0xf6>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d104      	bne.n	800dca4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	61bb      	str	r3, [r7, #24]
 800dca2:	e003      	b.n	800dcac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dcac:	e036      	b.n	800dd1c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2120      	movs	r1, #32
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f001 fc1d 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d005      	beq.n	800dcd0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2220      	movs	r2, #32
 800dcc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e032      	b.n	800dd36 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10c      	bne.n	800dcf0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	8a7b      	ldrh	r3, [r7, #18]
 800dce0:	4013      	ands	r3, r2
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	3302      	adds	r3, #2
 800dcec:	61bb      	str	r3, [r7, #24]
 800dcee:	e00c      	b.n	800dd0a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	8a7b      	ldrh	r3, [r7, #18]
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	3301      	adds	r3, #1
 800dd08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	3b01      	subs	r3, #1
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1c2      	bne.n	800dcae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2220      	movs	r2, #32
 800dd2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	e000      	b.n	800dd36 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800dd34:	2302      	movs	r3, #2
  }
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3720      	adds	r7, #32
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
	...

0800dd40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08a      	sub	sp, #40	; 0x28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	d137      	bne.n	800ddc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <HAL_UART_Receive_IT+0x24>
 800dd5e:	88fb      	ldrh	r3, [r7, #6]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e030      	b.n	800ddca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a18      	ldr	r2, [pc, #96]	; (800ddd4 <HAL_UART_Receive_IT+0x94>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d01f      	beq.n	800ddb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d018      	beq.n	800ddb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	e853 3f00 	ldrex	r3, [r3]
 800dd92:	613b      	str	r3, [r7, #16]
   return(result);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	461a      	mov	r2, r3
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	623b      	str	r3, [r7, #32]
 800dda6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda8:	69f9      	ldr	r1, [r7, #28]
 800ddaa:	6a3a      	ldr	r2, [r7, #32]
 800ddac:	e841 2300 	strex	r3, r2, [r1]
 800ddb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e6      	bne.n	800dd86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	68b9      	ldr	r1, [r7, #8]
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f001 fc02 	bl	800f5c8 <UART_Start_Receive_IT>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	e000      	b.n	800ddca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ddc8:	2302      	movs	r3, #2
  }
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3728      	adds	r7, #40	; 0x28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	58000c00 	.word	0x58000c00

0800ddd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b0ba      	sub	sp, #232	; 0xe8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800de02:	f640 030f 	movw	r3, #2063	; 0x80f
 800de06:	4013      	ands	r3, r2
 800de08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800de0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de10:	2b00      	cmp	r3, #0
 800de12:	d11b      	bne.n	800de4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de18:	f003 0320 	and.w	r3, r3, #32
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d015      	beq.n	800de4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de24:	f003 0320 	and.w	r3, r3, #32
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d105      	bne.n	800de38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f000 8377 	beq.w	800e530 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	4798      	blx	r3
      }
      return;
 800de4a:	e371      	b.n	800e530 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 8123 	beq.w	800e09c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de5a:	4b8d      	ldr	r3, [pc, #564]	; (800e090 <HAL_UART_IRQHandler+0x2b8>)
 800de5c:	4013      	ands	r3, r2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de66:	4b8b      	ldr	r3, [pc, #556]	; (800e094 <HAL_UART_IRQHandler+0x2bc>)
 800de68:	4013      	ands	r3, r2
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 8116 	beq.w	800e09c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d011      	beq.n	800dea0 <HAL_UART_IRQHandler+0xc8>
 800de7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2201      	movs	r2, #1
 800de8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de96:	f043 0201 	orr.w	r2, r3, #1
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea4:	f003 0302 	and.w	r3, r3, #2
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d011      	beq.n	800ded0 <HAL_UART_IRQHandler+0xf8>
 800deac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deb0:	f003 0301 	and.w	r3, r3, #1
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2202      	movs	r2, #2
 800debe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dec6:	f043 0204 	orr.w	r2, r3, #4
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ded0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded4:	f003 0304 	and.w	r3, r3, #4
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d011      	beq.n	800df00 <HAL_UART_IRQHandler+0x128>
 800dedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2204      	movs	r2, #4
 800deee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def6:	f043 0202 	orr.w	r2, r3, #2
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df04:	f003 0308 	and.w	r3, r3, #8
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d017      	beq.n	800df3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df10:	f003 0320 	and.w	r3, r3, #32
 800df14:	2b00      	cmp	r3, #0
 800df16:	d105      	bne.n	800df24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800df18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df1c:	4b5c      	ldr	r3, [pc, #368]	; (800e090 <HAL_UART_IRQHandler+0x2b8>)
 800df1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00b      	beq.n	800df3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2208      	movs	r2, #8
 800df2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df32:	f043 0208 	orr.w	r2, r3, #8
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df44:	2b00      	cmp	r3, #0
 800df46:	d012      	beq.n	800df6e <HAL_UART_IRQHandler+0x196>
 800df48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00c      	beq.n	800df6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df64:	f043 0220 	orr.w	r2, r3, #32
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df74:	2b00      	cmp	r3, #0
 800df76:	f000 82dd 	beq.w	800e534 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df7e:	f003 0320 	and.w	r3, r3, #32
 800df82:	2b00      	cmp	r3, #0
 800df84:	d013      	beq.n	800dfae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df8a:	f003 0320 	and.w	r3, r3, #32
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d105      	bne.n	800df9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d007      	beq.n	800dfae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc2:	2b40      	cmp	r3, #64	; 0x40
 800dfc4:	d005      	beq.n	800dfd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dfc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d054      	beq.n	800e07c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f001 fc1a 	bl	800f80c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe2:	2b40      	cmp	r3, #64	; 0x40
 800dfe4:	d146      	bne.n	800e074 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3308      	adds	r3, #8
 800dfec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3308      	adds	r3, #8
 800e00e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e01e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1d9      	bne.n	800dfe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d017      	beq.n	800e06c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e042:	4a15      	ldr	r2, [pc, #84]	; (800e098 <HAL_UART_IRQHandler+0x2c0>)
 800e044:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7f8 fbc1 	bl	80067d4 <HAL_DMA_Abort_IT>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d019      	beq.n	800e08c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e066:	4610      	mov	r0, r2
 800e068:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e06a:	e00f      	b.n	800e08c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 fa81 	bl	800e574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e072:	e00b      	b.n	800e08c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fa7d 	bl	800e574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07a:	e007      	b.n	800e08c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fa79 	bl	800e574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e08a:	e253      	b.n	800e534 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e08c:	bf00      	nop
    return;
 800e08e:	e251      	b.n	800e534 <HAL_UART_IRQHandler+0x75c>
 800e090:	10000001 	.word	0x10000001
 800e094:	04000120 	.word	0x04000120
 800e098:	0800f8d9 	.word	0x0800f8d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	f040 81e7 	bne.w	800e474 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0aa:	f003 0310 	and.w	r3, r3, #16
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 81e0 	beq.w	800e474 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0b8:	f003 0310 	and.w	r3, r3, #16
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 81d9 	beq.w	800e474 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d4:	2b40      	cmp	r3, #64	; 0x40
 800e0d6:	f040 8151 	bne.w	800e37c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a96      	ldr	r2, [pc, #600]	; (800e33c <HAL_UART_IRQHandler+0x564>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d068      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a93      	ldr	r2, [pc, #588]	; (800e340 <HAL_UART_IRQHandler+0x568>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d061      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a91      	ldr	r2, [pc, #580]	; (800e344 <HAL_UART_IRQHandler+0x56c>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d05a      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a8e      	ldr	r2, [pc, #568]	; (800e348 <HAL_UART_IRQHandler+0x570>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d053      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a8c      	ldr	r2, [pc, #560]	; (800e34c <HAL_UART_IRQHandler+0x574>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d04c      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a89      	ldr	r2, [pc, #548]	; (800e350 <HAL_UART_IRQHandler+0x578>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d045      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a87      	ldr	r2, [pc, #540]	; (800e354 <HAL_UART_IRQHandler+0x57c>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d03e      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a84      	ldr	r2, [pc, #528]	; (800e358 <HAL_UART_IRQHandler+0x580>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d037      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a82      	ldr	r2, [pc, #520]	; (800e35c <HAL_UART_IRQHandler+0x584>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d030      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a7f      	ldr	r2, [pc, #508]	; (800e360 <HAL_UART_IRQHandler+0x588>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d029      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a7d      	ldr	r2, [pc, #500]	; (800e364 <HAL_UART_IRQHandler+0x58c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d022      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a7a      	ldr	r2, [pc, #488]	; (800e368 <HAL_UART_IRQHandler+0x590>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d01b      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a78      	ldr	r2, [pc, #480]	; (800e36c <HAL_UART_IRQHandler+0x594>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d014      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a75      	ldr	r2, [pc, #468]	; (800e370 <HAL_UART_IRQHandler+0x598>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d00d      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a73      	ldr	r2, [pc, #460]	; (800e374 <HAL_UART_IRQHandler+0x59c>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d006      	beq.n	800e1ba <HAL_UART_IRQHandler+0x3e2>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a70      	ldr	r2, [pc, #448]	; (800e378 <HAL_UART_IRQHandler+0x5a0>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d106      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x3f0>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	e005      	b.n	800e1d4 <HAL_UART_IRQHandler+0x3fc>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e1d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 81ab 	beq.w	800e538 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	f080 81a3 	bcs.w	800e538 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e202:	69db      	ldr	r3, [r3, #28]
 800e204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e208:	f000 8087 	beq.w	800e31a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e218:	e853 3f00 	ldrex	r3, [r3]
 800e21c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	461a      	mov	r2, r3
 800e232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e23a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1da      	bne.n	800e20c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3308      	adds	r3, #8
 800e25c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e260:	e853 3f00 	ldrex	r3, [r3]
 800e264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e268:	f023 0301 	bic.w	r3, r3, #1
 800e26c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3308      	adds	r3, #8
 800e276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e27a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e27e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e286:	e841 2300 	strex	r3, r2, [r1]
 800e28a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1e1      	bne.n	800e256 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	3308      	adds	r3, #8
 800e298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e29c:	e853 3f00 	ldrex	r3, [r3]
 800e2a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e2b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e2b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e2bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e2be:	e841 2300 	strex	r3, r2, [r1]
 800e2c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e2c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1e3      	bne.n	800e292 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2220      	movs	r2, #32
 800e2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e0:	e853 3f00 	ldrex	r3, [r3]
 800e2e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2e8:	f023 0310 	bic.w	r3, r3, #16
 800e2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e302:	e841 2300 	strex	r3, r2, [r1]
 800e306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1e4      	bne.n	800e2d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e314:	4618      	mov	r0, r3
 800e316:	f7f7 ff3f 	bl	8006198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2202      	movs	r2, #2
 800e31e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	b29b      	uxth	r3, r3
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f3 ff3f 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e33a:	e0fd      	b.n	800e538 <HAL_UART_IRQHandler+0x760>
 800e33c:	40020010 	.word	0x40020010
 800e340:	40020028 	.word	0x40020028
 800e344:	40020040 	.word	0x40020040
 800e348:	40020058 	.word	0x40020058
 800e34c:	40020070 	.word	0x40020070
 800e350:	40020088 	.word	0x40020088
 800e354:	400200a0 	.word	0x400200a0
 800e358:	400200b8 	.word	0x400200b8
 800e35c:	40020410 	.word	0x40020410
 800e360:	40020428 	.word	0x40020428
 800e364:	40020440 	.word	0x40020440
 800e368:	40020458 	.word	0x40020458
 800e36c:	40020470 	.word	0x40020470
 800e370:	40020488 	.word	0x40020488
 800e374:	400204a0 	.word	0x400204a0
 800e378:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e388:	b29b      	uxth	r3, r3
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e396:	b29b      	uxth	r3, r3
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 80cf 	beq.w	800e53c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e39e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 80ca 	beq.w	800e53c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	e853 3f00 	ldrex	r3, [r3]
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e3cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3d2:	e841 2300 	strex	r3, r2, [r1]
 800e3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1e4      	bne.n	800e3a8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	e853 3f00 	ldrex	r3, [r3]
 800e3ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e3ee:	6a3a      	ldr	r2, [r7, #32]
 800e3f0:	4b55      	ldr	r3, [pc, #340]	; (800e548 <HAL_UART_IRQHandler+0x770>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e402:	633a      	str	r2, [r7, #48]	; 0x30
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e40a:	e841 2300 	strex	r3, r2, [r1]
 800e40e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1e3      	bne.n	800e3de <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2220      	movs	r2, #32
 800e41a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	60fb      	str	r3, [r7, #12]
   return(result);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f023 0310 	bic.w	r3, r3, #16
 800e43e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e450:	69b9      	ldr	r1, [r7, #24]
 800e452:	69fa      	ldr	r2, [r7, #28]
 800e454:	e841 2300 	strex	r3, r2, [r1]
 800e458:	617b      	str	r3, [r7, #20]
   return(result);
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e4      	bne.n	800e42a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2202      	movs	r2, #2
 800e464:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7f3 fea3 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e472:	e063      	b.n	800e53c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00e      	beq.n	800e49e <HAL_UART_IRQHandler+0x6c6>
 800e480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d008      	beq.n	800e49e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 ff7c 	bl	8010394 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e49c:	e051      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d014      	beq.n	800e4d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d008      	beq.n	800e4d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d03a      	beq.n	800e540 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	4798      	blx	r3
    }
    return;
 800e4d2:	e035      	b.n	800e540 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d009      	beq.n	800e4f4 <HAL_UART_IRQHandler+0x71c>
 800e4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d003      	beq.n	800e4f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f001 fa09 	bl	800f904 <UART_EndTransmit_IT>
    return;
 800e4f2:	e026      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <HAL_UART_IRQHandler+0x73c>
 800e500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 ff55 	bl	80103bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e512:	e016      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d010      	beq.n	800e542 <HAL_UART_IRQHandler+0x76a>
 800e520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e524:	2b00      	cmp	r3, #0
 800e526:	da0c      	bge.n	800e542 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f001 ff3d 	bl	80103a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e52e:	e008      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
      return;
 800e530:	bf00      	nop
 800e532:	e006      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
    return;
 800e534:	bf00      	nop
 800e536:	e004      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
      return;
 800e538:	bf00      	nop
 800e53a:	e002      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
      return;
 800e53c:	bf00      	nop
 800e53e:	e000      	b.n	800e542 <HAL_UART_IRQHandler+0x76a>
    return;
 800e540:	bf00      	nop
  }
}
 800e542:	37e8      	adds	r7, #232	; 0xe8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	effffffe 	.word	0xeffffffe

0800e54c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e568:	bf00      	nop
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e57c:	bf00      	nop
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e58c:	b092      	sub	sp, #72	; 0x48
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	689a      	ldr	r2, [r3, #8]
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	431a      	orrs	r2, r3
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	69db      	ldr	r3, [r3, #28]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4bbe      	ldr	r3, [pc, #760]	; (800e8b0 <UART_SetConfig+0x328>)
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	697a      	ldr	r2, [r7, #20]
 800e5bc:	6812      	ldr	r2, [r2, #0]
 800e5be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5c0:	430b      	orrs	r3, r1
 800e5c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	430a      	orrs	r2, r1
 800e5d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	699b      	ldr	r3, [r3, #24]
 800e5de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4ab3      	ldr	r2, [pc, #716]	; (800e8b4 <UART_SetConfig+0x32c>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d004      	beq.n	800e5f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689a      	ldr	r2, [r3, #8]
 800e5fa:	4baf      	ldr	r3, [pc, #700]	; (800e8b8 <UART_SetConfig+0x330>)
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	6812      	ldr	r2, [r2, #0]
 800e602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e604:	430b      	orrs	r3, r1
 800e606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60e:	f023 010f 	bic.w	r1, r3, #15
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	430a      	orrs	r2, r1
 800e61c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4aa6      	ldr	r2, [pc, #664]	; (800e8bc <UART_SetConfig+0x334>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d177      	bne.n	800e718 <UART_SetConfig+0x190>
 800e628:	4ba5      	ldr	r3, [pc, #660]	; (800e8c0 <UART_SetConfig+0x338>)
 800e62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e62c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e630:	2b28      	cmp	r3, #40	; 0x28
 800e632:	d86d      	bhi.n	800e710 <UART_SetConfig+0x188>
 800e634:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <UART_SetConfig+0xb4>)
 800e636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63a:	bf00      	nop
 800e63c:	0800e6e1 	.word	0x0800e6e1
 800e640:	0800e711 	.word	0x0800e711
 800e644:	0800e711 	.word	0x0800e711
 800e648:	0800e711 	.word	0x0800e711
 800e64c:	0800e711 	.word	0x0800e711
 800e650:	0800e711 	.word	0x0800e711
 800e654:	0800e711 	.word	0x0800e711
 800e658:	0800e711 	.word	0x0800e711
 800e65c:	0800e6e9 	.word	0x0800e6e9
 800e660:	0800e711 	.word	0x0800e711
 800e664:	0800e711 	.word	0x0800e711
 800e668:	0800e711 	.word	0x0800e711
 800e66c:	0800e711 	.word	0x0800e711
 800e670:	0800e711 	.word	0x0800e711
 800e674:	0800e711 	.word	0x0800e711
 800e678:	0800e711 	.word	0x0800e711
 800e67c:	0800e6f1 	.word	0x0800e6f1
 800e680:	0800e711 	.word	0x0800e711
 800e684:	0800e711 	.word	0x0800e711
 800e688:	0800e711 	.word	0x0800e711
 800e68c:	0800e711 	.word	0x0800e711
 800e690:	0800e711 	.word	0x0800e711
 800e694:	0800e711 	.word	0x0800e711
 800e698:	0800e711 	.word	0x0800e711
 800e69c:	0800e6f9 	.word	0x0800e6f9
 800e6a0:	0800e711 	.word	0x0800e711
 800e6a4:	0800e711 	.word	0x0800e711
 800e6a8:	0800e711 	.word	0x0800e711
 800e6ac:	0800e711 	.word	0x0800e711
 800e6b0:	0800e711 	.word	0x0800e711
 800e6b4:	0800e711 	.word	0x0800e711
 800e6b8:	0800e711 	.word	0x0800e711
 800e6bc:	0800e701 	.word	0x0800e701
 800e6c0:	0800e711 	.word	0x0800e711
 800e6c4:	0800e711 	.word	0x0800e711
 800e6c8:	0800e711 	.word	0x0800e711
 800e6cc:	0800e711 	.word	0x0800e711
 800e6d0:	0800e711 	.word	0x0800e711
 800e6d4:	0800e711 	.word	0x0800e711
 800e6d8:	0800e711 	.word	0x0800e711
 800e6dc:	0800e709 	.word	0x0800e709
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e6:	e326      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e6e8:	2304      	movs	r3, #4
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ee:	e322      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e6f0:	2308      	movs	r3, #8
 800e6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f6:	e31e      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e6f8:	2310      	movs	r3, #16
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fe:	e31a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e700:	2320      	movs	r3, #32
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e316      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e708:	2340      	movs	r3, #64	; 0x40
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e312      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e710:	2380      	movs	r3, #128	; 0x80
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e30e      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a69      	ldr	r2, [pc, #420]	; (800e8c4 <UART_SetConfig+0x33c>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d130      	bne.n	800e784 <UART_SetConfig+0x1fc>
 800e722:	4b67      	ldr	r3, [pc, #412]	; (800e8c0 <UART_SetConfig+0x338>)
 800e724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e726:	f003 0307 	and.w	r3, r3, #7
 800e72a:	2b05      	cmp	r3, #5
 800e72c:	d826      	bhi.n	800e77c <UART_SetConfig+0x1f4>
 800e72e:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <UART_SetConfig+0x1ac>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e74d 	.word	0x0800e74d
 800e738:	0800e755 	.word	0x0800e755
 800e73c:	0800e75d 	.word	0x0800e75d
 800e740:	0800e765 	.word	0x0800e765
 800e744:	0800e76d 	.word	0x0800e76d
 800e748:	0800e775 	.word	0x0800e775
 800e74c:	2300      	movs	r3, #0
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e752:	e2f0      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e754:	2304      	movs	r3, #4
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75a:	e2ec      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e75c:	2308      	movs	r3, #8
 800e75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e762:	e2e8      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e764:	2310      	movs	r3, #16
 800e766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76a:	e2e4      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e76c:	2320      	movs	r3, #32
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e2e0      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e774:	2340      	movs	r3, #64	; 0x40
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77a:	e2dc      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e77c:	2380      	movs	r3, #128	; 0x80
 800e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e782:	e2d8      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a4f      	ldr	r2, [pc, #316]	; (800e8c8 <UART_SetConfig+0x340>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d130      	bne.n	800e7f0 <UART_SetConfig+0x268>
 800e78e:	4b4c      	ldr	r3, [pc, #304]	; (800e8c0 <UART_SetConfig+0x338>)
 800e790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	2b05      	cmp	r3, #5
 800e798:	d826      	bhi.n	800e7e8 <UART_SetConfig+0x260>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <UART_SetConfig+0x218>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e7b9 	.word	0x0800e7b9
 800e7a4:	0800e7c1 	.word	0x0800e7c1
 800e7a8:	0800e7c9 	.word	0x0800e7c9
 800e7ac:	0800e7d1 	.word	0x0800e7d1
 800e7b0:	0800e7d9 	.word	0x0800e7d9
 800e7b4:	0800e7e1 	.word	0x0800e7e1
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7be:	e2ba      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7c0:	2304      	movs	r3, #4
 800e7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c6:	e2b6      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7c8:	2308      	movs	r3, #8
 800e7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ce:	e2b2      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d6:	e2ae      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7d8:	2320      	movs	r3, #32
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e2aa      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7e0:	2340      	movs	r3, #64	; 0x40
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e2a6      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7e8:	2380      	movs	r3, #128	; 0x80
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e2a2      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a35      	ldr	r2, [pc, #212]	; (800e8cc <UART_SetConfig+0x344>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d130      	bne.n	800e85c <UART_SetConfig+0x2d4>
 800e7fa:	4b31      	ldr	r3, [pc, #196]	; (800e8c0 <UART_SetConfig+0x338>)
 800e7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7fe:	f003 0307 	and.w	r3, r3, #7
 800e802:	2b05      	cmp	r3, #5
 800e804:	d826      	bhi.n	800e854 <UART_SetConfig+0x2cc>
 800e806:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <UART_SetConfig+0x284>)
 800e808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80c:	0800e825 	.word	0x0800e825
 800e810:	0800e82d 	.word	0x0800e82d
 800e814:	0800e835 	.word	0x0800e835
 800e818:	0800e83d 	.word	0x0800e83d
 800e81c:	0800e845 	.word	0x0800e845
 800e820:	0800e84d 	.word	0x0800e84d
 800e824:	2300      	movs	r3, #0
 800e826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82a:	e284      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e82c:	2304      	movs	r3, #4
 800e82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e832:	e280      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e834:	2308      	movs	r3, #8
 800e836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83a:	e27c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e83c:	2310      	movs	r3, #16
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e278      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e844:	2320      	movs	r3, #32
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e274      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e84c:	2340      	movs	r3, #64	; 0x40
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e270      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e854:	2380      	movs	r3, #128	; 0x80
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e26c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a1b      	ldr	r2, [pc, #108]	; (800e8d0 <UART_SetConfig+0x348>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d142      	bne.n	800e8ec <UART_SetConfig+0x364>
 800e866:	4b16      	ldr	r3, [pc, #88]	; (800e8c0 <UART_SetConfig+0x338>)
 800e868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e86a:	f003 0307 	and.w	r3, r3, #7
 800e86e:	2b05      	cmp	r3, #5
 800e870:	d838      	bhi.n	800e8e4 <UART_SetConfig+0x35c>
 800e872:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <UART_SetConfig+0x2f0>)
 800e874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e878:	0800e891 	.word	0x0800e891
 800e87c:	0800e899 	.word	0x0800e899
 800e880:	0800e8a1 	.word	0x0800e8a1
 800e884:	0800e8a9 	.word	0x0800e8a9
 800e888:	0800e8d5 	.word	0x0800e8d5
 800e88c:	0800e8dd 	.word	0x0800e8dd
 800e890:	2300      	movs	r3, #0
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e896:	e24e      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e898:	2304      	movs	r3, #4
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89e:	e24a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a6:	e246      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8a8:	2310      	movs	r3, #16
 800e8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ae:	e242      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8b0:	cfff69f3 	.word	0xcfff69f3
 800e8b4:	58000c00 	.word	0x58000c00
 800e8b8:	11fff4ff 	.word	0x11fff4ff
 800e8bc:	40011000 	.word	0x40011000
 800e8c0:	58024400 	.word	0x58024400
 800e8c4:	40004400 	.word	0x40004400
 800e8c8:	40004800 	.word	0x40004800
 800e8cc:	40004c00 	.word	0x40004c00
 800e8d0:	40005000 	.word	0x40005000
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8da:	e22c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8dc:	2340      	movs	r3, #64	; 0x40
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e2:	e228      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ea:	e224      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4ab1      	ldr	r2, [pc, #708]	; (800ebb8 <UART_SetConfig+0x630>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d176      	bne.n	800e9e4 <UART_SetConfig+0x45c>
 800e8f6:	4bb1      	ldr	r3, [pc, #708]	; (800ebbc <UART_SetConfig+0x634>)
 800e8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8fe:	2b28      	cmp	r3, #40	; 0x28
 800e900:	d86c      	bhi.n	800e9dc <UART_SetConfig+0x454>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <UART_SetConfig+0x380>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e9ad 	.word	0x0800e9ad
 800e90c:	0800e9dd 	.word	0x0800e9dd
 800e910:	0800e9dd 	.word	0x0800e9dd
 800e914:	0800e9dd 	.word	0x0800e9dd
 800e918:	0800e9dd 	.word	0x0800e9dd
 800e91c:	0800e9dd 	.word	0x0800e9dd
 800e920:	0800e9dd 	.word	0x0800e9dd
 800e924:	0800e9dd 	.word	0x0800e9dd
 800e928:	0800e9b5 	.word	0x0800e9b5
 800e92c:	0800e9dd 	.word	0x0800e9dd
 800e930:	0800e9dd 	.word	0x0800e9dd
 800e934:	0800e9dd 	.word	0x0800e9dd
 800e938:	0800e9dd 	.word	0x0800e9dd
 800e93c:	0800e9dd 	.word	0x0800e9dd
 800e940:	0800e9dd 	.word	0x0800e9dd
 800e944:	0800e9dd 	.word	0x0800e9dd
 800e948:	0800e9bd 	.word	0x0800e9bd
 800e94c:	0800e9dd 	.word	0x0800e9dd
 800e950:	0800e9dd 	.word	0x0800e9dd
 800e954:	0800e9dd 	.word	0x0800e9dd
 800e958:	0800e9dd 	.word	0x0800e9dd
 800e95c:	0800e9dd 	.word	0x0800e9dd
 800e960:	0800e9dd 	.word	0x0800e9dd
 800e964:	0800e9dd 	.word	0x0800e9dd
 800e968:	0800e9c5 	.word	0x0800e9c5
 800e96c:	0800e9dd 	.word	0x0800e9dd
 800e970:	0800e9dd 	.word	0x0800e9dd
 800e974:	0800e9dd 	.word	0x0800e9dd
 800e978:	0800e9dd 	.word	0x0800e9dd
 800e97c:	0800e9dd 	.word	0x0800e9dd
 800e980:	0800e9dd 	.word	0x0800e9dd
 800e984:	0800e9dd 	.word	0x0800e9dd
 800e988:	0800e9cd 	.word	0x0800e9cd
 800e98c:	0800e9dd 	.word	0x0800e9dd
 800e990:	0800e9dd 	.word	0x0800e9dd
 800e994:	0800e9dd 	.word	0x0800e9dd
 800e998:	0800e9dd 	.word	0x0800e9dd
 800e99c:	0800e9dd 	.word	0x0800e9dd
 800e9a0:	0800e9dd 	.word	0x0800e9dd
 800e9a4:	0800e9dd 	.word	0x0800e9dd
 800e9a8:	0800e9d5 	.word	0x0800e9d5
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b2:	e1c0      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ba:	e1bc      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9bc:	2308      	movs	r3, #8
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c2:	e1b8      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e1b4      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9cc:	2320      	movs	r3, #32
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e1b0      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9d4:	2340      	movs	r3, #64	; 0x40
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e1ac      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9dc:	2380      	movs	r3, #128	; 0x80
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e1a8      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a75      	ldr	r2, [pc, #468]	; (800ebc0 <UART_SetConfig+0x638>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d130      	bne.n	800ea50 <UART_SetConfig+0x4c8>
 800e9ee:	4b73      	ldr	r3, [pc, #460]	; (800ebbc <UART_SetConfig+0x634>)
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f2:	f003 0307 	and.w	r3, r3, #7
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	d826      	bhi.n	800ea48 <UART_SetConfig+0x4c0>
 800e9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ea00 <UART_SetConfig+0x478>)
 800e9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea00:	0800ea19 	.word	0x0800ea19
 800ea04:	0800ea21 	.word	0x0800ea21
 800ea08:	0800ea29 	.word	0x0800ea29
 800ea0c:	0800ea31 	.word	0x0800ea31
 800ea10:	0800ea39 	.word	0x0800ea39
 800ea14:	0800ea41 	.word	0x0800ea41
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1e:	e18a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea20:	2304      	movs	r3, #4
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea26:	e186      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea28:	2308      	movs	r3, #8
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2e:	e182      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea30:	2310      	movs	r3, #16
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea36:	e17e      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea38:	2320      	movs	r3, #32
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e17a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea40:	2340      	movs	r3, #64	; 0x40
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e176      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea48:	2380      	movs	r3, #128	; 0x80
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e172      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a5b      	ldr	r2, [pc, #364]	; (800ebc4 <UART_SetConfig+0x63c>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d130      	bne.n	800eabc <UART_SetConfig+0x534>
 800ea5a:	4b58      	ldr	r3, [pc, #352]	; (800ebbc <UART_SetConfig+0x634>)
 800ea5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea5e:	f003 0307 	and.w	r3, r3, #7
 800ea62:	2b05      	cmp	r3, #5
 800ea64:	d826      	bhi.n	800eab4 <UART_SetConfig+0x52c>
 800ea66:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <UART_SetConfig+0x4e4>)
 800ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6c:	0800ea85 	.word	0x0800ea85
 800ea70:	0800ea8d 	.word	0x0800ea8d
 800ea74:	0800ea95 	.word	0x0800ea95
 800ea78:	0800ea9d 	.word	0x0800ea9d
 800ea7c:	0800eaa5 	.word	0x0800eaa5
 800ea80:	0800eaad 	.word	0x0800eaad
 800ea84:	2300      	movs	r3, #0
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8a:	e154      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea92:	e150      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea94:	2308      	movs	r3, #8
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9a:	e14c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa2:	e148      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaaa:	e144      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eaac:	2340      	movs	r3, #64	; 0x40
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab2:	e140      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eab4:	2380      	movs	r3, #128	; 0x80
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaba:	e13c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a41      	ldr	r2, [pc, #260]	; (800ebc8 <UART_SetConfig+0x640>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	f040 8082 	bne.w	800ebcc <UART_SetConfig+0x644>
 800eac8:	4b3c      	ldr	r3, [pc, #240]	; (800ebbc <UART_SetConfig+0x634>)
 800eaca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eacc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ead0:	2b28      	cmp	r3, #40	; 0x28
 800ead2:	d86d      	bhi.n	800ebb0 <UART_SetConfig+0x628>
 800ead4:	a201      	add	r2, pc, #4	; (adr r2, 800eadc <UART_SetConfig+0x554>)
 800ead6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eada:	bf00      	nop
 800eadc:	0800eb81 	.word	0x0800eb81
 800eae0:	0800ebb1 	.word	0x0800ebb1
 800eae4:	0800ebb1 	.word	0x0800ebb1
 800eae8:	0800ebb1 	.word	0x0800ebb1
 800eaec:	0800ebb1 	.word	0x0800ebb1
 800eaf0:	0800ebb1 	.word	0x0800ebb1
 800eaf4:	0800ebb1 	.word	0x0800ebb1
 800eaf8:	0800ebb1 	.word	0x0800ebb1
 800eafc:	0800eb89 	.word	0x0800eb89
 800eb00:	0800ebb1 	.word	0x0800ebb1
 800eb04:	0800ebb1 	.word	0x0800ebb1
 800eb08:	0800ebb1 	.word	0x0800ebb1
 800eb0c:	0800ebb1 	.word	0x0800ebb1
 800eb10:	0800ebb1 	.word	0x0800ebb1
 800eb14:	0800ebb1 	.word	0x0800ebb1
 800eb18:	0800ebb1 	.word	0x0800ebb1
 800eb1c:	0800eb91 	.word	0x0800eb91
 800eb20:	0800ebb1 	.word	0x0800ebb1
 800eb24:	0800ebb1 	.word	0x0800ebb1
 800eb28:	0800ebb1 	.word	0x0800ebb1
 800eb2c:	0800ebb1 	.word	0x0800ebb1
 800eb30:	0800ebb1 	.word	0x0800ebb1
 800eb34:	0800ebb1 	.word	0x0800ebb1
 800eb38:	0800ebb1 	.word	0x0800ebb1
 800eb3c:	0800eb99 	.word	0x0800eb99
 800eb40:	0800ebb1 	.word	0x0800ebb1
 800eb44:	0800ebb1 	.word	0x0800ebb1
 800eb48:	0800ebb1 	.word	0x0800ebb1
 800eb4c:	0800ebb1 	.word	0x0800ebb1
 800eb50:	0800ebb1 	.word	0x0800ebb1
 800eb54:	0800ebb1 	.word	0x0800ebb1
 800eb58:	0800ebb1 	.word	0x0800ebb1
 800eb5c:	0800eba1 	.word	0x0800eba1
 800eb60:	0800ebb1 	.word	0x0800ebb1
 800eb64:	0800ebb1 	.word	0x0800ebb1
 800eb68:	0800ebb1 	.word	0x0800ebb1
 800eb6c:	0800ebb1 	.word	0x0800ebb1
 800eb70:	0800ebb1 	.word	0x0800ebb1
 800eb74:	0800ebb1 	.word	0x0800ebb1
 800eb78:	0800ebb1 	.word	0x0800ebb1
 800eb7c:	0800eba9 	.word	0x0800eba9
 800eb80:	2301      	movs	r3, #1
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e0d6      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e0d2      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eb90:	2308      	movs	r3, #8
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e0ce      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e0ca      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eba0:	2320      	movs	r3, #32
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e0c6      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eba8:	2340      	movs	r3, #64	; 0x40
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e0c2      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e0be      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ebb8:	40011400 	.word	0x40011400
 800ebbc:	58024400 	.word	0x58024400
 800ebc0:	40007800 	.word	0x40007800
 800ebc4:	40007c00 	.word	0x40007c00
 800ebc8:	40011800 	.word	0x40011800
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4aad      	ldr	r2, [pc, #692]	; (800ee88 <UART_SetConfig+0x900>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d176      	bne.n	800ecc4 <UART_SetConfig+0x73c>
 800ebd6:	4bad      	ldr	r3, [pc, #692]	; (800ee8c <UART_SetConfig+0x904>)
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebde:	2b28      	cmp	r3, #40	; 0x28
 800ebe0:	d86c      	bhi.n	800ecbc <UART_SetConfig+0x734>
 800ebe2:	a201      	add	r2, pc, #4	; (adr r2, 800ebe8 <UART_SetConfig+0x660>)
 800ebe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe8:	0800ec8d 	.word	0x0800ec8d
 800ebec:	0800ecbd 	.word	0x0800ecbd
 800ebf0:	0800ecbd 	.word	0x0800ecbd
 800ebf4:	0800ecbd 	.word	0x0800ecbd
 800ebf8:	0800ecbd 	.word	0x0800ecbd
 800ebfc:	0800ecbd 	.word	0x0800ecbd
 800ec00:	0800ecbd 	.word	0x0800ecbd
 800ec04:	0800ecbd 	.word	0x0800ecbd
 800ec08:	0800ec95 	.word	0x0800ec95
 800ec0c:	0800ecbd 	.word	0x0800ecbd
 800ec10:	0800ecbd 	.word	0x0800ecbd
 800ec14:	0800ecbd 	.word	0x0800ecbd
 800ec18:	0800ecbd 	.word	0x0800ecbd
 800ec1c:	0800ecbd 	.word	0x0800ecbd
 800ec20:	0800ecbd 	.word	0x0800ecbd
 800ec24:	0800ecbd 	.word	0x0800ecbd
 800ec28:	0800ec9d 	.word	0x0800ec9d
 800ec2c:	0800ecbd 	.word	0x0800ecbd
 800ec30:	0800ecbd 	.word	0x0800ecbd
 800ec34:	0800ecbd 	.word	0x0800ecbd
 800ec38:	0800ecbd 	.word	0x0800ecbd
 800ec3c:	0800ecbd 	.word	0x0800ecbd
 800ec40:	0800ecbd 	.word	0x0800ecbd
 800ec44:	0800ecbd 	.word	0x0800ecbd
 800ec48:	0800eca5 	.word	0x0800eca5
 800ec4c:	0800ecbd 	.word	0x0800ecbd
 800ec50:	0800ecbd 	.word	0x0800ecbd
 800ec54:	0800ecbd 	.word	0x0800ecbd
 800ec58:	0800ecbd 	.word	0x0800ecbd
 800ec5c:	0800ecbd 	.word	0x0800ecbd
 800ec60:	0800ecbd 	.word	0x0800ecbd
 800ec64:	0800ecbd 	.word	0x0800ecbd
 800ec68:	0800ecad 	.word	0x0800ecad
 800ec6c:	0800ecbd 	.word	0x0800ecbd
 800ec70:	0800ecbd 	.word	0x0800ecbd
 800ec74:	0800ecbd 	.word	0x0800ecbd
 800ec78:	0800ecbd 	.word	0x0800ecbd
 800ec7c:	0800ecbd 	.word	0x0800ecbd
 800ec80:	0800ecbd 	.word	0x0800ecbd
 800ec84:	0800ecbd 	.word	0x0800ecbd
 800ec88:	0800ecb5 	.word	0x0800ecb5
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e050      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ec94:	2304      	movs	r3, #4
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e04c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ec9c:	2308      	movs	r3, #8
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e048      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800eca4:	2310      	movs	r3, #16
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e044      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ecac:	2320      	movs	r3, #32
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e040      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ecb4:	2340      	movs	r3, #64	; 0x40
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e03c      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ecbc:	2380      	movs	r3, #128	; 0x80
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc2:	e038      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a71      	ldr	r2, [pc, #452]	; (800ee90 <UART_SetConfig+0x908>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d130      	bne.n	800ed30 <UART_SetConfig+0x7a8>
 800ecce:	4b6f      	ldr	r3, [pc, #444]	; (800ee8c <UART_SetConfig+0x904>)
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b05      	cmp	r3, #5
 800ecd8:	d826      	bhi.n	800ed28 <UART_SetConfig+0x7a0>
 800ecda:	a201      	add	r2, pc, #4	; (adr r2, 800ece0 <UART_SetConfig+0x758>)
 800ecdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece0:	0800ecf9 	.word	0x0800ecf9
 800ece4:	0800ed01 	.word	0x0800ed01
 800ece8:	0800ed09 	.word	0x0800ed09
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed19 	.word	0x0800ed19
 800ecf4:	0800ed21 	.word	0x0800ed21
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfe:	e01a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed00:	2304      	movs	r3, #4
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed06:	e016      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed08:	2308      	movs	r3, #8
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0e:	e012      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed10:	2310      	movs	r3, #16
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e00e      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed18:	2320      	movs	r3, #32
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e00a      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed20:	2340      	movs	r3, #64	; 0x40
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e006      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed28:	2380      	movs	r3, #128	; 0x80
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2e:	e002      	b.n	800ed36 <UART_SetConfig+0x7ae>
 800ed30:	2380      	movs	r3, #128	; 0x80
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a55      	ldr	r2, [pc, #340]	; (800ee90 <UART_SetConfig+0x908>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	f040 80f8 	bne.w	800ef32 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	dc46      	bgt.n	800edd8 <UART_SetConfig+0x850>
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	db75      	blt.n	800ee3a <UART_SetConfig+0x8b2>
 800ed4e:	3b02      	subs	r3, #2
 800ed50:	2b1e      	cmp	r3, #30
 800ed52:	d872      	bhi.n	800ee3a <UART_SetConfig+0x8b2>
 800ed54:	a201      	add	r2, pc, #4	; (adr r2, 800ed5c <UART_SetConfig+0x7d4>)
 800ed56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5a:	bf00      	nop
 800ed5c:	0800eddf 	.word	0x0800eddf
 800ed60:	0800ee3b 	.word	0x0800ee3b
 800ed64:	0800ede7 	.word	0x0800ede7
 800ed68:	0800ee3b 	.word	0x0800ee3b
 800ed6c:	0800ee3b 	.word	0x0800ee3b
 800ed70:	0800ee3b 	.word	0x0800ee3b
 800ed74:	0800edf7 	.word	0x0800edf7
 800ed78:	0800ee3b 	.word	0x0800ee3b
 800ed7c:	0800ee3b 	.word	0x0800ee3b
 800ed80:	0800ee3b 	.word	0x0800ee3b
 800ed84:	0800ee3b 	.word	0x0800ee3b
 800ed88:	0800ee3b 	.word	0x0800ee3b
 800ed8c:	0800ee3b 	.word	0x0800ee3b
 800ed90:	0800ee3b 	.word	0x0800ee3b
 800ed94:	0800ee07 	.word	0x0800ee07
 800ed98:	0800ee3b 	.word	0x0800ee3b
 800ed9c:	0800ee3b 	.word	0x0800ee3b
 800eda0:	0800ee3b 	.word	0x0800ee3b
 800eda4:	0800ee3b 	.word	0x0800ee3b
 800eda8:	0800ee3b 	.word	0x0800ee3b
 800edac:	0800ee3b 	.word	0x0800ee3b
 800edb0:	0800ee3b 	.word	0x0800ee3b
 800edb4:	0800ee3b 	.word	0x0800ee3b
 800edb8:	0800ee3b 	.word	0x0800ee3b
 800edbc:	0800ee3b 	.word	0x0800ee3b
 800edc0:	0800ee3b 	.word	0x0800ee3b
 800edc4:	0800ee3b 	.word	0x0800ee3b
 800edc8:	0800ee3b 	.word	0x0800ee3b
 800edcc:	0800ee3b 	.word	0x0800ee3b
 800edd0:	0800ee3b 	.word	0x0800ee3b
 800edd4:	0800ee2d 	.word	0x0800ee2d
 800edd8:	2b40      	cmp	r3, #64	; 0x40
 800edda:	d02a      	beq.n	800ee32 <UART_SetConfig+0x8aa>
 800eddc:	e02d      	b.n	800ee3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800edde:	f7fd fa6f 	bl	800c2c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ede2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ede4:	e02f      	b.n	800ee46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ede6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edea:	4618      	mov	r0, r3
 800edec:	f7fd fa7e 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edf4:	e027      	b.n	800ee46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edf6:	f107 0318 	add.w	r3, r7, #24
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fd fbca 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee04:	e01f      	b.n	800ee46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee06:	4b21      	ldr	r3, [pc, #132]	; (800ee8c <UART_SetConfig+0x904>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d009      	beq.n	800ee26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee12:	4b1e      	ldr	r3, [pc, #120]	; (800ee8c <UART_SetConfig+0x904>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	08db      	lsrs	r3, r3, #3
 800ee18:	f003 0303 	and.w	r3, r3, #3
 800ee1c:	4a1d      	ldr	r2, [pc, #116]	; (800ee94 <UART_SetConfig+0x90c>)
 800ee1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ee22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee24:	e00f      	b.n	800ee46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ee26:	4b1b      	ldr	r3, [pc, #108]	; (800ee94 <UART_SetConfig+0x90c>)
 800ee28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee2a:	e00c      	b.n	800ee46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee2c:	4b1a      	ldr	r3, [pc, #104]	; (800ee98 <UART_SetConfig+0x910>)
 800ee2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee30:	e009      	b.n	800ee46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee38:	e005      	b.n	800ee46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f000 81ee 	beq.w	800f22a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee52:	4a12      	ldr	r2, [pc, #72]	; (800ee9c <UART_SetConfig+0x914>)
 800ee54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee60:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	685a      	ldr	r2, [r3, #4]
 800ee66:	4613      	mov	r3, r2
 800ee68:	005b      	lsls	r3, r3, #1
 800ee6a:	4413      	add	r3, r2
 800ee6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d305      	bcc.n	800ee7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d910      	bls.n	800eea0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee84:	e1d1      	b.n	800f22a <UART_SetConfig+0xca2>
 800ee86:	bf00      	nop
 800ee88:	40011c00 	.word	0x40011c00
 800ee8c:	58024400 	.word	0x58024400
 800ee90:	58000c00 	.word	0x58000c00
 800ee94:	03d09000 	.word	0x03d09000
 800ee98:	003d0900 	.word	0x003d0900
 800ee9c:	080177e0 	.word	0x080177e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eea2:	2200      	movs	r2, #0
 800eea4:	60bb      	str	r3, [r7, #8]
 800eea6:	60fa      	str	r2, [r7, #12]
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeac:	4ac0      	ldr	r2, [pc, #768]	; (800f1b0 <UART_SetConfig+0xc28>)
 800eeae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eec2:	f7f1 fc29 	bl	8000718 <__aeabi_uldivmod>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4610      	mov	r0, r2
 800eecc:	4619      	mov	r1, r3
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	020b      	lsls	r3, r1, #8
 800eed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eedc:	0202      	lsls	r2, r0, #8
 800eede:	6979      	ldr	r1, [r7, #20]
 800eee0:	6849      	ldr	r1, [r1, #4]
 800eee2:	0849      	lsrs	r1, r1, #1
 800eee4:	2000      	movs	r0, #0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4605      	mov	r5, r0
 800eeea:	eb12 0804 	adds.w	r8, r2, r4
 800eeee:	eb43 0905 	adc.w	r9, r3, r5
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	469a      	mov	sl, r3
 800eefa:	4693      	mov	fp, r2
 800eefc:	4652      	mov	r2, sl
 800eefe:	465b      	mov	r3, fp
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fc08 	bl	8000718 <__aeabi_uldivmod>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef16:	d308      	bcc.n	800ef2a <UART_SetConfig+0x9a2>
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef1e:	d204      	bcs.n	800ef2a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef26:	60da      	str	r2, [r3, #12]
 800ef28:	e17f      	b.n	800f22a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef30:	e17b      	b.n	800f22a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef3a:	f040 80bd 	bne.w	800f0b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ef3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef42:	2b20      	cmp	r3, #32
 800ef44:	dc48      	bgt.n	800efd8 <UART_SetConfig+0xa50>
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	db7b      	blt.n	800f042 <UART_SetConfig+0xaba>
 800ef4a:	2b20      	cmp	r3, #32
 800ef4c:	d879      	bhi.n	800f042 <UART_SetConfig+0xaba>
 800ef4e:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <UART_SetConfig+0x9cc>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800efdf 	.word	0x0800efdf
 800ef58:	0800efe7 	.word	0x0800efe7
 800ef5c:	0800f043 	.word	0x0800f043
 800ef60:	0800f043 	.word	0x0800f043
 800ef64:	0800efef 	.word	0x0800efef
 800ef68:	0800f043 	.word	0x0800f043
 800ef6c:	0800f043 	.word	0x0800f043
 800ef70:	0800f043 	.word	0x0800f043
 800ef74:	0800efff 	.word	0x0800efff
 800ef78:	0800f043 	.word	0x0800f043
 800ef7c:	0800f043 	.word	0x0800f043
 800ef80:	0800f043 	.word	0x0800f043
 800ef84:	0800f043 	.word	0x0800f043
 800ef88:	0800f043 	.word	0x0800f043
 800ef8c:	0800f043 	.word	0x0800f043
 800ef90:	0800f043 	.word	0x0800f043
 800ef94:	0800f00f 	.word	0x0800f00f
 800ef98:	0800f043 	.word	0x0800f043
 800ef9c:	0800f043 	.word	0x0800f043
 800efa0:	0800f043 	.word	0x0800f043
 800efa4:	0800f043 	.word	0x0800f043
 800efa8:	0800f043 	.word	0x0800f043
 800efac:	0800f043 	.word	0x0800f043
 800efb0:	0800f043 	.word	0x0800f043
 800efb4:	0800f043 	.word	0x0800f043
 800efb8:	0800f043 	.word	0x0800f043
 800efbc:	0800f043 	.word	0x0800f043
 800efc0:	0800f043 	.word	0x0800f043
 800efc4:	0800f043 	.word	0x0800f043
 800efc8:	0800f043 	.word	0x0800f043
 800efcc:	0800f043 	.word	0x0800f043
 800efd0:	0800f043 	.word	0x0800f043
 800efd4:	0800f035 	.word	0x0800f035
 800efd8:	2b40      	cmp	r3, #64	; 0x40
 800efda:	d02e      	beq.n	800f03a <UART_SetConfig+0xab2>
 800efdc:	e031      	b.n	800f042 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efde:	f7fb faad 	bl	800a53c <HAL_RCC_GetPCLK1Freq>
 800efe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800efe4:	e033      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efe6:	f7fb fabf 	bl	800a568 <HAL_RCC_GetPCLK2Freq>
 800efea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800efec:	e02f      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fd f97a 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800effc:	e027      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800effe:	f107 0318 	add.w	r3, r7, #24
 800f002:	4618      	mov	r0, r3
 800f004:	f7fd fac6 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f00c:	e01f      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f00e:	4b69      	ldr	r3, [pc, #420]	; (800f1b4 <UART_SetConfig+0xc2c>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 0320 	and.w	r3, r3, #32
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f01a:	4b66      	ldr	r3, [pc, #408]	; (800f1b4 <UART_SetConfig+0xc2c>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	08db      	lsrs	r3, r3, #3
 800f020:	f003 0303 	and.w	r3, r3, #3
 800f024:	4a64      	ldr	r2, [pc, #400]	; (800f1b8 <UART_SetConfig+0xc30>)
 800f026:	fa22 f303 	lsr.w	r3, r2, r3
 800f02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f02c:	e00f      	b.n	800f04e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f02e:	4b62      	ldr	r3, [pc, #392]	; (800f1b8 <UART_SetConfig+0xc30>)
 800f030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f032:	e00c      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f034:	4b61      	ldr	r3, [pc, #388]	; (800f1bc <UART_SetConfig+0xc34>)
 800f036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f038:	e009      	b.n	800f04e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f040:	e005      	b.n	800f04e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f04c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80ea 	beq.w	800f22a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05a:	4a55      	ldr	r2, [pc, #340]	; (800f1b0 <UART_SetConfig+0xc28>)
 800f05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f060:	461a      	mov	r2, r3
 800f062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f064:	fbb3 f3f2 	udiv	r3, r3, r2
 800f068:	005a      	lsls	r2, r3, #1
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	085b      	lsrs	r3, r3, #1
 800f070:	441a      	add	r2, r3
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	fbb2 f3f3 	udiv	r3, r2, r3
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	2b0f      	cmp	r3, #15
 800f080:	d916      	bls.n	800f0b0 <UART_SetConfig+0xb28>
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f088:	d212      	bcs.n	800f0b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	f023 030f 	bic.w	r3, r3, #15
 800f092:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f096:	085b      	lsrs	r3, r3, #1
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0ac:	60da      	str	r2, [r3, #12]
 800f0ae:	e0bc      	b.n	800f22a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f0b6:	e0b8      	b.n	800f22a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0bc:	2b20      	cmp	r3, #32
 800f0be:	dc4b      	bgt.n	800f158 <UART_SetConfig+0xbd0>
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f2c0 8087 	blt.w	800f1d4 <UART_SetConfig+0xc4c>
 800f0c6:	2b20      	cmp	r3, #32
 800f0c8:	f200 8084 	bhi.w	800f1d4 <UART_SetConfig+0xc4c>
 800f0cc:	a201      	add	r2, pc, #4	; (adr r2, 800f0d4 <UART_SetConfig+0xb4c>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f15f 	.word	0x0800f15f
 800f0d8:	0800f167 	.word	0x0800f167
 800f0dc:	0800f1d5 	.word	0x0800f1d5
 800f0e0:	0800f1d5 	.word	0x0800f1d5
 800f0e4:	0800f16f 	.word	0x0800f16f
 800f0e8:	0800f1d5 	.word	0x0800f1d5
 800f0ec:	0800f1d5 	.word	0x0800f1d5
 800f0f0:	0800f1d5 	.word	0x0800f1d5
 800f0f4:	0800f17f 	.word	0x0800f17f
 800f0f8:	0800f1d5 	.word	0x0800f1d5
 800f0fc:	0800f1d5 	.word	0x0800f1d5
 800f100:	0800f1d5 	.word	0x0800f1d5
 800f104:	0800f1d5 	.word	0x0800f1d5
 800f108:	0800f1d5 	.word	0x0800f1d5
 800f10c:	0800f1d5 	.word	0x0800f1d5
 800f110:	0800f1d5 	.word	0x0800f1d5
 800f114:	0800f18f 	.word	0x0800f18f
 800f118:	0800f1d5 	.word	0x0800f1d5
 800f11c:	0800f1d5 	.word	0x0800f1d5
 800f120:	0800f1d5 	.word	0x0800f1d5
 800f124:	0800f1d5 	.word	0x0800f1d5
 800f128:	0800f1d5 	.word	0x0800f1d5
 800f12c:	0800f1d5 	.word	0x0800f1d5
 800f130:	0800f1d5 	.word	0x0800f1d5
 800f134:	0800f1d5 	.word	0x0800f1d5
 800f138:	0800f1d5 	.word	0x0800f1d5
 800f13c:	0800f1d5 	.word	0x0800f1d5
 800f140:	0800f1d5 	.word	0x0800f1d5
 800f144:	0800f1d5 	.word	0x0800f1d5
 800f148:	0800f1d5 	.word	0x0800f1d5
 800f14c:	0800f1d5 	.word	0x0800f1d5
 800f150:	0800f1d5 	.word	0x0800f1d5
 800f154:	0800f1c7 	.word	0x0800f1c7
 800f158:	2b40      	cmp	r3, #64	; 0x40
 800f15a:	d037      	beq.n	800f1cc <UART_SetConfig+0xc44>
 800f15c:	e03a      	b.n	800f1d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f15e:	f7fb f9ed 	bl	800a53c <HAL_RCC_GetPCLK1Freq>
 800f162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f164:	e03c      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f166:	f7fb f9ff 	bl	800a568 <HAL_RCC_GetPCLK2Freq>
 800f16a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f16c:	e038      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f172:	4618      	mov	r0, r3
 800f174:	f7fd f8ba 	bl	800c2ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f17c:	e030      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f17e:	f107 0318 	add.w	r3, r7, #24
 800f182:	4618      	mov	r0, r3
 800f184:	f7fd fa06 	bl	800c594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f18c:	e028      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f18e:	4b09      	ldr	r3, [pc, #36]	; (800f1b4 <UART_SetConfig+0xc2c>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f003 0320 	and.w	r3, r3, #32
 800f196:	2b00      	cmp	r3, #0
 800f198:	d012      	beq.n	800f1c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f19a:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <UART_SetConfig+0xc2c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	08db      	lsrs	r3, r3, #3
 800f1a0:	f003 0303 	and.w	r3, r3, #3
 800f1a4:	4a04      	ldr	r2, [pc, #16]	; (800f1b8 <UART_SetConfig+0xc30>)
 800f1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1ac:	e018      	b.n	800f1e0 <UART_SetConfig+0xc58>
 800f1ae:	bf00      	nop
 800f1b0:	080177e0 	.word	0x080177e0
 800f1b4:	58024400 	.word	0x58024400
 800f1b8:	03d09000 	.word	0x03d09000
 800f1bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f1c0:	4b24      	ldr	r3, [pc, #144]	; (800f254 <UART_SetConfig+0xccc>)
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1c4:	e00c      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1c6:	4b24      	ldr	r3, [pc, #144]	; (800f258 <UART_SetConfig+0xcd0>)
 800f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ca:	e009      	b.n	800f1e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d2:	e005      	b.n	800f1e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1de:	bf00      	nop
    }

    if (pclk != 0U)
 800f1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d021      	beq.n	800f22a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ea:	4a1c      	ldr	r2, [pc, #112]	; (800f25c <UART_SetConfig+0xcd4>)
 800f1ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	085b      	lsrs	r3, r3, #1
 800f1fe:	441a      	add	r2, r3
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	fbb2 f3f3 	udiv	r3, r2, r3
 800f208:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	2b0f      	cmp	r3, #15
 800f20e:	d909      	bls.n	800f224 <UART_SetConfig+0xc9c>
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f216:	d205      	bcs.n	800f224 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	b29a      	uxth	r2, r3
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60da      	str	r2, [r3, #12]
 800f222:	e002      	b.n	800f22a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2201      	movs	r2, #1
 800f22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	2201      	movs	r2, #1
 800f236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2200      	movs	r2, #0
 800f23e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2200      	movs	r2, #0
 800f244:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f246:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3748      	adds	r7, #72	; 0x48
 800f24e:	46bd      	mov	sp, r7
 800f250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f254:	03d09000 	.word	0x03d09000
 800f258:	003d0900 	.word	0x003d0900
 800f25c:	080177e0 	.word	0x080177e0

0800f260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f26c:	f003 0301 	and.w	r3, r3, #1
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00a      	beq.n	800f28a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	430a      	orrs	r2, r1
 800f288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28e:	f003 0302 	and.w	r3, r3, #2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00a      	beq.n	800f2ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	430a      	orrs	r2, r1
 800f2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b0:	f003 0304 	and.w	r3, r3, #4
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00a      	beq.n	800f2ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d2:	f003 0308 	and.w	r3, r3, #8
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00a      	beq.n	800f2f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00a      	beq.n	800f312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	430a      	orrs	r2, r1
 800f310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f316:	f003 0320 	and.w	r3, r3, #32
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00a      	beq.n	800f334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	430a      	orrs	r2, r1
 800f332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d01a      	beq.n	800f376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	430a      	orrs	r2, r1
 800f354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f35e:	d10a      	bne.n	800f376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00a      	beq.n	800f398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	430a      	orrs	r2, r1
 800f396:	605a      	str	r2, [r3, #4]
  }
}
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b098      	sub	sp, #96	; 0x60
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3b4:	f7f4 fe26 	bl	8004004 <HAL_GetTick>
 800f3b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0308 	and.w	r3, r3, #8
 800f3c4:	2b08      	cmp	r3, #8
 800f3c6:	d12f      	bne.n	800f428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f88e 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d022      	beq.n	800f428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ea:	e853 3f00 	ldrex	r3, [r3]
 800f3ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f400:	647b      	str	r3, [r7, #68]	; 0x44
 800f402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f408:	e841 2300 	strex	r3, r2, [r1]
 800f40c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1e6      	bne.n	800f3e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2220      	movs	r2, #32
 800f418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f424:	2303      	movs	r3, #3
 800f426:	e063      	b.n	800f4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b04      	cmp	r3, #4
 800f434:	d149      	bne.n	800f4ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f436:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f43e:	2200      	movs	r2, #0
 800f440:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f857 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d03c      	beq.n	800f4ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	e853 3f00 	ldrex	r3, [r3]
 800f45c:	623b      	str	r3, [r7, #32]
   return(result);
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f46e:	633b      	str	r3, [r7, #48]	; 0x30
 800f470:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f476:	e841 2300 	strex	r3, r2, [r1]
 800f47a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1e6      	bne.n	800f450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	3308      	adds	r3, #8
 800f488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	60fb      	str	r3, [r7, #12]
   return(result);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f023 0301 	bic.w	r3, r3, #1
 800f498:	64bb      	str	r3, [r7, #72]	; 0x48
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a2:	61fa      	str	r2, [r7, #28]
 800f4a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a6:	69b9      	ldr	r1, [r7, #24]
 800f4a8:	69fa      	ldr	r2, [r7, #28]
 800f4aa:	e841 2300 	strex	r3, r2, [r1]
 800f4ae:	617b      	str	r3, [r7, #20]
   return(result);
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e5      	bne.n	800f482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4c6:	2303      	movs	r3, #3
 800f4c8:	e012      	b.n	800f4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2220      	movs	r2, #32
 800f4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2220      	movs	r2, #32
 800f4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3758      	adds	r7, #88	; 0x58
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	603b      	str	r3, [r7, #0]
 800f504:	4613      	mov	r3, r2
 800f506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f508:	e049      	b.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f510:	d045      	beq.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f512:	f7f4 fd77 	bl	8004004 <HAL_GetTick>
 800f516:	4602      	mov	r2, r0
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	69ba      	ldr	r2, [r7, #24]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d302      	bcc.n	800f528 <UART_WaitOnFlagUntilTimeout+0x30>
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f528:	2303      	movs	r3, #3
 800f52a:	e048      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 0304 	and.w	r3, r3, #4
 800f536:	2b00      	cmp	r3, #0
 800f538:	d031      	beq.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	f003 0308 	and.w	r3, r3, #8
 800f544:	2b08      	cmp	r3, #8
 800f546:	d110      	bne.n	800f56a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2208      	movs	r2, #8
 800f54e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 f95b 	bl	800f80c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2208      	movs	r2, #8
 800f55a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	e029      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f578:	d111      	bne.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 f941 	bl	800f80c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2220      	movs	r2, #32
 800f58e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f59a:	2303      	movs	r3, #3
 800f59c:	e00f      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69da      	ldr	r2, [r3, #28]
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	bf0c      	ite	eq
 800f5ae:	2301      	moveq	r3, #1
 800f5b0:	2300      	movne	r3, #0
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d0a6      	beq.n	800f50a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b0a3      	sub	sp, #140	; 0x8c
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	88fa      	ldrh	r2, [r7, #6]
 800f5e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	88fa      	ldrh	r2, [r7, #6]
 800f5e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5fa:	d10e      	bne.n	800f61a <UART_Start_Receive_IT+0x52>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d105      	bne.n	800f610 <UART_Start_Receive_IT+0x48>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f60a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f60e:	e02d      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	22ff      	movs	r2, #255	; 0xff
 800f614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f618:	e028      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10d      	bne.n	800f63e <UART_Start_Receive_IT+0x76>
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d104      	bne.n	800f634 <UART_Start_Receive_IT+0x6c>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	22ff      	movs	r2, #255	; 0xff
 800f62e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f632:	e01b      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	227f      	movs	r2, #127	; 0x7f
 800f638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f63c:	e016      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f646:	d10d      	bne.n	800f664 <UART_Start_Receive_IT+0x9c>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d104      	bne.n	800f65a <UART_Start_Receive_IT+0x92>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	227f      	movs	r2, #127	; 0x7f
 800f654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f658:	e008      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	223f      	movs	r2, #63	; 0x3f
 800f65e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f662:	e003      	b.n	800f66c <UART_Start_Receive_IT+0xa4>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2222      	movs	r2, #34	; 0x22
 800f678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	3308      	adds	r3, #8
 800f682:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f686:	e853 3f00 	ldrex	r3, [r3]
 800f68a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f68c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f68e:	f043 0301 	orr.w	r3, r3, #1
 800f692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	3308      	adds	r3, #8
 800f69c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f6a0:	673a      	str	r2, [r7, #112]	; 0x70
 800f6a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f6a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f6a8:	e841 2300 	strex	r3, r2, [r1]
 800f6ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f6ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1e3      	bne.n	800f67c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6bc:	d14f      	bne.n	800f75e <UART_Start_Receive_IT+0x196>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6c4:	88fa      	ldrh	r2, [r7, #6]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d349      	bcc.n	800f75e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6d2:	d107      	bne.n	800f6e4 <UART_Start_Receive_IT+0x11c>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d103      	bne.n	800f6e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4a47      	ldr	r2, [pc, #284]	; (800f7fc <UART_Start_Receive_IT+0x234>)
 800f6e0:	675a      	str	r2, [r3, #116]	; 0x74
 800f6e2:	e002      	b.n	800f6ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	4a46      	ldr	r2, [pc, #280]	; (800f800 <UART_Start_Receive_IT+0x238>)
 800f6e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d01a      	beq.n	800f728 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6fa:	e853 3f00 	ldrex	r3, [r3]
 800f6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	461a      	mov	r2, r3
 800f710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f714:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f716:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f71a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f71c:	e841 2300 	strex	r3, r2, [r1]
 800f720:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1e4      	bne.n	800f6f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	3308      	adds	r3, #8
 800f72e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	e853 3f00 	ldrex	r3, [r3]
 800f736:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f73e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3308      	adds	r3, #8
 800f746:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f748:	64ba      	str	r2, [r7, #72]	; 0x48
 800f74a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f74e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f750:	e841 2300 	strex	r3, r2, [r1]
 800f754:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1e5      	bne.n	800f728 <UART_Start_Receive_IT+0x160>
 800f75c:	e046      	b.n	800f7ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f766:	d107      	bne.n	800f778 <UART_Start_Receive_IT+0x1b0>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d103      	bne.n	800f778 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	4a24      	ldr	r2, [pc, #144]	; (800f804 <UART_Start_Receive_IT+0x23c>)
 800f774:	675a      	str	r2, [r3, #116]	; 0x74
 800f776:	e002      	b.n	800f77e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	4a23      	ldr	r2, [pc, #140]	; (800f808 <UART_Start_Receive_IT+0x240>)
 800f77c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d019      	beq.n	800f7ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78e:	e853 3f00 	ldrex	r3, [r3]
 800f792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f796:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f79a:	677b      	str	r3, [r7, #116]	; 0x74
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f7a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7ac:	e841 2300 	strex	r3, r2, [r1]
 800f7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1e6      	bne.n	800f786 <UART_Start_Receive_IT+0x1be>
 800f7b8:	e018      	b.n	800f7ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	e853 3f00 	ldrex	r3, [r3]
 800f7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f043 0320 	orr.w	r3, r3, #32
 800f7ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7d8:	623b      	str	r3, [r7, #32]
 800f7da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7dc:	69f9      	ldr	r1, [r7, #28]
 800f7de:	6a3a      	ldr	r2, [r7, #32]
 800f7e0:	e841 2300 	strex	r3, r2, [r1]
 800f7e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d1e6      	bne.n	800f7ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	378c      	adds	r7, #140	; 0x8c
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	0801002d 	.word	0x0801002d
 800f800:	0800fccd 	.word	0x0800fccd
 800f804:	0800fb15 	.word	0x0800fb15
 800f808:	0800f95d 	.word	0x0800f95d

0800f80c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b095      	sub	sp, #84	; 0x54
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f81c:	e853 3f00 	ldrex	r3, [r3]
 800f820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f832:	643b      	str	r3, [r7, #64]	; 0x40
 800f834:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f83a:	e841 2300 	strex	r3, r2, [r1]
 800f83e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1e6      	bne.n	800f814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3308      	adds	r3, #8
 800f84c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84e:	6a3b      	ldr	r3, [r7, #32]
 800f850:	e853 3f00 	ldrex	r3, [r3]
 800f854:	61fb      	str	r3, [r7, #28]
   return(result);
 800f856:	69fa      	ldr	r2, [r7, #28]
 800f858:	4b1e      	ldr	r3, [pc, #120]	; (800f8d4 <UART_EndRxTransfer+0xc8>)
 800f85a:	4013      	ands	r3, r2
 800f85c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	3308      	adds	r3, #8
 800f864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f866:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86e:	e841 2300 	strex	r3, r2, [r1]
 800f872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e5      	bne.n	800f846 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d118      	bne.n	800f8b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	e853 3f00 	ldrex	r3, [r3]
 800f88e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f023 0310 	bic.w	r3, r3, #16
 800f896:	647b      	str	r3, [r7, #68]	; 0x44
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	461a      	mov	r2, r3
 800f89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8a0:	61bb      	str	r3, [r7, #24]
 800f8a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a4:	6979      	ldr	r1, [r7, #20]
 800f8a6:	69ba      	ldr	r2, [r7, #24]
 800f8a8:	e841 2300 	strex	r3, r2, [r1]
 800f8ac:	613b      	str	r3, [r7, #16]
   return(result);
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1e6      	bne.n	800f882 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2220      	movs	r2, #32
 800f8b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f8c8:	bf00      	nop
 800f8ca:	3754      	adds	r7, #84	; 0x54
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	effffffe 	.word	0xeffffffe

0800f8d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7fe fe3c 	bl	800e574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8fc:	bf00      	nop
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b088      	sub	sp, #32
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	60bb      	str	r3, [r7, #8]
   return(result);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f920:	61fb      	str	r3, [r7, #28]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	61bb      	str	r3, [r7, #24]
 800f92c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92e:	6979      	ldr	r1, [r7, #20]
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	e841 2300 	strex	r3, r2, [r1]
 800f936:	613b      	str	r3, [r7, #16]
   return(result);
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1e6      	bne.n	800f90c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fe fdfd 	bl	800e54c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f952:	bf00      	nop
 800f954:	3720      	adds	r7, #32
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
	...

0800f95c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b09c      	sub	sp, #112	; 0x70
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f96a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f974:	2b22      	cmp	r3, #34	; 0x22
 800f976:	f040 80be 	bne.w	800faf6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f980:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f984:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f988:	b2d9      	uxtb	r1, r3
 800f98a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f98e:	b2da      	uxtb	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f994:	400a      	ands	r2, r1
 800f996:	b2d2      	uxtb	r2, r2
 800f998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f040 80a1 	bne.w	800fb06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9cc:	e853 3f00 	ldrex	r3, [r3]
 800f9d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9ea:	e841 2300 	strex	r3, r2, [r1]
 800f9ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e6      	bne.n	800f9c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa08:	f023 0301 	bic.w	r3, r3, #1
 800fa0c:	667b      	str	r3, [r7, #100]	; 0x64
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3308      	adds	r3, #8
 800fa14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa16:	647a      	str	r2, [r7, #68]	; 0x44
 800fa18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e5      	bne.n	800f9f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a33      	ldr	r2, [pc, #204]	; (800fb10 <UART_RxISR_8BIT+0x1b4>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d01f      	beq.n	800fa88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d018      	beq.n	800fa88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	e853 3f00 	ldrex	r3, [r3]
 800fa62:	623b      	str	r3, [r7, #32]
   return(result);
 800fa64:	6a3b      	ldr	r3, [r7, #32]
 800fa66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fa6a:	663b      	str	r3, [r7, #96]	; 0x60
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	461a      	mov	r2, r3
 800fa72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa74:	633b      	str	r3, [r7, #48]	; 0x30
 800fa76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7c:	e841 2300 	strex	r3, r2, [r1]
 800fa80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1e6      	bne.n	800fa56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d12e      	bne.n	800faee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	e853 3f00 	ldrex	r3, [r3]
 800faa2:	60fb      	str	r3, [r7, #12]
   return(result);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f023 0310 	bic.w	r3, r3, #16
 800faaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	461a      	mov	r2, r3
 800fab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fab4:	61fb      	str	r3, [r7, #28]
 800fab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab8:	69b9      	ldr	r1, [r7, #24]
 800faba:	69fa      	ldr	r2, [r7, #28]
 800fabc:	e841 2300 	strex	r3, r2, [r1]
 800fac0:	617b      	str	r3, [r7, #20]
   return(result);
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1e6      	bne.n	800fa96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	69db      	ldr	r3, [r3, #28]
 800face:	f003 0310 	and.w	r3, r3, #16
 800fad2:	2b10      	cmp	r3, #16
 800fad4:	d103      	bne.n	800fade <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	2210      	movs	r2, #16
 800fadc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fae4:	4619      	mov	r1, r3
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7f2 fb66 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800faec:	e00b      	b.n	800fb06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7fe fd36 	bl	800e560 <HAL_UART_RxCpltCallback>
}
 800faf4:	e007      	b.n	800fb06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	699a      	ldr	r2, [r3, #24]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f042 0208 	orr.w	r2, r2, #8
 800fb04:	619a      	str	r2, [r3, #24]
}
 800fb06:	bf00      	nop
 800fb08:	3770      	adds	r7, #112	; 0x70
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	58000c00 	.word	0x58000c00

0800fb14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b09c      	sub	sp, #112	; 0x70
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb2c:	2b22      	cmp	r3, #34	; 0x22
 800fb2e:	f040 80be 	bne.w	800fcae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fb42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800fb46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb56:	1c9a      	adds	r2, r3, #2
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	3b01      	subs	r3, #1
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f040 80a1 	bne.w	800fcbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb84:	e853 3f00 	ldrex	r3, [r3]
 800fb88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb90:	667b      	str	r3, [r7, #100]	; 0x64
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	461a      	mov	r2, r3
 800fb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb9a:	657b      	str	r3, [r7, #84]	; 0x54
 800fb9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fba2:	e841 2300 	strex	r3, r2, [r1]
 800fba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1e6      	bne.n	800fb7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	3308      	adds	r3, #8
 800fbb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb8:	e853 3f00 	ldrex	r3, [r3]
 800fbbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc0:	f023 0301 	bic.w	r3, r3, #1
 800fbc4:	663b      	str	r3, [r7, #96]	; 0x60
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbce:	643a      	str	r2, [r7, #64]	; 0x40
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbd6:	e841 2300 	strex	r3, r2, [r1]
 800fbda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1e5      	bne.n	800fbae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2220      	movs	r2, #32
 800fbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a33      	ldr	r2, [pc, #204]	; (800fcc8 <UART_RxISR_16BIT+0x1b4>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d01f      	beq.n	800fc40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d018      	beq.n	800fc40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	e853 3f00 	ldrex	r3, [r3]
 800fc1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc34:	e841 2300 	strex	r3, r2, [r1]
 800fc38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1e6      	bne.n	800fc0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d12e      	bne.n	800fca6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	e853 3f00 	ldrex	r3, [r3]
 800fc5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	f023 0310 	bic.w	r3, r3, #16
 800fc62:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	461a      	mov	r2, r3
 800fc6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc6c:	61bb      	str	r3, [r7, #24]
 800fc6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc70:	6979      	ldr	r1, [r7, #20]
 800fc72:	69ba      	ldr	r2, [r7, #24]
 800fc74:	e841 2300 	strex	r3, r2, [r1]
 800fc78:	613b      	str	r3, [r7, #16]
   return(result);
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1e6      	bne.n	800fc4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	f003 0310 	and.w	r3, r3, #16
 800fc8a:	2b10      	cmp	r3, #16
 800fc8c:	d103      	bne.n	800fc96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2210      	movs	r2, #16
 800fc94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7f2 fa8a 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fca4:	e00b      	b.n	800fcbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f7fe fc5a 	bl	800e560 <HAL_UART_RxCpltCallback>
}
 800fcac:	e007      	b.n	800fcbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	699a      	ldr	r2, [r3, #24]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f042 0208 	orr.w	r2, r2, #8
 800fcbc:	619a      	str	r2, [r3, #24]
}
 800fcbe:	bf00      	nop
 800fcc0:	3770      	adds	r7, #112	; 0x70
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	58000c00 	.word	0x58000c00

0800fccc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b0ac      	sub	sp, #176	; 0xb0
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd02:	2b22      	cmp	r3, #34	; 0x22
 800fd04:	f040 8180 	bne.w	8010008 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd12:	e123      	b.n	800ff5c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fd22:	b2d9      	uxtb	r1, r3
 800fd24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd2e:	400a      	ands	r2, r1
 800fd30:	b2d2      	uxtb	r2, r2
 800fd32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd38:	1c5a      	adds	r2, r3, #1
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	3b01      	subs	r3, #1
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd5e:	f003 0307 	and.w	r3, r3, #7
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d053      	beq.n	800fe0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d011      	beq.n	800fd96 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fd72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00b      	beq.n	800fd96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2201      	movs	r2, #1
 800fd84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd8c:	f043 0201 	orr.w	r2, r3, #1
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd9a:	f003 0302 	and.w	r3, r3, #2
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d011      	beq.n	800fdc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fda2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00b      	beq.n	800fdc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2202      	movs	r2, #2
 800fdb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdbc:	f043 0204 	orr.w	r2, r3, #4
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fdca:	f003 0304 	and.w	r3, r3, #4
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d011      	beq.n	800fdf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fdd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fdd6:	f003 0301 	and.w	r3, r3, #1
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00b      	beq.n	800fdf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2204      	movs	r2, #4
 800fde4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdec:	f043 0202 	orr.w	r2, r3, #2
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d006      	beq.n	800fe0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7fe fbb7 	bl	800e574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f040 80a0 	bne.w	800ff5c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe24:	e853 3f00 	ldrex	r3, [r3]
 800fe28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800fe2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fe3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fe40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fe44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe46:	e841 2300 	strex	r3, r2, [r1]
 800fe4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800fe4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1e4      	bne.n	800fe1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	3308      	adds	r3, #8
 800fe58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe5c:	e853 3f00 	ldrex	r3, [r3]
 800fe60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fe62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe64:	4b6e      	ldr	r3, [pc, #440]	; (8010020 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fe66:	4013      	ands	r3, r2
 800fe68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3308      	adds	r3, #8
 800fe72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fe76:	66ba      	str	r2, [r7, #104]	; 0x68
 800fe78:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fe7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe7e:	e841 2300 	strex	r3, r2, [r1]
 800fe82:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fe84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d1e3      	bne.n	800fe52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2220      	movs	r2, #32
 800fe8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a60      	ldr	r2, [pc, #384]	; (8010024 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d021      	beq.n	800feec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d01a      	beq.n	800feec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800febc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800febe:	e853 3f00 	ldrex	r3, [r3]
 800fec2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800feca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fed8:	657b      	str	r3, [r7, #84]	; 0x54
 800feda:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fedc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fede:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fee0:	e841 2300 	strex	r3, r2, [r1]
 800fee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1e4      	bne.n	800feb6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d130      	bne.n	800ff56 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff02:	e853 3f00 	ldrex	r3, [r3]
 800ff06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0a:	f023 0310 	bic.w	r3, r3, #16
 800ff0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ff1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff24:	e841 2300 	strex	r3, r2, [r1]
 800ff28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ff2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1e4      	bne.n	800fefa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69db      	ldr	r3, [r3, #28]
 800ff36:	f003 0310 	and.w	r3, r3, #16
 800ff3a:	2b10      	cmp	r3, #16
 800ff3c:	d103      	bne.n	800ff46 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2210      	movs	r2, #16
 800ff44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7f2 f932 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
 800ff54:	e002      	b.n	800ff5c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7fe fb02 	bl	800e560 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d006      	beq.n	800ff72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ff64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff68:	f003 0320 	and.w	r3, r3, #32
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f47f aed1 	bne.w	800fd14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d049      	beq.n	8010018 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff8a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d242      	bcs.n	8010018 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3308      	adds	r3, #8
 800ff98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff9a:	6a3b      	ldr	r3, [r7, #32]
 800ff9c:	e853 3f00 	ldrex	r3, [r3]
 800ffa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ffa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	3308      	adds	r3, #8
 800ffb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ffb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ffb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffbe:	e841 2300 	strex	r3, r2, [r1]
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d1e3      	bne.n	800ff92 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4a16      	ldr	r2, [pc, #88]	; (8010028 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ffce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	e853 3f00 	ldrex	r3, [r3]
 800ffdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	f043 0320 	orr.w	r3, r3, #32
 800ffe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	461a      	mov	r2, r3
 800ffee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fff2:	61bb      	str	r3, [r7, #24]
 800fff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff6:	6979      	ldr	r1, [r7, #20]
 800fff8:	69ba      	ldr	r2, [r7, #24]
 800fffa:	e841 2300 	strex	r3, r2, [r1]
 800fffe:	613b      	str	r3, [r7, #16]
   return(result);
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d1e4      	bne.n	800ffd0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010006:	e007      	b.n	8010018 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	699a      	ldr	r2, [r3, #24]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f042 0208 	orr.w	r2, r2, #8
 8010016:	619a      	str	r2, [r3, #24]
}
 8010018:	bf00      	nop
 801001a:	37b0      	adds	r7, #176	; 0xb0
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	effffffe 	.word	0xeffffffe
 8010024:	58000c00 	.word	0x58000c00
 8010028:	0800f95d 	.word	0x0800f95d

0801002c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b0ae      	sub	sp, #184	; 0xb8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801003a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	69db      	ldr	r3, [r3, #28]
 8010044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010062:	2b22      	cmp	r3, #34	; 0x22
 8010064:	f040 8184 	bne.w	8010370 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801006e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010072:	e127      	b.n	80102c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010086:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801008a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801008e:	4013      	ands	r3, r2
 8010090:	b29a      	uxth	r2, r3
 8010092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801009c:	1c9a      	adds	r2, r3, #2
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	3b01      	subs	r3, #1
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	69db      	ldr	r3, [r3, #28]
 80100ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80100be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100c2:	f003 0307 	and.w	r3, r3, #7
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d053      	beq.n	8010172 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d011      	beq.n	80100fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80100d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00b      	beq.n	80100fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2201      	movs	r2, #1
 80100e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100f0:	f043 0201 	orr.w	r2, r3, #1
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100fe:	f003 0302 	and.w	r3, r3, #2
 8010102:	2b00      	cmp	r3, #0
 8010104:	d011      	beq.n	801012a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00b      	beq.n	801012a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2202      	movs	r2, #2
 8010118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010120:	f043 0204 	orr.w	r2, r3, #4
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801012a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801012e:	f003 0304 	and.w	r3, r3, #4
 8010132:	2b00      	cmp	r3, #0
 8010134:	d011      	beq.n	801015a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00b      	beq.n	801015a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2204      	movs	r2, #4
 8010148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010150:	f043 0202 	orr.w	r2, r3, #2
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010160:	2b00      	cmp	r3, #0
 8010162:	d006      	beq.n	8010172 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7fe fa05 	bl	800e574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010178:	b29b      	uxth	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	f040 80a2 	bne.w	80102c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801018e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80101a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80101a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101ae:	e841 2300 	strex	r3, r2, [r1]
 80101b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80101b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1e2      	bne.n	8010180 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3308      	adds	r3, #8
 80101c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101c4:	e853 3f00 	ldrex	r3, [r3]
 80101c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80101ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101cc:	4b6e      	ldr	r3, [pc, #440]	; (8010388 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80101ce:	4013      	ands	r3, r2
 80101d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3308      	adds	r3, #8
 80101da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80101de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80101e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80101e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101e6:	e841 2300 	strex	r3, r2, [r1]
 80101ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80101ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1e3      	bne.n	80101ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2220      	movs	r2, #32
 80101f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a60      	ldr	r2, [pc, #384]	; (801038c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d021      	beq.n	8010254 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801021a:	2b00      	cmp	r3, #0
 801021c:	d01a      	beq.n	8010254 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010226:	e853 3f00 	ldrex	r3, [r3]
 801022a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801022c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801022e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010240:	65bb      	str	r3, [r7, #88]	; 0x58
 8010242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010248:	e841 2300 	strex	r3, r2, [r1]
 801024c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801024e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e4      	bne.n	801021e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010258:	2b01      	cmp	r3, #1
 801025a:	d130      	bne.n	80102be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026a:	e853 3f00 	ldrex	r3, [r3]
 801026e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010272:	f023 0310 	bic.w	r3, r3, #16
 8010276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	461a      	mov	r2, r3
 8010280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010284:	647b      	str	r3, [r7, #68]	; 0x44
 8010286:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801028a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801028c:	e841 2300 	strex	r3, r2, [r1]
 8010290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010294:	2b00      	cmp	r3, #0
 8010296:	d1e4      	bne.n	8010262 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	69db      	ldr	r3, [r3, #28]
 801029e:	f003 0310 	and.w	r3, r3, #16
 80102a2:	2b10      	cmp	r3, #16
 80102a4:	d103      	bne.n	80102ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2210      	movs	r2, #16
 80102ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7f1 ff7e 	bl	80021b8 <HAL_UARTEx_RxEventCallback>
 80102bc:	e002      	b.n	80102c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7fe f94e 	bl	800e560 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80102c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d006      	beq.n	80102da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80102cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80102d0:	f003 0320 	and.w	r3, r3, #32
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f47f aecd 	bne.w	8010074 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80102e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d049      	beq.n	8010380 <UART_RxISR_16BIT_FIFOEN+0x354>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d242      	bcs.n	8010380 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	3308      	adds	r3, #8
 8010300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010304:	e853 3f00 	ldrex	r3, [r3]
 8010308:	623b      	str	r3, [r7, #32]
   return(result);
 801030a:	6a3b      	ldr	r3, [r7, #32]
 801030c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	3308      	adds	r3, #8
 801031a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801031e:	633a      	str	r2, [r7, #48]	; 0x30
 8010320:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010326:	e841 2300 	strex	r3, r2, [r1]
 801032a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1e3      	bne.n	80102fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a16      	ldr	r2, [pc, #88]	; (8010390 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010336:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	e853 3f00 	ldrex	r3, [r3]
 8010344:	60fb      	str	r3, [r7, #12]
   return(result);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f043 0320 	orr.w	r3, r3, #32
 801034c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	461a      	mov	r2, r3
 8010356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801035a:	61fb      	str	r3, [r7, #28]
 801035c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035e:	69b9      	ldr	r1, [r7, #24]
 8010360:	69fa      	ldr	r2, [r7, #28]
 8010362:	e841 2300 	strex	r3, r2, [r1]
 8010366:	617b      	str	r3, [r7, #20]
   return(result);
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d1e4      	bne.n	8010338 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801036e:	e007      	b.n	8010380 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	699a      	ldr	r2, [r3, #24]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f042 0208 	orr.w	r2, r2, #8
 801037e:	619a      	str	r2, [r3, #24]
}
 8010380:	bf00      	nop
 8010382:	37b8      	adds	r7, #184	; 0xb8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	effffffe 	.word	0xeffffffe
 801038c:	58000c00 	.word	0x58000c00
 8010390:	0800fb15 	.word	0x0800fb15

08010394 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80103b0:	bf00      	nop
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b085      	sub	sp, #20
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d101      	bne.n	80103e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80103e2:	2302      	movs	r3, #2
 80103e4:	e027      	b.n	8010436 <HAL_UARTEx_DisableFifoMode+0x66>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2224      	movs	r2, #36	; 0x24
 80103f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f022 0201 	bic.w	r2, r2, #1
 801040c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010414:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	68fa      	ldr	r2, [r7, #12]
 8010422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2220      	movs	r2, #32
 8010428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr

08010442 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
 801044a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010452:	2b01      	cmp	r3, #1
 8010454:	d101      	bne.n	801045a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010456:	2302      	movs	r3, #2
 8010458:	e02d      	b.n	80104b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2201      	movs	r2, #1
 801045e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2224      	movs	r2, #36	; 0x24
 8010466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f022 0201 	bic.w	r2, r2, #1
 8010480:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	430a      	orrs	r2, r1
 8010494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f8a4 	bl	80105e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2220      	movs	r2, #32
 80104a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80104b4:	2300      	movs	r3, #0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b084      	sub	sp, #16
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d101      	bne.n	80104d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80104d2:	2302      	movs	r3, #2
 80104d4:	e02d      	b.n	8010532 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2224      	movs	r2, #36	; 0x24
 80104e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f022 0201 	bic.w	r2, r2, #1
 80104fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	683a      	ldr	r2, [r7, #0]
 801050e:	430a      	orrs	r2, r1
 8010510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f866 	bl	80105e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2220      	movs	r2, #32
 8010524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b08c      	sub	sp, #48	; 0x30
 801053e:	af00      	add	r7, sp, #0
 8010540:	60f8      	str	r0, [r7, #12]
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	4613      	mov	r3, r2
 8010546:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801054e:	2b20      	cmp	r3, #32
 8010550:	d142      	bne.n	80105d8 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8010558:	88fb      	ldrh	r3, [r7, #6]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d101      	bne.n	8010562 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801055e:	2301      	movs	r3, #1
 8010560:	e03b      	b.n	80105da <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2201      	movs	r2, #1
 8010566:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2200      	movs	r2, #0
 801056c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801056e:	88fb      	ldrh	r3, [r7, #6]
 8010570:	461a      	mov	r2, r3
 8010572:	68b9      	ldr	r1, [r7, #8]
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f7ff f827 	bl	800f5c8 <UART_Start_Receive_IT>
 801057a:	4603      	mov	r3, r0
 801057c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010584:	2b00      	cmp	r3, #0
 8010586:	d124      	bne.n	80105d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801058c:	2b01      	cmp	r3, #1
 801058e:	d11d      	bne.n	80105cc <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2210      	movs	r2, #16
 8010596:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	e853 3f00 	ldrex	r3, [r3]
 80105a4:	617b      	str	r3, [r7, #20]
   return(result);
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	f043 0310 	orr.w	r3, r3, #16
 80105ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b6:	627b      	str	r3, [r7, #36]	; 0x24
 80105b8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ba:	6a39      	ldr	r1, [r7, #32]
 80105bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105be:	e841 2300 	strex	r3, r2, [r1]
 80105c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1e6      	bne.n	8010598 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80105ca:	e002      	b.n	80105d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80105d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105d6:	e000      	b.n	80105da <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80105d8:	2302      	movs	r3, #2
  }
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3730      	adds	r7, #48	; 0x30
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
	...

080105e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d108      	bne.n	8010606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2201      	movs	r2, #1
 8010600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010604:	e031      	b.n	801066a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010606:	2310      	movs	r3, #16
 8010608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801060a:	2310      	movs	r3, #16
 801060c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	0e5b      	lsrs	r3, r3, #25
 8010616:	b2db      	uxtb	r3, r3
 8010618:	f003 0307 	and.w	r3, r3, #7
 801061c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	0f5b      	lsrs	r3, r3, #29
 8010626:	b2db      	uxtb	r3, r3
 8010628:	f003 0307 	and.w	r3, r3, #7
 801062c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801062e:	7bbb      	ldrb	r3, [r7, #14]
 8010630:	7b3a      	ldrb	r2, [r7, #12]
 8010632:	4911      	ldr	r1, [pc, #68]	; (8010678 <UARTEx_SetNbDataToProcess+0x94>)
 8010634:	5c8a      	ldrb	r2, [r1, r2]
 8010636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801063a:	7b3a      	ldrb	r2, [r7, #12]
 801063c:	490f      	ldr	r1, [pc, #60]	; (801067c <UARTEx_SetNbDataToProcess+0x98>)
 801063e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010640:	fb93 f3f2 	sdiv	r3, r3, r2
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801064c:	7bfb      	ldrb	r3, [r7, #15]
 801064e:	7b7a      	ldrb	r2, [r7, #13]
 8010650:	4909      	ldr	r1, [pc, #36]	; (8010678 <UARTEx_SetNbDataToProcess+0x94>)
 8010652:	5c8a      	ldrb	r2, [r1, r2]
 8010654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010658:	7b7a      	ldrb	r2, [r7, #13]
 801065a:	4908      	ldr	r1, [pc, #32]	; (801067c <UARTEx_SetNbDataToProcess+0x98>)
 801065c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801065e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801066a:	bf00      	nop
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	080177f8 	.word	0x080177f8
 801067c:	08017800 	.word	0x08017800

08010680 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010684:	4904      	ldr	r1, [pc, #16]	; (8010698 <MX_FATFS_Init+0x18>)
 8010686:	4805      	ldr	r0, [pc, #20]	; (801069c <MX_FATFS_Init+0x1c>)
 8010688:	f002 fb96 	bl	8012db8 <FATFS_LinkDriver>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	4b03      	ldr	r3, [pc, #12]	; (80106a0 <MX_FATFS_Init+0x20>)
 8010692:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010694:	bf00      	nop
 8010696:	bd80      	pop	{r7, pc}
 8010698:	24002ccc 	.word	0x24002ccc
 801069c:	24000014 	.word	0x24000014
 80106a0:	24002cc8 	.word	0x24002cc8

080106a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80106a4:	b480      	push	{r7}
 80106a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80106a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	4603      	mov	r3, r0
 80106bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80106be:	79fb      	ldrb	r3, [r7, #7]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f0 ff3d 	bl	8001540 <SD_disk_initialize>
 80106c6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7f1 f815 	bl	800170c <SD_disk_status>
 80106e2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60b9      	str	r1, [r7, #8]
 80106f4:	607a      	str	r2, [r7, #4]
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	4603      	mov	r3, r0
 80106fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80106fc:	7bf8      	ldrb	r0, [r7, #15]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	68b9      	ldr	r1, [r7, #8]
 8010704:	f7f1 f818 	bl	8001738 <SD_disk_read>
 8010708:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801070a:	4618      	mov	r0, r3
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}

08010712 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b084      	sub	sp, #16
 8010716:	af00      	add	r7, sp, #0
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]
 801071e:	4603      	mov	r3, r0
 8010720:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8010722:	7bf8      	ldrb	r0, [r7, #15]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	68b9      	ldr	r1, [r7, #8]
 801072a:	f7f1 f86f 	bl	800180c <SD_disk_write>
 801072e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	4603      	mov	r3, r0
 8010740:	603a      	str	r2, [r7, #0]
 8010742:	71fb      	strb	r3, [r7, #7]
 8010744:	460b      	mov	r3, r1
 8010746:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8010748:	79b9      	ldrb	r1, [r7, #6]
 801074a:	79fb      	ldrb	r3, [r7, #7]
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	4618      	mov	r0, r3
 8010750:	f7f1 f8e0 	bl	8001914 <SD_disk_ioctl>
 8010754:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
	...

08010760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801076a:	79fb      	ldrb	r3, [r7, #7]
 801076c:	4a08      	ldr	r2, [pc, #32]	; (8010790 <disk_status+0x30>)
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	4413      	add	r3, r2
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	79fa      	ldrb	r2, [r7, #7]
 8010778:	4905      	ldr	r1, [pc, #20]	; (8010790 <disk_status+0x30>)
 801077a:	440a      	add	r2, r1
 801077c:	7a12      	ldrb	r2, [r2, #8]
 801077e:	4610      	mov	r0, r2
 8010780:	4798      	blx	r3
 8010782:	4603      	mov	r3, r0
 8010784:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010786:	7bfb      	ldrb	r3, [r7, #15]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	24002cf8 	.word	0x24002cf8

08010794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801079e:	2300      	movs	r3, #0
 80107a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80107a2:	79fb      	ldrb	r3, [r7, #7]
 80107a4:	4a0d      	ldr	r2, [pc, #52]	; (80107dc <disk_initialize+0x48>)
 80107a6:	5cd3      	ldrb	r3, [r2, r3]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d111      	bne.n	80107d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80107ac:	79fb      	ldrb	r3, [r7, #7]
 80107ae:	4a0b      	ldr	r2, [pc, #44]	; (80107dc <disk_initialize+0x48>)
 80107b0:	2101      	movs	r1, #1
 80107b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80107b4:	79fb      	ldrb	r3, [r7, #7]
 80107b6:	4a09      	ldr	r2, [pc, #36]	; (80107dc <disk_initialize+0x48>)
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	4413      	add	r3, r2
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	79fa      	ldrb	r2, [r7, #7]
 80107c2:	4906      	ldr	r1, [pc, #24]	; (80107dc <disk_initialize+0x48>)
 80107c4:	440a      	add	r2, r1
 80107c6:	7a12      	ldrb	r2, [r2, #8]
 80107c8:	4610      	mov	r0, r2
 80107ca:	4798      	blx	r3
 80107cc:	4603      	mov	r3, r0
 80107ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	24002cf8 	.word	0x24002cf8

080107e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80107e0:	b590      	push	{r4, r7, lr}
 80107e2:	b087      	sub	sp, #28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60b9      	str	r1, [r7, #8]
 80107e8:	607a      	str	r2, [r7, #4]
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	4603      	mov	r3, r0
 80107ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80107f0:	7bfb      	ldrb	r3, [r7, #15]
 80107f2:	4a0a      	ldr	r2, [pc, #40]	; (801081c <disk_read+0x3c>)
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	689c      	ldr	r4, [r3, #8]
 80107fc:	7bfb      	ldrb	r3, [r7, #15]
 80107fe:	4a07      	ldr	r2, [pc, #28]	; (801081c <disk_read+0x3c>)
 8010800:	4413      	add	r3, r2
 8010802:	7a18      	ldrb	r0, [r3, #8]
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	47a0      	blx	r4
 801080c:	4603      	mov	r3, r0
 801080e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010810:	7dfb      	ldrb	r3, [r7, #23]
}
 8010812:	4618      	mov	r0, r3
 8010814:	371c      	adds	r7, #28
 8010816:	46bd      	mov	sp, r7
 8010818:	bd90      	pop	{r4, r7, pc}
 801081a:	bf00      	nop
 801081c:	24002cf8 	.word	0x24002cf8

08010820 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010820:	b590      	push	{r4, r7, lr}
 8010822:	b087      	sub	sp, #28
 8010824:	af00      	add	r7, sp, #0
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	603b      	str	r3, [r7, #0]
 801082c:	4603      	mov	r3, r0
 801082e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010830:	7bfb      	ldrb	r3, [r7, #15]
 8010832:	4a0a      	ldr	r2, [pc, #40]	; (801085c <disk_write+0x3c>)
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	68dc      	ldr	r4, [r3, #12]
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	4a07      	ldr	r2, [pc, #28]	; (801085c <disk_write+0x3c>)
 8010840:	4413      	add	r3, r2
 8010842:	7a18      	ldrb	r0, [r3, #8]
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	68b9      	ldr	r1, [r7, #8]
 801084a:	47a0      	blx	r4
 801084c:	4603      	mov	r3, r0
 801084e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010850:	7dfb      	ldrb	r3, [r7, #23]
}
 8010852:	4618      	mov	r0, r3
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	bd90      	pop	{r4, r7, pc}
 801085a:	bf00      	nop
 801085c:	24002cf8 	.word	0x24002cf8

08010860 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	603a      	str	r2, [r7, #0]
 801086a:	71fb      	strb	r3, [r7, #7]
 801086c:	460b      	mov	r3, r1
 801086e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	4a09      	ldr	r2, [pc, #36]	; (8010898 <disk_ioctl+0x38>)
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	79fa      	ldrb	r2, [r7, #7]
 801087e:	4906      	ldr	r1, [pc, #24]	; (8010898 <disk_ioctl+0x38>)
 8010880:	440a      	add	r2, r1
 8010882:	7a10      	ldrb	r0, [r2, #8]
 8010884:	79b9      	ldrb	r1, [r7, #6]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	4798      	blx	r3
 801088a:	4603      	mov	r3, r0
 801088c:	73fb      	strb	r3, [r7, #15]
  return res;
 801088e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	24002cf8 	.word	0x24002cf8

0801089c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3301      	adds	r3, #1
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80108ac:	89fb      	ldrh	r3, [r7, #14]
 80108ae:	021b      	lsls	r3, r3, #8
 80108b0:	b21a      	sxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	b21b      	sxth	r3, r3
 80108b8:	4313      	orrs	r3, r2
 80108ba:	b21b      	sxth	r3, r3
 80108bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80108be:	89fb      	ldrh	r3, [r7, #14]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3714      	adds	r7, #20
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	3303      	adds	r3, #3
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	021b      	lsls	r3, r3, #8
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	3202      	adds	r2, #2
 80108e4:	7812      	ldrb	r2, [r2, #0]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	021b      	lsls	r3, r3, #8
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	3201      	adds	r2, #1
 80108f2:	7812      	ldrb	r2, [r2, #0]
 80108f4:	4313      	orrs	r3, r2
 80108f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	021b      	lsls	r3, r3, #8
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	7812      	ldrb	r2, [r2, #0]
 8010900:	4313      	orrs	r3, r2
 8010902:	60fb      	str	r3, [r7, #12]
	return rv;
 8010904:	68fb      	ldr	r3, [r7, #12]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010912:	b480      	push	{r7}
 8010914:	b083      	sub	sp, #12
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	887a      	ldrh	r2, [r7, #2]
 8010926:	b2d2      	uxtb	r2, r2
 8010928:	701a      	strb	r2, [r3, #0]
 801092a:	887b      	ldrh	r3, [r7, #2]
 801092c:	0a1b      	lsrs	r3, r3, #8
 801092e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	1c5a      	adds	r2, r3, #1
 8010934:	607a      	str	r2, [r7, #4]
 8010936:	887a      	ldrh	r2, [r7, #2]
 8010938:	b2d2      	uxtb	r2, r2
 801093a:	701a      	strb	r2, [r3, #0]
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	b2d2      	uxtb	r2, r2
 801095c:	701a      	strb	r2, [r3, #0]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	0a1b      	lsrs	r3, r3, #8
 8010962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	1c5a      	adds	r2, r3, #1
 8010968:	607a      	str	r2, [r7, #4]
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	b2d2      	uxtb	r2, r2
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	0a1b      	lsrs	r3, r3, #8
 8010974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	1c5a      	adds	r2, r3, #1
 801097a:	607a      	str	r2, [r7, #4]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	b2d2      	uxtb	r2, r2
 8010980:	701a      	strb	r2, [r3, #0]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	0a1b      	lsrs	r3, r3, #8
 8010986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	1c5a      	adds	r2, r3, #1
 801098c:	607a      	str	r2, [r7, #4]
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	b2d2      	uxtb	r2, r2
 8010992:	701a      	strb	r2, [r3, #0]
}
 8010994:	bf00      	nop
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80109a0:	b480      	push	{r7}
 80109a2:	b087      	sub	sp, #28
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00d      	beq.n	80109d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80109ba:	693a      	ldr	r2, [r7, #16]
 80109bc:	1c53      	adds	r3, r2, #1
 80109be:	613b      	str	r3, [r7, #16]
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	6179      	str	r1, [r7, #20]
 80109c6:	7812      	ldrb	r2, [r2, #0]
 80109c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	607b      	str	r3, [r7, #4]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1f1      	bne.n	80109ba <mem_cpy+0x1a>
	}
}
 80109d6:	bf00      	nop
 80109d8:	371c      	adds	r7, #28
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80109e2:	b480      	push	{r7}
 80109e4:	b087      	sub	sp, #28
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	60f8      	str	r0, [r7, #12]
 80109ea:	60b9      	str	r1, [r7, #8]
 80109ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	1c5a      	adds	r2, r3, #1
 80109f6:	617a      	str	r2, [r7, #20]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	b2d2      	uxtb	r2, r2
 80109fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	3b01      	subs	r3, #1
 8010a02:	607b      	str	r3, [r7, #4]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1f3      	bne.n	80109f2 <mem_set+0x10>
}
 8010a0a:	bf00      	nop
 8010a0c:	bf00      	nop
 8010a0e:	371c      	adds	r7, #28
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010a18:	b480      	push	{r7}
 8010a1a:	b089      	sub	sp, #36	; 0x24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	61fb      	str	r3, [r7, #28]
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	61fa      	str	r2, [r7, #28]
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	4619      	mov	r1, r3
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	1c5a      	adds	r2, r3, #1
 8010a3e:	61ba      	str	r2, [r7, #24]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	1acb      	subs	r3, r1, r3
 8010a44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	3b01      	subs	r3, #1
 8010a4a:	607b      	str	r3, [r7, #4]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d002      	beq.n	8010a58 <mem_cmp+0x40>
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d0eb      	beq.n	8010a30 <mem_cmp+0x18>

	return r;
 8010a58:	697b      	ldr	r3, [r7, #20]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3724      	adds	r7, #36	; 0x24
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010a66:	b480      	push	{r7}
 8010a68:	b083      	sub	sp, #12
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010a70:	e002      	b.n	8010a78 <chk_chr+0x12>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	3301      	adds	r3, #1
 8010a76:	607b      	str	r3, [r7, #4]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d005      	beq.n	8010a8c <chk_chr+0x26>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	461a      	mov	r2, r3
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d1f2      	bne.n	8010a72 <chk_chr+0xc>
	return *str;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60bb      	str	r3, [r7, #8]
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	e029      	b.n	8010b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010ab0:	4a27      	ldr	r2, [pc, #156]	; (8010b50 <chk_lock+0xb4>)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	011b      	lsls	r3, r3, #4
 8010ab6:	4413      	add	r3, r2
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d01d      	beq.n	8010afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010abe:	4a24      	ldr	r2, [pc, #144]	; (8010b50 <chk_lock+0xb4>)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	011b      	lsls	r3, r3, #4
 8010ac4:	4413      	add	r3, r2
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d116      	bne.n	8010afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ad0:	4a1f      	ldr	r2, [pc, #124]	; (8010b50 <chk_lock+0xb4>)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	011b      	lsls	r3, r3, #4
 8010ad6:	4413      	add	r3, r2
 8010ad8:	3304      	adds	r3, #4
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d10c      	bne.n	8010afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ae4:	4a1a      	ldr	r2, [pc, #104]	; (8010b50 <chk_lock+0xb4>)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	011b      	lsls	r3, r3, #4
 8010aea:	4413      	add	r3, r2
 8010aec:	3308      	adds	r3, #8
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d102      	bne.n	8010afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010af8:	e007      	b.n	8010b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010afa:	2301      	movs	r3, #1
 8010afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3301      	adds	r3, #1
 8010b02:	60fb      	str	r3, [r7, #12]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d9d2      	bls.n	8010ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d109      	bne.n	8010b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d102      	bne.n	8010b1c <chk_lock+0x80>
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d101      	bne.n	8010b20 <chk_lock+0x84>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	e010      	b.n	8010b42 <chk_lock+0xa6>
 8010b20:	2312      	movs	r3, #18
 8010b22:	e00e      	b.n	8010b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d108      	bne.n	8010b3c <chk_lock+0xa0>
 8010b2a:	4a09      	ldr	r2, [pc, #36]	; (8010b50 <chk_lock+0xb4>)
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	011b      	lsls	r3, r3, #4
 8010b30:	4413      	add	r3, r2
 8010b32:	330c      	adds	r3, #12
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b3a:	d101      	bne.n	8010b40 <chk_lock+0xa4>
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	e000      	b.n	8010b42 <chk_lock+0xa6>
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3714      	adds	r7, #20
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	24002cd8 	.word	0x24002cd8

08010b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	607b      	str	r3, [r7, #4]
 8010b5e:	e002      	b.n	8010b66 <enq_lock+0x12>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	3301      	adds	r3, #1
 8010b64:	607b      	str	r3, [r7, #4]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d806      	bhi.n	8010b7a <enq_lock+0x26>
 8010b6c:	4a09      	ldr	r2, [pc, #36]	; (8010b94 <enq_lock+0x40>)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	011b      	lsls	r3, r3, #4
 8010b72:	4413      	add	r3, r2
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1f2      	bne.n	8010b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	bf14      	ite	ne
 8010b80:	2301      	movne	r3, #1
 8010b82:	2300      	moveq	r3, #0
 8010b84:	b2db      	uxtb	r3, r3
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	24002cd8 	.word	0x24002cd8

08010b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60fb      	str	r3, [r7, #12]
 8010ba6:	e01f      	b.n	8010be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010ba8:	4a41      	ldr	r2, [pc, #260]	; (8010cb0 <inc_lock+0x118>)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	4413      	add	r3, r2
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d113      	bne.n	8010be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010bba:	4a3d      	ldr	r2, [pc, #244]	; (8010cb0 <inc_lock+0x118>)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	011b      	lsls	r3, r3, #4
 8010bc0:	4413      	add	r3, r2
 8010bc2:	3304      	adds	r3, #4
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d109      	bne.n	8010be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010bce:	4a38      	ldr	r2, [pc, #224]	; (8010cb0 <inc_lock+0x118>)
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	011b      	lsls	r3, r3, #4
 8010bd4:	4413      	add	r3, r2
 8010bd6:	3308      	adds	r3, #8
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d006      	beq.n	8010bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	3301      	adds	r3, #1
 8010be6:	60fb      	str	r3, [r7, #12]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d9dc      	bls.n	8010ba8 <inc_lock+0x10>
 8010bee:	e000      	b.n	8010bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	d132      	bne.n	8010c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	e002      	b.n	8010c04 <inc_lock+0x6c>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	3301      	adds	r3, #1
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d806      	bhi.n	8010c18 <inc_lock+0x80>
 8010c0a:	4a29      	ldr	r2, [pc, #164]	; (8010cb0 <inc_lock+0x118>)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	4413      	add	r3, r2
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1f2      	bne.n	8010bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d101      	bne.n	8010c22 <inc_lock+0x8a>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e040      	b.n	8010ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	4922      	ldr	r1, [pc, #136]	; (8010cb0 <inc_lock+0x118>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	011b      	lsls	r3, r3, #4
 8010c2c:	440b      	add	r3, r1
 8010c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	689a      	ldr	r2, [r3, #8]
 8010c34:	491e      	ldr	r1, [pc, #120]	; (8010cb0 <inc_lock+0x118>)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	011b      	lsls	r3, r3, #4
 8010c3a:	440b      	add	r3, r1
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	695a      	ldr	r2, [r3, #20]
 8010c44:	491a      	ldr	r1, [pc, #104]	; (8010cb0 <inc_lock+0x118>)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	011b      	lsls	r3, r3, #4
 8010c4a:	440b      	add	r3, r1
 8010c4c:	3308      	adds	r3, #8
 8010c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010c50:	4a17      	ldr	r2, [pc, #92]	; (8010cb0 <inc_lock+0x118>)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	4413      	add	r3, r2
 8010c58:	330c      	adds	r3, #12
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d009      	beq.n	8010c78 <inc_lock+0xe0>
 8010c64:	4a12      	ldr	r2, [pc, #72]	; (8010cb0 <inc_lock+0x118>)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	011b      	lsls	r3, r3, #4
 8010c6a:	4413      	add	r3, r2
 8010c6c:	330c      	adds	r3, #12
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d001      	beq.n	8010c78 <inc_lock+0xe0>
 8010c74:	2300      	movs	r3, #0
 8010c76:	e015      	b.n	8010ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d108      	bne.n	8010c90 <inc_lock+0xf8>
 8010c7e:	4a0c      	ldr	r2, [pc, #48]	; (8010cb0 <inc_lock+0x118>)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	011b      	lsls	r3, r3, #4
 8010c84:	4413      	add	r3, r2
 8010c86:	330c      	adds	r3, #12
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	e001      	b.n	8010c94 <inc_lock+0xfc>
 8010c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c94:	4906      	ldr	r1, [pc, #24]	; (8010cb0 <inc_lock+0x118>)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	440b      	add	r3, r1
 8010c9c:	330c      	adds	r3, #12
 8010c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	3301      	adds	r3, #1
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr
 8010cb0:	24002cd8 	.word	0x24002cd8

08010cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	607b      	str	r3, [r7, #4]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d825      	bhi.n	8010d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8010cc8:	4a17      	ldr	r2, [pc, #92]	; (8010d28 <dec_lock+0x74>)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	011b      	lsls	r3, r3, #4
 8010cce:	4413      	add	r3, r2
 8010cd0:	330c      	adds	r3, #12
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010cd6:	89fb      	ldrh	r3, [r7, #14]
 8010cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cdc:	d101      	bne.n	8010ce2 <dec_lock+0x2e>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010ce2:	89fb      	ldrh	r3, [r7, #14]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <dec_lock+0x3a>
 8010ce8:	89fb      	ldrh	r3, [r7, #14]
 8010cea:	3b01      	subs	r3, #1
 8010cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010cee:	4a0e      	ldr	r2, [pc, #56]	; (8010d28 <dec_lock+0x74>)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	011b      	lsls	r3, r3, #4
 8010cf4:	4413      	add	r3, r2
 8010cf6:	330c      	adds	r3, #12
 8010cf8:	89fa      	ldrh	r2, [r7, #14]
 8010cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010cfc:	89fb      	ldrh	r3, [r7, #14]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d105      	bne.n	8010d0e <dec_lock+0x5a>
 8010d02:	4a09      	ldr	r2, [pc, #36]	; (8010d28 <dec_lock+0x74>)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	011b      	lsls	r3, r3, #4
 8010d08:	4413      	add	r3, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	737b      	strb	r3, [r7, #13]
 8010d12:	e001      	b.n	8010d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010d14:	2302      	movs	r3, #2
 8010d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3714      	adds	r7, #20
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop
 8010d28:	24002cd8 	.word	0x24002cd8

08010d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010d34:	2300      	movs	r3, #0
 8010d36:	60fb      	str	r3, [r7, #12]
 8010d38:	e010      	b.n	8010d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010d3a:	4a0d      	ldr	r2, [pc, #52]	; (8010d70 <clear_lock+0x44>)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	011b      	lsls	r3, r3, #4
 8010d40:	4413      	add	r3, r2
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d105      	bne.n	8010d56 <clear_lock+0x2a>
 8010d4a:	4a09      	ldr	r2, [pc, #36]	; (8010d70 <clear_lock+0x44>)
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	011b      	lsls	r3, r3, #4
 8010d50:	4413      	add	r3, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	60fb      	str	r3, [r7, #12]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d9eb      	bls.n	8010d3a <clear_lock+0xe>
	}
}
 8010d62:	bf00      	nop
 8010d64:	bf00      	nop
 8010d66:	3714      	adds	r7, #20
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	24002cd8 	.word	0x24002cd8

08010d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	78db      	ldrb	r3, [r3, #3]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d034      	beq.n	8010df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	7858      	ldrb	r0, [r3, #1]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d98:	2301      	movs	r3, #1
 8010d9a:	697a      	ldr	r2, [r7, #20]
 8010d9c:	f7ff fd40 	bl	8010820 <disk_write>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8010da6:	2301      	movs	r3, #1
 8010da8:	73fb      	strb	r3, [r7, #15]
 8010daa:	e022      	b.n	8010df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	1ad2      	subs	r2, r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d217      	bcs.n	8010df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	789b      	ldrb	r3, [r3, #2]
 8010dc6:	613b      	str	r3, [r7, #16]
 8010dc8:	e010      	b.n	8010dec <sync_window+0x78>
					wsect += fs->fsize;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	7858      	ldrb	r0, [r3, #1]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010dde:	2301      	movs	r3, #1
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	f7ff fd1d 	bl	8010820 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	613b      	str	r3, [r7, #16]
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d8eb      	bhi.n	8010dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3718      	adds	r7, #24
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d01b      	beq.n	8010e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ffad 	bl	8010d74 <sync_window>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010e1e:	7bfb      	ldrb	r3, [r7, #15]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d113      	bne.n	8010e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	7858      	ldrb	r0, [r3, #1]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e2e:	2301      	movs	r3, #1
 8010e30:	683a      	ldr	r2, [r7, #0]
 8010e32:	f7ff fcd5 	bl	80107e0 <disk_read>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d004      	beq.n	8010e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010e42:	2301      	movs	r3, #1
 8010e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7ff ff87 	bl	8010d74 <sync_window>
 8010e66:	4603      	mov	r3, r0
 8010e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d159      	bne.n	8010f24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b03      	cmp	r3, #3
 8010e76:	d149      	bne.n	8010f0c <sync_fs+0xb4>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	791b      	ldrb	r3, [r3, #4]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d145      	bne.n	8010f0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	899b      	ldrh	r3, [r3, #12]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	f7ff fda8 	bl	80109e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	3334      	adds	r3, #52	; 0x34
 8010e96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff fd37 	bl	8010912 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3334      	adds	r3, #52	; 0x34
 8010ea8:	4921      	ldr	r1, [pc, #132]	; (8010f30 <sync_fs+0xd8>)
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff fd4c 	bl	8010948 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	3334      	adds	r3, #52	; 0x34
 8010eb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010eb8:	491e      	ldr	r1, [pc, #120]	; (8010f34 <sync_fs+0xdc>)
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fd44 	bl	8010948 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3334      	adds	r3, #52	; 0x34
 8010ec4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4610      	mov	r0, r2
 8010ed0:	f7ff fd3a 	bl	8010948 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3334      	adds	r3, #52	; 0x34
 8010ed8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	691b      	ldr	r3, [r3, #16]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	4610      	mov	r0, r2
 8010ee4:	f7ff fd30 	bl	8010948 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6a1b      	ldr	r3, [r3, #32]
 8010eec:	1c5a      	adds	r2, r3, #1
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	7858      	ldrb	r0, [r3, #1]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f00:	2301      	movs	r3, #1
 8010f02:	f7ff fc8d 	bl	8010820 <disk_write>
			fs->fsi_flag = 0;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	785b      	ldrb	r3, [r3, #1]
 8010f10:	2200      	movs	r2, #0
 8010f12:	2100      	movs	r1, #0
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff fca3 	bl	8010860 <disk_ioctl>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <sync_fs+0xcc>
 8010f20:	2301      	movs	r3, #1
 8010f22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	41615252 	.word	0x41615252
 8010f34:	61417272 	.word	0x61417272

08010f38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	3b02      	subs	r3, #2
 8010f46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	699b      	ldr	r3, [r3, #24]
 8010f4c:	3b02      	subs	r3, #2
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d301      	bcc.n	8010f58 <clust2sect+0x20>
 8010f54:	2300      	movs	r3, #0
 8010f56:	e008      	b.n	8010f6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	895b      	ldrh	r3, [r3, #10]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	fb03 f202 	mul.w	r2, r3, r2
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f68:	4413      	add	r3, r2
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b086      	sub	sp, #24
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d904      	bls.n	8010f96 <get_fat+0x20>
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	699b      	ldr	r3, [r3, #24]
 8010f90:	683a      	ldr	r2, [r7, #0]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d302      	bcc.n	8010f9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010f96:	2301      	movs	r3, #1
 8010f98:	617b      	str	r3, [r7, #20]
 8010f9a:	e0bb      	b.n	8011114 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fa0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	2b03      	cmp	r3, #3
 8010fa8:	f000 8083 	beq.w	80110b2 <get_fat+0x13c>
 8010fac:	2b03      	cmp	r3, #3
 8010fae:	f300 80a7 	bgt.w	8011100 <get_fat+0x18a>
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d002      	beq.n	8010fbc <get_fat+0x46>
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	d056      	beq.n	8011068 <get_fat+0xf2>
 8010fba:	e0a1      	b.n	8011100 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	085b      	lsrs	r3, r3, #1
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	899b      	ldrh	r3, [r3, #12]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fda:	4413      	add	r3, r2
 8010fdc:	4619      	mov	r1, r3
 8010fde:	6938      	ldr	r0, [r7, #16]
 8010fe0:	f7ff ff0c 	bl	8010dfc <move_window>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f040 808d 	bne.w	8011106 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	60fa      	str	r2, [r7, #12]
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	8992      	ldrh	r2, [r2, #12]
 8010ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ffa:	fb01 f202 	mul.w	r2, r1, r2
 8010ffe:	1a9b      	subs	r3, r3, r2
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	4413      	add	r3, r2
 8011004:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	899b      	ldrh	r3, [r3, #12]
 8011012:	4619      	mov	r1, r3
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	fbb3 f3f1 	udiv	r3, r3, r1
 801101a:	4413      	add	r3, r2
 801101c:	4619      	mov	r1, r3
 801101e:	6938      	ldr	r0, [r7, #16]
 8011020:	f7ff feec 	bl	8010dfc <move_window>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d16f      	bne.n	801110a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	899b      	ldrh	r3, [r3, #12]
 801102e:	461a      	mov	r2, r3
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	fbb3 f1f2 	udiv	r1, r3, r2
 8011036:	fb01 f202 	mul.w	r2, r1, r2
 801103a:	1a9b      	subs	r3, r3, r2
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	4413      	add	r3, r2
 8011040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011044:	021b      	lsls	r3, r3, #8
 8011046:	461a      	mov	r2, r3
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	4313      	orrs	r3, r2
 801104c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <get_fat+0xe8>
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	091b      	lsrs	r3, r3, #4
 801105c:	e002      	b.n	8011064 <get_fat+0xee>
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011064:	617b      	str	r3, [r7, #20]
			break;
 8011066:	e055      	b.n	8011114 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	899b      	ldrh	r3, [r3, #12]
 8011070:	085b      	lsrs	r3, r3, #1
 8011072:	b29b      	uxth	r3, r3
 8011074:	4619      	mov	r1, r3
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	fbb3 f3f1 	udiv	r3, r3, r1
 801107c:	4413      	add	r3, r2
 801107e:	4619      	mov	r1, r3
 8011080:	6938      	ldr	r0, [r7, #16]
 8011082:	f7ff febb 	bl	8010dfc <move_window>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d140      	bne.n	801110e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	8992      	ldrh	r2, [r2, #12]
 801109a:	fbb3 f0f2 	udiv	r0, r3, r2
 801109e:	fb00 f202 	mul.w	r2, r0, r2
 80110a2:	1a9b      	subs	r3, r3, r2
 80110a4:	440b      	add	r3, r1
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff fbf8 	bl	801089c <ld_word>
 80110ac:	4603      	mov	r3, r0
 80110ae:	617b      	str	r3, [r7, #20]
			break;
 80110b0:	e030      	b.n	8011114 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	899b      	ldrh	r3, [r3, #12]
 80110ba:	089b      	lsrs	r3, r3, #2
 80110bc:	b29b      	uxth	r3, r3
 80110be:	4619      	mov	r1, r3
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80110c6:	4413      	add	r3, r2
 80110c8:	4619      	mov	r1, r3
 80110ca:	6938      	ldr	r0, [r7, #16]
 80110cc:	f7ff fe96 	bl	8010dfc <move_window>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d11d      	bne.n	8011112 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	693a      	ldr	r2, [r7, #16]
 80110e2:	8992      	ldrh	r2, [r2, #12]
 80110e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80110e8:	fb00 f202 	mul.w	r2, r0, r2
 80110ec:	1a9b      	subs	r3, r3, r2
 80110ee:	440b      	add	r3, r1
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff fbeb 	bl	80108cc <ld_dword>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80110fc:	617b      	str	r3, [r7, #20]
			break;
 80110fe:	e009      	b.n	8011114 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011100:	2301      	movs	r3, #1
 8011102:	617b      	str	r3, [r7, #20]
 8011104:	e006      	b.n	8011114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011106:	bf00      	nop
 8011108:	e004      	b.n	8011114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801110a:	bf00      	nop
 801110c:	e002      	b.n	8011114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801110e:	bf00      	nop
 8011110:	e000      	b.n	8011114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011112:	bf00      	nop
		}
	}

	return val;
 8011114:	697b      	ldr	r3, [r7, #20]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3718      	adds	r7, #24
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801111e:	b590      	push	{r4, r7, lr}
 8011120:	b089      	sub	sp, #36	; 0x24
 8011122:	af00      	add	r7, sp, #0
 8011124:	60f8      	str	r0, [r7, #12]
 8011126:	60b9      	str	r1, [r7, #8]
 8011128:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801112a:	2302      	movs	r3, #2
 801112c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	2b01      	cmp	r3, #1
 8011132:	f240 8102 	bls.w	801133a <put_fat+0x21c>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	429a      	cmp	r2, r3
 801113e:	f080 80fc 	bcs.w	801133a <put_fat+0x21c>
		switch (fs->fs_type) {
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	2b03      	cmp	r3, #3
 8011148:	f000 80b6 	beq.w	80112b8 <put_fat+0x19a>
 801114c:	2b03      	cmp	r3, #3
 801114e:	f300 80fd 	bgt.w	801134c <put_fat+0x22e>
 8011152:	2b01      	cmp	r3, #1
 8011154:	d003      	beq.n	801115e <put_fat+0x40>
 8011156:	2b02      	cmp	r3, #2
 8011158:	f000 8083 	beq.w	8011262 <put_fat+0x144>
 801115c:	e0f6      	b.n	801134c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	61bb      	str	r3, [r7, #24]
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	085b      	lsrs	r3, r3, #1
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	4413      	add	r3, r2
 801116a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	899b      	ldrh	r3, [r3, #12]
 8011174:	4619      	mov	r1, r3
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	fbb3 f3f1 	udiv	r3, r3, r1
 801117c:	4413      	add	r3, r2
 801117e:	4619      	mov	r1, r3
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f7ff fe3b 	bl	8010dfc <move_window>
 8011186:	4603      	mov	r3, r0
 8011188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801118a:	7ffb      	ldrb	r3, [r7, #31]
 801118c:	2b00      	cmp	r3, #0
 801118e:	f040 80d6 	bne.w	801133e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	61ba      	str	r2, [r7, #24]
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	8992      	ldrh	r2, [r2, #12]
 80111a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80111a6:	fb00 f202 	mul.w	r2, r0, r2
 80111aa:	1a9b      	subs	r3, r3, r2
 80111ac:	440b      	add	r3, r1
 80111ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00d      	beq.n	80111d6 <put_fat+0xb8>
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	b25b      	sxtb	r3, r3
 80111c0:	f003 030f 	and.w	r3, r3, #15
 80111c4:	b25a      	sxtb	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	011b      	lsls	r3, r3, #4
 80111cc:	b25b      	sxtb	r3, r3
 80111ce:	4313      	orrs	r3, r2
 80111d0:	b25b      	sxtb	r3, r3
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	e001      	b.n	80111da <put_fat+0xbc>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	697a      	ldr	r2, [r7, #20]
 80111dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2201      	movs	r2, #1
 80111e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	899b      	ldrh	r3, [r3, #12]
 80111ec:	4619      	mov	r1, r3
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80111f4:	4413      	add	r3, r2
 80111f6:	4619      	mov	r1, r3
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f7ff fdff 	bl	8010dfc <move_window>
 80111fe:	4603      	mov	r3, r0
 8011200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011202:	7ffb      	ldrb	r3, [r7, #31]
 8011204:	2b00      	cmp	r3, #0
 8011206:	f040 809c 	bne.w	8011342 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	899b      	ldrh	r3, [r3, #12]
 8011214:	461a      	mov	r2, r3
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	fbb3 f0f2 	udiv	r0, r3, r2
 801121c:	fb00 f202 	mul.w	r2, r0, r2
 8011220:	1a9b      	subs	r3, r3, r2
 8011222:	440b      	add	r3, r1
 8011224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	f003 0301 	and.w	r3, r3, #1
 801122c:	2b00      	cmp	r3, #0
 801122e:	d003      	beq.n	8011238 <put_fat+0x11a>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	091b      	lsrs	r3, r3, #4
 8011234:	b2db      	uxtb	r3, r3
 8011236:	e00e      	b.n	8011256 <put_fat+0x138>
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	b25b      	sxtb	r3, r3
 801123e:	f023 030f 	bic.w	r3, r3, #15
 8011242:	b25a      	sxtb	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	0a1b      	lsrs	r3, r3, #8
 8011248:	b25b      	sxtb	r3, r3
 801124a:	f003 030f 	and.w	r3, r3, #15
 801124e:	b25b      	sxtb	r3, r3
 8011250:	4313      	orrs	r3, r2
 8011252:	b25b      	sxtb	r3, r3
 8011254:	b2db      	uxtb	r3, r3
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2201      	movs	r2, #1
 801125e:	70da      	strb	r2, [r3, #3]
			break;
 8011260:	e074      	b.n	801134c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	899b      	ldrh	r3, [r3, #12]
 801126a:	085b      	lsrs	r3, r3, #1
 801126c:	b29b      	uxth	r3, r3
 801126e:	4619      	mov	r1, r3
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	fbb3 f3f1 	udiv	r3, r3, r1
 8011276:	4413      	add	r3, r2
 8011278:	4619      	mov	r1, r3
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f7ff fdbe 	bl	8010dfc <move_window>
 8011280:	4603      	mov	r3, r0
 8011282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011284:	7ffb      	ldrb	r3, [r7, #31]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d15d      	bne.n	8011346 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	8992      	ldrh	r2, [r2, #12]
 8011298:	fbb3 f0f2 	udiv	r0, r3, r2
 801129c:	fb00 f202 	mul.w	r2, r0, r2
 80112a0:	1a9b      	subs	r3, r3, r2
 80112a2:	440b      	add	r3, r1
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	b292      	uxth	r2, r2
 80112a8:	4611      	mov	r1, r2
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fb31 	bl	8010912 <st_word>
			fs->wflag = 1;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2201      	movs	r2, #1
 80112b4:	70da      	strb	r2, [r3, #3]
			break;
 80112b6:	e049      	b.n	801134c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	899b      	ldrh	r3, [r3, #12]
 80112c0:	089b      	lsrs	r3, r3, #2
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4619      	mov	r1, r3
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80112cc:	4413      	add	r3, r2
 80112ce:	4619      	mov	r1, r3
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f7ff fd93 	bl	8010dfc <move_window>
 80112d6:	4603      	mov	r3, r0
 80112d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80112da:	7ffb      	ldrb	r3, [r7, #31]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d134      	bne.n	801134a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	8992      	ldrh	r2, [r2, #12]
 80112f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80112f8:	fb00 f202 	mul.w	r2, r0, r2
 80112fc:	1a9b      	subs	r3, r3, r2
 80112fe:	440b      	add	r3, r1
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fae3 	bl	80108cc <ld_dword>
 8011306:	4603      	mov	r3, r0
 8011308:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801130c:	4323      	orrs	r3, r4
 801130e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	8992      	ldrh	r2, [r2, #12]
 801131e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011322:	fb00 f202 	mul.w	r2, r0, r2
 8011326:	1a9b      	subs	r3, r3, r2
 8011328:	440b      	add	r3, r1
 801132a:	6879      	ldr	r1, [r7, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	f7ff fb0b 	bl	8010948 <st_dword>
			fs->wflag = 1;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2201      	movs	r2, #1
 8011336:	70da      	strb	r2, [r3, #3]
			break;
 8011338:	e008      	b.n	801134c <put_fat+0x22e>
		}
	}
 801133a:	bf00      	nop
 801133c:	e006      	b.n	801134c <put_fat+0x22e>
			if (res != FR_OK) break;
 801133e:	bf00      	nop
 8011340:	e004      	b.n	801134c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011342:	bf00      	nop
 8011344:	e002      	b.n	801134c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011346:	bf00      	nop
 8011348:	e000      	b.n	801134c <put_fat+0x22e>
			if (res != FR_OK) break;
 801134a:	bf00      	nop
	return res;
 801134c:	7ffb      	ldrb	r3, [r7, #31]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3724      	adds	r7, #36	; 0x24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd90      	pop	{r4, r7, pc}

08011356 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b088      	sub	sp, #32
 801135a:	af00      	add	r7, sp, #0
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	60b9      	str	r1, [r7, #8]
 8011360:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	2b01      	cmp	r3, #1
 8011370:	d904      	bls.n	801137c <remove_chain+0x26>
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	429a      	cmp	r2, r3
 801137a:	d301      	bcc.n	8011380 <remove_chain+0x2a>
 801137c:	2302      	movs	r3, #2
 801137e:	e04b      	b.n	8011418 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00c      	beq.n	80113a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801138a:	6879      	ldr	r1, [r7, #4]
 801138c:	69b8      	ldr	r0, [r7, #24]
 801138e:	f7ff fec6 	bl	801111e <put_fat>
 8011392:	4603      	mov	r3, r0
 8011394:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011396:	7ffb      	ldrb	r3, [r7, #31]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <remove_chain+0x4a>
 801139c:	7ffb      	ldrb	r3, [r7, #31]
 801139e:	e03b      	b.n	8011418 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80113a0:	68b9      	ldr	r1, [r7, #8]
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f7ff fde7 	bl	8010f76 <get_fat>
 80113a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d031      	beq.n	8011414 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d101      	bne.n	80113ba <remove_chain+0x64>
 80113b6:	2302      	movs	r3, #2
 80113b8:	e02e      	b.n	8011418 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113c0:	d101      	bne.n	80113c6 <remove_chain+0x70>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e028      	b.n	8011418 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80113c6:	2200      	movs	r2, #0
 80113c8:	68b9      	ldr	r1, [r7, #8]
 80113ca:	69b8      	ldr	r0, [r7, #24]
 80113cc:	f7ff fea7 	bl	801111e <put_fat>
 80113d0:	4603      	mov	r3, r0
 80113d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80113d4:	7ffb      	ldrb	r3, [r7, #31]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d001      	beq.n	80113de <remove_chain+0x88>
 80113da:	7ffb      	ldrb	r3, [r7, #31]
 80113dc:	e01c      	b.n	8011418 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	695a      	ldr	r2, [r3, #20]
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	699b      	ldr	r3, [r3, #24]
 80113e6:	3b02      	subs	r3, #2
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d20b      	bcs.n	8011404 <remove_chain+0xae>
			fs->free_clst++;
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	695b      	ldr	r3, [r3, #20]
 80113f0:	1c5a      	adds	r2, r3, #1
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	791b      	ldrb	r3, [r3, #4]
 80113fa:	f043 0301 	orr.w	r3, r3, #1
 80113fe:	b2da      	uxtb	r2, r3
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011408:	69bb      	ldr	r3, [r7, #24]
 801140a:	699b      	ldr	r3, [r3, #24]
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	429a      	cmp	r2, r3
 8011410:	d3c6      	bcc.n	80113a0 <remove_chain+0x4a>
 8011412:	e000      	b.n	8011416 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011414:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3720      	adds	r7, #32
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b088      	sub	sp, #32
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d10d      	bne.n	8011452 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	691b      	ldr	r3, [r3, #16]
 801143a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d004      	beq.n	801144c <create_chain+0x2c>
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	699b      	ldr	r3, [r3, #24]
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	429a      	cmp	r2, r3
 801144a:	d31b      	bcc.n	8011484 <create_chain+0x64>
 801144c:	2301      	movs	r3, #1
 801144e:	61bb      	str	r3, [r7, #24]
 8011450:	e018      	b.n	8011484 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011452:	6839      	ldr	r1, [r7, #0]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fd8e 	bl	8010f76 <get_fat>
 801145a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2b01      	cmp	r3, #1
 8011460:	d801      	bhi.n	8011466 <create_chain+0x46>
 8011462:	2301      	movs	r3, #1
 8011464:	e070      	b.n	8011548 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801146c:	d101      	bne.n	8011472 <create_chain+0x52>
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	e06a      	b.n	8011548 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	699b      	ldr	r3, [r3, #24]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	429a      	cmp	r2, r3
 801147a:	d201      	bcs.n	8011480 <create_chain+0x60>
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	e063      	b.n	8011548 <create_chain+0x128>
		scl = clst;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	3301      	adds	r3, #1
 801148c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	699b      	ldr	r3, [r3, #24]
 8011492:	69fa      	ldr	r2, [r7, #28]
 8011494:	429a      	cmp	r2, r3
 8011496:	d307      	bcc.n	80114a8 <create_chain+0x88>
				ncl = 2;
 8011498:	2302      	movs	r3, #2
 801149a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801149c:	69fa      	ldr	r2, [r7, #28]
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d901      	bls.n	80114a8 <create_chain+0x88>
 80114a4:	2300      	movs	r3, #0
 80114a6:	e04f      	b.n	8011548 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80114a8:	69f9      	ldr	r1, [r7, #28]
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7ff fd63 	bl	8010f76 <get_fat>
 80114b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00e      	beq.n	80114d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d003      	beq.n	80114c6 <create_chain+0xa6>
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114c4:	d101      	bne.n	80114ca <create_chain+0xaa>
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	e03e      	b.n	8011548 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80114ca:	69fa      	ldr	r2, [r7, #28]
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d1da      	bne.n	8011488 <create_chain+0x68>
 80114d2:	2300      	movs	r3, #0
 80114d4:	e038      	b.n	8011548 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80114d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80114d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114dc:	69f9      	ldr	r1, [r7, #28]
 80114de:	6938      	ldr	r0, [r7, #16]
 80114e0:	f7ff fe1d 	bl	801111e <put_fat>
 80114e4:	4603      	mov	r3, r0
 80114e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80114e8:	7dfb      	ldrb	r3, [r7, #23]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d109      	bne.n	8011502 <create_chain+0xe2>
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d006      	beq.n	8011502 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80114f4:	69fa      	ldr	r2, [r7, #28]
 80114f6:	6839      	ldr	r1, [r7, #0]
 80114f8:	6938      	ldr	r0, [r7, #16]
 80114fa:	f7ff fe10 	bl	801111e <put_fat>
 80114fe:	4603      	mov	r3, r0
 8011500:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011502:	7dfb      	ldrb	r3, [r7, #23]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d116      	bne.n	8011536 <create_chain+0x116>
		fs->last_clst = ncl;
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	695a      	ldr	r2, [r3, #20]
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	699b      	ldr	r3, [r3, #24]
 8011516:	3b02      	subs	r3, #2
 8011518:	429a      	cmp	r2, r3
 801151a:	d804      	bhi.n	8011526 <create_chain+0x106>
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	695b      	ldr	r3, [r3, #20]
 8011520:	1e5a      	subs	r2, r3, #1
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	791b      	ldrb	r3, [r3, #4]
 801152a:	f043 0301 	orr.w	r3, r3, #1
 801152e:	b2da      	uxtb	r2, r3
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	711a      	strb	r2, [r3, #4]
 8011534:	e007      	b.n	8011546 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011536:	7dfb      	ldrb	r3, [r7, #23]
 8011538:	2b01      	cmp	r3, #1
 801153a:	d102      	bne.n	8011542 <create_chain+0x122>
 801153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011540:	e000      	b.n	8011544 <create_chain+0x124>
 8011542:	2301      	movs	r3, #1
 8011544:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011546:	69fb      	ldr	r3, [r7, #28]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3720      	adds	r7, #32
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011550:	b480      	push	{r7}
 8011552:	b087      	sub	sp, #28
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011564:	3304      	adds	r3, #4
 8011566:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	899b      	ldrh	r3, [r3, #12]
 801156c:	461a      	mov	r2, r3
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	fbb3 f3f2 	udiv	r3, r3, r2
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	8952      	ldrh	r2, [r2, #10]
 8011578:	fbb3 f3f2 	udiv	r3, r3, r2
 801157c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	1d1a      	adds	r2, r3, #4
 8011582:	613a      	str	r2, [r7, #16]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <clmt_clust+0x42>
 801158e:	2300      	movs	r3, #0
 8011590:	e010      	b.n	80115b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011592:	697a      	ldr	r2, [r7, #20]
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	429a      	cmp	r2, r3
 8011598:	d307      	bcc.n	80115aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	617b      	str	r3, [r7, #20]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	3304      	adds	r3, #4
 80115a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80115a8:	e7e9      	b.n	801157e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80115aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	4413      	add	r3, r2
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	371c      	adds	r7, #28
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b086      	sub	sp, #24
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80115d6:	d204      	bcs.n	80115e2 <dir_sdi+0x22>
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	f003 031f 	and.w	r3, r3, #31
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d001      	beq.n	80115e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80115e2:	2302      	movs	r3, #2
 80115e4:	e071      	b.n	80116ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	683a      	ldr	r2, [r7, #0]
 80115ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d106      	bne.n	8011606 <dir_sdi+0x46>
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d902      	bls.n	8011606 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011604:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10c      	bne.n	8011626 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	095b      	lsrs	r3, r3, #5
 8011610:	693a      	ldr	r2, [r7, #16]
 8011612:	8912      	ldrh	r2, [r2, #8]
 8011614:	4293      	cmp	r3, r2
 8011616:	d301      	bcc.n	801161c <dir_sdi+0x5c>
 8011618:	2302      	movs	r3, #2
 801161a:	e056      	b.n	80116ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	61da      	str	r2, [r3, #28]
 8011624:	e02d      	b.n	8011682 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	895b      	ldrh	r3, [r3, #10]
 801162a:	461a      	mov	r2, r3
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	899b      	ldrh	r3, [r3, #12]
 8011630:	fb02 f303 	mul.w	r3, r2, r3
 8011634:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011636:	e019      	b.n	801166c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6979      	ldr	r1, [r7, #20]
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff fc9a 	bl	8010f76 <get_fat>
 8011642:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801164a:	d101      	bne.n	8011650 <dir_sdi+0x90>
 801164c:	2301      	movs	r3, #1
 801164e:	e03c      	b.n	80116ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2b01      	cmp	r3, #1
 8011654:	d904      	bls.n	8011660 <dir_sdi+0xa0>
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	699b      	ldr	r3, [r3, #24]
 801165a:	697a      	ldr	r2, [r7, #20]
 801165c:	429a      	cmp	r2, r3
 801165e:	d301      	bcc.n	8011664 <dir_sdi+0xa4>
 8011660:	2302      	movs	r3, #2
 8011662:	e032      	b.n	80116ca <dir_sdi+0x10a>
			ofs -= csz;
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	1ad3      	subs	r3, r2, r3
 801166a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	429a      	cmp	r2, r3
 8011672:	d2e1      	bcs.n	8011638 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011674:	6979      	ldr	r1, [r7, #20]
 8011676:	6938      	ldr	r0, [r7, #16]
 8011678:	f7ff fc5e 	bl	8010f38 <clust2sect>
 801167c:	4602      	mov	r2, r0
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	697a      	ldr	r2, [r7, #20]
 8011686:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	69db      	ldr	r3, [r3, #28]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d101      	bne.n	8011694 <dir_sdi+0xd4>
 8011690:	2302      	movs	r3, #2
 8011692:	e01a      	b.n	80116ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	69da      	ldr	r2, [r3, #28]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	899b      	ldrh	r3, [r3, #12]
 801169c:	4619      	mov	r1, r3
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80116a4:	441a      	add	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	899b      	ldrh	r3, [r3, #12]
 80116b4:	461a      	mov	r2, r3
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80116bc:	fb00 f202 	mul.w	r2, r0, r2
 80116c0:	1a9b      	subs	r3, r3, r2
 80116c2:	18ca      	adds	r2, r1, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80116c8:	2300      	movs	r3, #0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b086      	sub	sp, #24
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	3320      	adds	r3, #32
 80116e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	69db      	ldr	r3, [r3, #28]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d003      	beq.n	80116fa <dir_next+0x28>
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80116f8:	d301      	bcc.n	80116fe <dir_next+0x2c>
 80116fa:	2304      	movs	r3, #4
 80116fc:	e0bb      	b.n	8011876 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	899b      	ldrh	r3, [r3, #12]
 8011702:	461a      	mov	r2, r3
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	fbb3 f1f2 	udiv	r1, r3, r2
 801170a:	fb01 f202 	mul.w	r2, r1, r2
 801170e:	1a9b      	subs	r3, r3, r2
 8011710:	2b00      	cmp	r3, #0
 8011712:	f040 809d 	bne.w	8011850 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	69db      	ldr	r3, [r3, #28]
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	699b      	ldr	r3, [r3, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10b      	bne.n	8011740 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	095b      	lsrs	r3, r3, #5
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	8912      	ldrh	r2, [r2, #8]
 8011730:	4293      	cmp	r3, r2
 8011732:	f0c0 808d 	bcc.w	8011850 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	61da      	str	r2, [r3, #28]
 801173c:	2304      	movs	r3, #4
 801173e:	e09a      	b.n	8011876 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	899b      	ldrh	r3, [r3, #12]
 8011744:	461a      	mov	r2, r3
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	fbb3 f3f2 	udiv	r3, r3, r2
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	8952      	ldrh	r2, [r2, #10]
 8011750:	3a01      	subs	r2, #1
 8011752:	4013      	ands	r3, r2
 8011754:	2b00      	cmp	r3, #0
 8011756:	d17b      	bne.n	8011850 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	699b      	ldr	r3, [r3, #24]
 801175e:	4619      	mov	r1, r3
 8011760:	4610      	mov	r0, r2
 8011762:	f7ff fc08 	bl	8010f76 <get_fat>
 8011766:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d801      	bhi.n	8011772 <dir_next+0xa0>
 801176e:	2302      	movs	r3, #2
 8011770:	e081      	b.n	8011876 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011778:	d101      	bne.n	801177e <dir_next+0xac>
 801177a:	2301      	movs	r3, #1
 801177c:	e07b      	b.n	8011876 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	699b      	ldr	r3, [r3, #24]
 8011782:	697a      	ldr	r2, [r7, #20]
 8011784:	429a      	cmp	r2, r3
 8011786:	d359      	bcc.n	801183c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d104      	bne.n	8011798 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	61da      	str	r2, [r3, #28]
 8011794:	2304      	movs	r3, #4
 8011796:	e06e      	b.n	8011876 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	4619      	mov	r1, r3
 80117a0:	4610      	mov	r0, r2
 80117a2:	f7ff fe3d 	bl	8011420 <create_chain>
 80117a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <dir_next+0xe0>
 80117ae:	2307      	movs	r3, #7
 80117b0:	e061      	b.n	8011876 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d101      	bne.n	80117bc <dir_next+0xea>
 80117b8:	2302      	movs	r3, #2
 80117ba:	e05c      	b.n	8011876 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117c2:	d101      	bne.n	80117c8 <dir_next+0xf6>
 80117c4:	2301      	movs	r3, #1
 80117c6:	e056      	b.n	8011876 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f7ff fad3 	bl	8010d74 <sync_window>
 80117ce:	4603      	mov	r3, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d001      	beq.n	80117d8 <dir_next+0x106>
 80117d4:	2301      	movs	r3, #1
 80117d6:	e04e      	b.n	8011876 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	461a      	mov	r2, r3
 80117e4:	2100      	movs	r1, #0
 80117e6:	f7ff f8fc 	bl	80109e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80117ea:	2300      	movs	r3, #0
 80117ec:	613b      	str	r3, [r7, #16]
 80117ee:	6979      	ldr	r1, [r7, #20]
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f7ff fba1 	bl	8010f38 <clust2sect>
 80117f6:	4602      	mov	r2, r0
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	631a      	str	r2, [r3, #48]	; 0x30
 80117fc:	e012      	b.n	8011824 <dir_next+0x152>
						fs->wflag = 1;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2201      	movs	r2, #1
 8011802:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f7ff fab5 	bl	8010d74 <sync_window>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <dir_next+0x142>
 8011810:	2301      	movs	r3, #1
 8011812:	e030      	b.n	8011876 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	3301      	adds	r3, #1
 8011818:	613b      	str	r3, [r7, #16]
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	631a      	str	r2, [r3, #48]	; 0x30
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	895b      	ldrh	r3, [r3, #10]
 8011828:	461a      	mov	r2, r3
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	4293      	cmp	r3, r2
 801182e:	d3e6      	bcc.n	80117fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	1ad2      	subs	r2, r2, r3
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011842:	6979      	ldr	r1, [r7, #20]
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	f7ff fb77 	bl	8010f38 <clust2sect>
 801184a:	4602      	mov	r2, r0
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	461a      	mov	r2, r3
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	fbb3 f0f2 	udiv	r0, r3, r2
 8011868:	fb00 f202 	mul.w	r2, r0, r2
 801186c:	1a9b      	subs	r3, r3, r2
 801186e:	18ca      	adds	r2, r1, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b086      	sub	sp, #24
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
 8011886:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801188e:	2100      	movs	r1, #0
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff fe95 	bl	80115c0 <dir_sdi>
 8011896:	4603      	mov	r3, r0
 8011898:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801189a:	7dfb      	ldrb	r3, [r7, #23]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d12b      	bne.n	80118f8 <dir_alloc+0x7a>
		n = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	69db      	ldr	r3, [r3, #28]
 80118a8:	4619      	mov	r1, r3
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f7ff faa6 	bl	8010dfc <move_window>
 80118b0:	4603      	mov	r3, r0
 80118b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80118b4:	7dfb      	ldrb	r3, [r7, #23]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d11d      	bne.n	80118f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6a1b      	ldr	r3, [r3, #32]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2be5      	cmp	r3, #229	; 0xe5
 80118c2:	d004      	beq.n	80118ce <dir_alloc+0x50>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6a1b      	ldr	r3, [r3, #32]
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d107      	bne.n	80118de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	3301      	adds	r3, #1
 80118d2:	613b      	str	r3, [r7, #16]
 80118d4:	693a      	ldr	r2, [r7, #16]
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d102      	bne.n	80118e2 <dir_alloc+0x64>
 80118dc:	e00c      	b.n	80118f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80118de:	2300      	movs	r3, #0
 80118e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80118e2:	2101      	movs	r1, #1
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff fef4 	bl	80116d2 <dir_next>
 80118ea:	4603      	mov	r3, r0
 80118ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d0d7      	beq.n	80118a4 <dir_alloc+0x26>
 80118f4:	e000      	b.n	80118f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80118f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
 80118fa:	2b04      	cmp	r3, #4
 80118fc:	d101      	bne.n	8011902 <dir_alloc+0x84>
 80118fe:	2307      	movs	r3, #7
 8011900:	75fb      	strb	r3, [r7, #23]
	return res;
 8011902:	7dfb      	ldrb	r3, [r7, #23]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	331a      	adds	r3, #26
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe ffbe 	bl	801089c <ld_word>
 8011920:	4603      	mov	r3, r0
 8011922:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	2b03      	cmp	r3, #3
 801192a:	d109      	bne.n	8011940 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	3314      	adds	r3, #20
 8011930:	4618      	mov	r0, r3
 8011932:	f7fe ffb3 	bl	801089c <ld_word>
 8011936:	4603      	mov	r3, r0
 8011938:	041b      	lsls	r3, r3, #16
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	4313      	orrs	r3, r2
 801193e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011940:	68fb      	ldr	r3, [r7, #12]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	60f8      	str	r0, [r7, #12]
 8011952:	60b9      	str	r1, [r7, #8]
 8011954:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	331a      	adds	r3, #26
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	b292      	uxth	r2, r2
 801195e:	4611      	mov	r1, r2
 8011960:	4618      	mov	r0, r3
 8011962:	f7fe ffd6 	bl	8010912 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b03      	cmp	r3, #3
 801196c:	d109      	bne.n	8011982 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	f103 0214 	add.w	r2, r3, #20
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	0c1b      	lsrs	r3, r3, #16
 8011978:	b29b      	uxth	r3, r3
 801197a:	4619      	mov	r1, r3
 801197c:	4610      	mov	r0, r2
 801197e:	f7fe ffc8 	bl	8010912 <st_word>
	}
}
 8011982:	bf00      	nop
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b086      	sub	sp, #24
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011998:	2100      	movs	r1, #0
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f7ff fe10 	bl	80115c0 <dir_sdi>
 80119a0:	4603      	mov	r3, r0
 80119a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80119a4:	7dfb      	ldrb	r3, [r7, #23]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d001      	beq.n	80119ae <dir_find+0x24>
 80119aa:	7dfb      	ldrb	r3, [r7, #23]
 80119ac:	e03e      	b.n	8011a2c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	69db      	ldr	r3, [r3, #28]
 80119b2:	4619      	mov	r1, r3
 80119b4:	6938      	ldr	r0, [r7, #16]
 80119b6:	f7ff fa21 	bl	8010dfc <move_window>
 80119ba:	4603      	mov	r3, r0
 80119bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80119be:	7dfb      	ldrb	r3, [r7, #23]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d12f      	bne.n	8011a24 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a1b      	ldr	r3, [r3, #32]
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80119cc:	7bfb      	ldrb	r3, [r7, #15]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d102      	bne.n	80119d8 <dir_find+0x4e>
 80119d2:	2304      	movs	r3, #4
 80119d4:	75fb      	strb	r3, [r7, #23]
 80119d6:	e028      	b.n	8011a2a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6a1b      	ldr	r3, [r3, #32]
 80119dc:	330b      	adds	r3, #11
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	330b      	adds	r3, #11
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	f003 0308 	and.w	r3, r3, #8
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d10a      	bne.n	8011a10 <dir_find+0x86>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a18      	ldr	r0, [r3, #32]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3324      	adds	r3, #36	; 0x24
 8011a02:	220b      	movs	r2, #11
 8011a04:	4619      	mov	r1, r3
 8011a06:	f7ff f807 	bl	8010a18 <mem_cmp>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011a10:	2100      	movs	r1, #0
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff fe5d 	bl	80116d2 <dir_next>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011a1c:	7dfb      	ldrb	r3, [r7, #23]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0c5      	beq.n	80119ae <dir_find+0x24>
 8011a22:	e002      	b.n	8011a2a <dir_find+0xa0>
		if (res != FR_OK) break;
 8011a24:	bf00      	nop
 8011a26:	e000      	b.n	8011a2a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011a28:	bf00      	nop

	return res;
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3718      	adds	r7, #24
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011a42:	2101      	movs	r1, #1
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7ff ff1a 	bl	801187e <dir_alloc>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011a4e:	7bfb      	ldrb	r3, [r7, #15]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d11c      	bne.n	8011a8e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	68b8      	ldr	r0, [r7, #8]
 8011a5c:	f7ff f9ce 	bl	8010dfc <move_window>
 8011a60:	4603      	mov	r3, r0
 8011a62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011a64:	7bfb      	ldrb	r3, [r7, #15]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d111      	bne.n	8011a8e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6a1b      	ldr	r3, [r3, #32]
 8011a6e:	2220      	movs	r2, #32
 8011a70:	2100      	movs	r1, #0
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fe ffb5 	bl	80109e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6a18      	ldr	r0, [r3, #32]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	3324      	adds	r3, #36	; 0x24
 8011a80:	220b      	movs	r2, #11
 8011a82:	4619      	mov	r1, r3
 8011a84:	f7fe ff8c 	bl	80109a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3710      	adds	r7, #16
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b088      	sub	sp, #32
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	60fb      	str	r3, [r7, #12]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	3324      	adds	r3, #36	; 0x24
 8011aac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011aae:	220b      	movs	r2, #11
 8011ab0:	2120      	movs	r1, #32
 8011ab2:	68b8      	ldr	r0, [r7, #8]
 8011ab4:	f7fe ff95 	bl	80109e2 <mem_set>
	si = i = 0; ni = 8;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	613b      	str	r3, [r7, #16]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	61fb      	str	r3, [r7, #28]
 8011ac0:	2308      	movs	r3, #8
 8011ac2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	1c5a      	adds	r2, r3, #1
 8011ac8:	61fa      	str	r2, [r7, #28]
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	4413      	add	r3, r2
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011ad2:	7efb      	ldrb	r3, [r7, #27]
 8011ad4:	2b20      	cmp	r3, #32
 8011ad6:	d94e      	bls.n	8011b76 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011ad8:	7efb      	ldrb	r3, [r7, #27]
 8011ada:	2b2f      	cmp	r3, #47	; 0x2f
 8011adc:	d006      	beq.n	8011aec <create_name+0x54>
 8011ade:	7efb      	ldrb	r3, [r7, #27]
 8011ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8011ae2:	d110      	bne.n	8011b06 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011ae4:	e002      	b.n	8011aec <create_name+0x54>
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	61fb      	str	r3, [r7, #28]
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	4413      	add	r3, r2
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b2f      	cmp	r3, #47	; 0x2f
 8011af6:	d0f6      	beq.n	8011ae6 <create_name+0x4e>
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	4413      	add	r3, r2
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b5c      	cmp	r3, #92	; 0x5c
 8011b02:	d0f0      	beq.n	8011ae6 <create_name+0x4e>
			break;
 8011b04:	e038      	b.n	8011b78 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011b06:	7efb      	ldrb	r3, [r7, #27]
 8011b08:	2b2e      	cmp	r3, #46	; 0x2e
 8011b0a:	d003      	beq.n	8011b14 <create_name+0x7c>
 8011b0c:	693a      	ldr	r2, [r7, #16]
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d30c      	bcc.n	8011b2e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b0b      	cmp	r3, #11
 8011b18:	d002      	beq.n	8011b20 <create_name+0x88>
 8011b1a:	7efb      	ldrb	r3, [r7, #27]
 8011b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b1e:	d001      	beq.n	8011b24 <create_name+0x8c>
 8011b20:	2306      	movs	r3, #6
 8011b22:	e044      	b.n	8011bae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011b24:	2308      	movs	r3, #8
 8011b26:	613b      	str	r3, [r7, #16]
 8011b28:	230b      	movs	r3, #11
 8011b2a:	617b      	str	r3, [r7, #20]
			continue;
 8011b2c:	e022      	b.n	8011b74 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011b2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	da04      	bge.n	8011b40 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011b36:	7efb      	ldrb	r3, [r7, #27]
 8011b38:	3b80      	subs	r3, #128	; 0x80
 8011b3a:	4a1f      	ldr	r2, [pc, #124]	; (8011bb8 <create_name+0x120>)
 8011b3c:	5cd3      	ldrb	r3, [r2, r3]
 8011b3e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011b40:	7efb      	ldrb	r3, [r7, #27]
 8011b42:	4619      	mov	r1, r3
 8011b44:	481d      	ldr	r0, [pc, #116]	; (8011bbc <create_name+0x124>)
 8011b46:	f7fe ff8e 	bl	8010a66 <chk_chr>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d001      	beq.n	8011b54 <create_name+0xbc>
 8011b50:	2306      	movs	r3, #6
 8011b52:	e02c      	b.n	8011bae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011b54:	7efb      	ldrb	r3, [r7, #27]
 8011b56:	2b60      	cmp	r3, #96	; 0x60
 8011b58:	d905      	bls.n	8011b66 <create_name+0xce>
 8011b5a:	7efb      	ldrb	r3, [r7, #27]
 8011b5c:	2b7a      	cmp	r3, #122	; 0x7a
 8011b5e:	d802      	bhi.n	8011b66 <create_name+0xce>
 8011b60:	7efb      	ldrb	r3, [r7, #27]
 8011b62:	3b20      	subs	r3, #32
 8011b64:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	1c5a      	adds	r2, r3, #1
 8011b6a:	613a      	str	r2, [r7, #16]
 8011b6c:	68ba      	ldr	r2, [r7, #8]
 8011b6e:	4413      	add	r3, r2
 8011b70:	7efa      	ldrb	r2, [r7, #27]
 8011b72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011b74:	e7a6      	b.n	8011ac4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011b76:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <create_name+0xf4>
 8011b88:	2306      	movs	r3, #6
 8011b8a:	e010      	b.n	8011bae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2be5      	cmp	r3, #229	; 0xe5
 8011b92:	d102      	bne.n	8011b9a <create_name+0x102>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2205      	movs	r2, #5
 8011b98:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011b9a:	7efb      	ldrb	r3, [r7, #27]
 8011b9c:	2b20      	cmp	r3, #32
 8011b9e:	d801      	bhi.n	8011ba4 <create_name+0x10c>
 8011ba0:	2204      	movs	r2, #4
 8011ba2:	e000      	b.n	8011ba6 <create_name+0x10e>
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	330b      	adds	r3, #11
 8011baa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011bac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3720      	adds	r7, #32
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	08017808 	.word	0x08017808
 8011bbc:	08017784 	.word	0x08017784

08011bc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011bd4:	e002      	b.n	8011bdc <follow_path+0x1c>
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	603b      	str	r3, [r7, #0]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	2b2f      	cmp	r3, #47	; 0x2f
 8011be2:	d0f8      	beq.n	8011bd6 <follow_path+0x16>
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b5c      	cmp	r3, #92	; 0x5c
 8011bea:	d0f4      	beq.n	8011bd6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b1f      	cmp	r3, #31
 8011bf8:	d80a      	bhi.n	8011c10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2280      	movs	r2, #128	; 0x80
 8011bfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011c02:	2100      	movs	r1, #0
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff fcdb 	bl	80115c0 <dir_sdi>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	75fb      	strb	r3, [r7, #23]
 8011c0e:	e048      	b.n	8011ca2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c10:	463b      	mov	r3, r7
 8011c12:	4619      	mov	r1, r3
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7ff ff3f 	bl	8011a98 <create_name>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d139      	bne.n	8011c98 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7ff feb0 	bl	801198a <dir_find>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d00a      	beq.n	8011c52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011c3c:	7dfb      	ldrb	r3, [r7, #23]
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d12c      	bne.n	8011c9c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011c42:	7afb      	ldrb	r3, [r7, #11]
 8011c44:	f003 0304 	and.w	r3, r3, #4
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d127      	bne.n	8011c9c <follow_path+0xdc>
 8011c4c:	2305      	movs	r3, #5
 8011c4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011c50:	e024      	b.n	8011c9c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011c52:	7afb      	ldrb	r3, [r7, #11]
 8011c54:	f003 0304 	and.w	r3, r3, #4
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d121      	bne.n	8011ca0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	799b      	ldrb	r3, [r3, #6]
 8011c60:	f003 0310 	and.w	r3, r3, #16
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d102      	bne.n	8011c6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011c68:	2305      	movs	r3, #5
 8011c6a:	75fb      	strb	r3, [r7, #23]
 8011c6c:	e019      	b.n	8011ca2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	8992      	ldrh	r2, [r2, #12]
 8011c7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c80:	fb00 f202 	mul.w	r2, r0, r2
 8011c84:	1a9b      	subs	r3, r3, r2
 8011c86:	440b      	add	r3, r1
 8011c88:	4619      	mov	r1, r3
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f7ff fe3e 	bl	801190c <ld_clust>
 8011c90:	4602      	mov	r2, r0
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c96:	e7bb      	b.n	8011c10 <follow_path+0x50>
			if (res != FR_OK) break;
 8011c98:	bf00      	nop
 8011c9a:	e002      	b.n	8011ca2 <follow_path+0xe2>
				break;
 8011c9c:	bf00      	nop
 8011c9e:	e000      	b.n	8011ca2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ca0:	bf00      	nop
			}
		}
	}

	return res;
 8011ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b087      	sub	sp, #28
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d031      	beq.n	8011d26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	e002      	b.n	8011cd0 <get_ldnumber+0x24>
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	2b20      	cmp	r3, #32
 8011cd6:	d903      	bls.n	8011ce0 <get_ldnumber+0x34>
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	2b3a      	cmp	r3, #58	; 0x3a
 8011cde:	d1f4      	bne.n	8011cca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	2b3a      	cmp	r3, #58	; 0x3a
 8011ce6:	d11c      	bne.n	8011d22 <get_ldnumber+0x76>
			tp = *path;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	1c5a      	adds	r2, r3, #1
 8011cf2:	60fa      	str	r2, [r7, #12]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	3b30      	subs	r3, #48	; 0x30
 8011cf8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2b09      	cmp	r3, #9
 8011cfe:	d80e      	bhi.n	8011d1e <get_ldnumber+0x72>
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d10a      	bne.n	8011d1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d107      	bne.n	8011d1e <get_ldnumber+0x72>
					vol = (int)i;
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	3301      	adds	r3, #1
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	697a      	ldr	r2, [r7, #20]
 8011d1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	e002      	b.n	8011d28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011d22:	2300      	movs	r3, #0
 8011d24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011d26:	693b      	ldr	r3, [r7, #16]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	371c      	adds	r7, #28
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	70da      	strb	r2, [r3, #3]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff f854 	bl	8010dfc <move_window>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <check_fs+0x2a>
 8011d5a:	2304      	movs	r3, #4
 8011d5c:	e038      	b.n	8011dd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3334      	adds	r3, #52	; 0x34
 8011d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fe fd98 	bl	801089c <ld_word>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	461a      	mov	r2, r3
 8011d70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d001      	beq.n	8011d7c <check_fs+0x48>
 8011d78:	2303      	movs	r3, #3
 8011d7a:	e029      	b.n	8011dd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d82:	2be9      	cmp	r3, #233	; 0xe9
 8011d84:	d009      	beq.n	8011d9a <check_fs+0x66>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d8c:	2beb      	cmp	r3, #235	; 0xeb
 8011d8e:	d11e      	bne.n	8011dce <check_fs+0x9a>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011d96:	2b90      	cmp	r3, #144	; 0x90
 8011d98:	d119      	bne.n	8011dce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	3334      	adds	r3, #52	; 0x34
 8011d9e:	3336      	adds	r3, #54	; 0x36
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fe fd93 	bl	80108cc <ld_dword>
 8011da6:	4603      	mov	r3, r0
 8011da8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011dac:	4a0a      	ldr	r2, [pc, #40]	; (8011dd8 <check_fs+0xa4>)
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d101      	bne.n	8011db6 <check_fs+0x82>
 8011db2:	2300      	movs	r3, #0
 8011db4:	e00c      	b.n	8011dd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	3334      	adds	r3, #52	; 0x34
 8011dba:	3352      	adds	r3, #82	; 0x52
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fe fd85 	bl	80108cc <ld_dword>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	4a05      	ldr	r2, [pc, #20]	; (8011ddc <check_fs+0xa8>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d101      	bne.n	8011dce <check_fs+0x9a>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e000      	b.n	8011dd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011dce:	2302      	movs	r3, #2
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	00544146 	.word	0x00544146
 8011ddc:	33544146 	.word	0x33544146

08011de0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b096      	sub	sp, #88	; 0x58
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	4613      	mov	r3, r2
 8011dec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	2200      	movs	r2, #0
 8011df2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff ff59 	bl	8011cac <get_ldnumber>
 8011dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	da01      	bge.n	8011e06 <find_volume+0x26>
 8011e02:	230b      	movs	r3, #11
 8011e04:	e262      	b.n	80122cc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011e06:	4a9f      	ldr	r2, [pc, #636]	; (8012084 <find_volume+0x2a4>)
 8011e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d101      	bne.n	8011e1a <find_volume+0x3a>
 8011e16:	230c      	movs	r3, #12
 8011e18:	e258      	b.n	80122cc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011e20:	79fb      	ldrb	r3, [r7, #7]
 8011e22:	f023 0301 	bic.w	r3, r3, #1
 8011e26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01a      	beq.n	8011e66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	785b      	ldrb	r3, [r3, #1]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fe fc93 	bl	8010760 <disk_status>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10c      	bne.n	8011e66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011e4c:	79fb      	ldrb	r3, [r7, #7]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d007      	beq.n	8011e62 <find_volume+0x82>
 8011e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e56:	f003 0304 	and.w	r3, r3, #4
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d001      	beq.n	8011e62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011e5e:	230a      	movs	r3, #10
 8011e60:	e234      	b.n	80122cc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8011e62:	2300      	movs	r3, #0
 8011e64:	e232      	b.n	80122cc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	2200      	movs	r2, #0
 8011e6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e76:	785b      	ldrb	r3, [r3, #1]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7fe fc8b 	bl	8010794 <disk_initialize>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011e90:	2303      	movs	r3, #3
 8011e92:	e21b      	b.n	80122cc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011e94:	79fb      	ldrb	r3, [r7, #7]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d007      	beq.n	8011eaa <find_volume+0xca>
 8011e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e9e:	f003 0304 	and.w	r3, r3, #4
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011ea6:	230a      	movs	r3, #10
 8011ea8:	e210      	b.n	80122cc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	7858      	ldrb	r0, [r3, #1]
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	330c      	adds	r3, #12
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	2102      	movs	r1, #2
 8011eb6:	f7fe fcd3 	bl	8010860 <disk_ioctl>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <find_volume+0xe4>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e203      	b.n	80122cc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	899b      	ldrh	r3, [r3, #12]
 8011ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ecc:	d80d      	bhi.n	8011eea <find_volume+0x10a>
 8011ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed0:	899b      	ldrh	r3, [r3, #12]
 8011ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ed6:	d308      	bcc.n	8011eea <find_volume+0x10a>
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eda:	899b      	ldrh	r3, [r3, #12]
 8011edc:	461a      	mov	r2, r3
 8011ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee0:	899b      	ldrh	r3, [r3, #12]
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <find_volume+0x10e>
 8011eea:	2301      	movs	r3, #1
 8011eec:	e1ee      	b.n	80122cc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ef6:	f7ff ff1d 	bl	8011d34 <check_fs>
 8011efa:	4603      	mov	r3, r0
 8011efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f04:	2b02      	cmp	r3, #2
 8011f06:	d149      	bne.n	8011f9c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011f08:	2300      	movs	r3, #0
 8011f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8011f0c:	e01e      	b.n	8011f4c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011f1c:	4413      	add	r3, r2
 8011f1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f22:	3304      	adds	r3, #4
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d006      	beq.n	8011f38 <find_volume+0x158>
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fccc 	bl	80108cc <ld_dword>
 8011f34:	4602      	mov	r2, r0
 8011f36:	e000      	b.n	8011f3a <find_volume+0x15a>
 8011f38:	2200      	movs	r2, #0
 8011f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	3358      	adds	r3, #88	; 0x58
 8011f40:	443b      	add	r3, r7
 8011f42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f48:	3301      	adds	r3, #1
 8011f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8011f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f4e:	2b03      	cmp	r3, #3
 8011f50:	d9dd      	bls.n	8011f0e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011f52:	2300      	movs	r3, #0
 8011f54:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <find_volume+0x182>
 8011f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	3358      	adds	r3, #88	; 0x58
 8011f68:	443b      	add	r3, r7
 8011f6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011f6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d005      	beq.n	8011f82 <find_volume+0x1a2>
 8011f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f7a:	f7ff fedb 	bl	8011d34 <check_fs>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	e000      	b.n	8011f84 <find_volume+0x1a4>
 8011f82:	2303      	movs	r3, #3
 8011f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d905      	bls.n	8011f9c <find_volume+0x1bc>
 8011f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f92:	3301      	adds	r3, #1
 8011f94:	643b      	str	r3, [r7, #64]	; 0x40
 8011f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f98:	2b03      	cmp	r3, #3
 8011f9a:	d9e2      	bls.n	8011f62 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fa0:	2b04      	cmp	r3, #4
 8011fa2:	d101      	bne.n	8011fa8 <find_volume+0x1c8>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e191      	b.n	80122cc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d901      	bls.n	8011fb4 <find_volume+0x1d4>
 8011fb0:	230d      	movs	r3, #13
 8011fb2:	e18b      	b.n	80122cc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb6:	3334      	adds	r3, #52	; 0x34
 8011fb8:	330b      	adds	r3, #11
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe fc6e 	bl	801089c <ld_word>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc6:	899b      	ldrh	r3, [r3, #12]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d001      	beq.n	8011fd0 <find_volume+0x1f0>
 8011fcc:	230d      	movs	r3, #13
 8011fce:	e17d      	b.n	80122cc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	3334      	adds	r3, #52	; 0x34
 8011fd4:	3316      	adds	r3, #22
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fc60 	bl	801089c <ld_word>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d106      	bne.n	8011ff4 <find_volume+0x214>
 8011fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe8:	3334      	adds	r3, #52	; 0x34
 8011fea:	3324      	adds	r3, #36	; 0x24
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fe fc6d 	bl	80108cc <ld_dword>
 8011ff2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ff8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012002:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	789b      	ldrb	r3, [r3, #2]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d005      	beq.n	8012018 <find_volume+0x238>
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	789b      	ldrb	r3, [r3, #2]
 8012010:	2b02      	cmp	r3, #2
 8012012:	d001      	beq.n	8012018 <find_volume+0x238>
 8012014:	230d      	movs	r3, #13
 8012016:	e159      	b.n	80122cc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	789b      	ldrb	r3, [r3, #2]
 801201c:	461a      	mov	r2, r3
 801201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012020:	fb02 f303 	mul.w	r3, r2, r3
 8012024:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801202c:	b29a      	uxth	r2, r3
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012034:	895b      	ldrh	r3, [r3, #10]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d008      	beq.n	801204c <find_volume+0x26c>
 801203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203c:	895b      	ldrh	r3, [r3, #10]
 801203e:	461a      	mov	r2, r3
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	895b      	ldrh	r3, [r3, #10]
 8012044:	3b01      	subs	r3, #1
 8012046:	4013      	ands	r3, r2
 8012048:	2b00      	cmp	r3, #0
 801204a:	d001      	beq.n	8012050 <find_volume+0x270>
 801204c:	230d      	movs	r3, #13
 801204e:	e13d      	b.n	80122cc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	3334      	adds	r3, #52	; 0x34
 8012054:	3311      	adds	r3, #17
 8012056:	4618      	mov	r0, r3
 8012058:	f7fe fc20 	bl	801089c <ld_word>
 801205c:	4603      	mov	r3, r0
 801205e:	461a      	mov	r2, r3
 8012060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012062:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	891b      	ldrh	r3, [r3, #8]
 8012068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801206a:	8992      	ldrh	r2, [r2, #12]
 801206c:	0952      	lsrs	r2, r2, #5
 801206e:	b292      	uxth	r2, r2
 8012070:	fbb3 f1f2 	udiv	r1, r3, r2
 8012074:	fb01 f202 	mul.w	r2, r1, r2
 8012078:	1a9b      	subs	r3, r3, r2
 801207a:	b29b      	uxth	r3, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	d003      	beq.n	8012088 <find_volume+0x2a8>
 8012080:	230d      	movs	r3, #13
 8012082:	e123      	b.n	80122cc <find_volume+0x4ec>
 8012084:	24002cd0 	.word	0x24002cd0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208a:	3334      	adds	r3, #52	; 0x34
 801208c:	3313      	adds	r3, #19
 801208e:	4618      	mov	r0, r3
 8012090:	f7fe fc04 	bl	801089c <ld_word>
 8012094:	4603      	mov	r3, r0
 8012096:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801209a:	2b00      	cmp	r3, #0
 801209c:	d106      	bne.n	80120ac <find_volume+0x2cc>
 801209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a0:	3334      	adds	r3, #52	; 0x34
 80120a2:	3320      	adds	r3, #32
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fe fc11 	bl	80108cc <ld_dword>
 80120aa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80120ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ae:	3334      	adds	r3, #52	; 0x34
 80120b0:	330e      	adds	r3, #14
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fe fbf2 	bl	801089c <ld_word>
 80120b8:	4603      	mov	r3, r0
 80120ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80120bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d101      	bne.n	80120c6 <find_volume+0x2e6>
 80120c2:	230d      	movs	r3, #13
 80120c4:	e102      	b.n	80122cc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80120c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ca:	4413      	add	r3, r2
 80120cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120ce:	8911      	ldrh	r1, [r2, #8]
 80120d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120d2:	8992      	ldrh	r2, [r2, #12]
 80120d4:	0952      	lsrs	r2, r2, #5
 80120d6:	b292      	uxth	r2, r2
 80120d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80120dc:	b292      	uxth	r2, r2
 80120de:	4413      	add	r3, r2
 80120e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80120e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d201      	bcs.n	80120ee <find_volume+0x30e>
 80120ea:	230d      	movs	r3, #13
 80120ec:	e0ee      	b.n	80122cc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80120ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120f6:	8952      	ldrh	r2, [r2, #10]
 80120f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80120fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012100:	2b00      	cmp	r3, #0
 8012102:	d101      	bne.n	8012108 <find_volume+0x328>
 8012104:	230d      	movs	r3, #13
 8012106:	e0e1      	b.n	80122cc <find_volume+0x4ec>
		fmt = FS_FAT32;
 8012108:	2303      	movs	r3, #3
 801210a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012110:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012114:	4293      	cmp	r3, r2
 8012116:	d802      	bhi.n	801211e <find_volume+0x33e>
 8012118:	2302      	movs	r3, #2
 801211a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012120:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012124:	4293      	cmp	r3, r2
 8012126:	d802      	bhi.n	801212e <find_volume+0x34e>
 8012128:	2301      	movs	r3, #1
 801212a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	1c9a      	adds	r2, r3, #2
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801213a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801213c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801213e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012140:	441a      	add	r2, r3
 8012142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012144:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012146:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214a:	441a      	add	r2, r3
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012154:	2b03      	cmp	r3, #3
 8012156:	d11e      	bne.n	8012196 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215a:	3334      	adds	r3, #52	; 0x34
 801215c:	332a      	adds	r3, #42	; 0x2a
 801215e:	4618      	mov	r0, r3
 8012160:	f7fe fb9c 	bl	801089c <ld_word>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d001      	beq.n	801216e <find_volume+0x38e>
 801216a:	230d      	movs	r3, #13
 801216c:	e0ae      	b.n	80122cc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	891b      	ldrh	r3, [r3, #8]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d001      	beq.n	801217a <find_volume+0x39a>
 8012176:	230d      	movs	r3, #13
 8012178:	e0a8      	b.n	80122cc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217c:	3334      	adds	r3, #52	; 0x34
 801217e:	332c      	adds	r3, #44	; 0x2c
 8012180:	4618      	mov	r0, r3
 8012182:	f7fe fba3 	bl	80108cc <ld_dword>
 8012186:	4602      	mov	r2, r0
 8012188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	009b      	lsls	r3, r3, #2
 8012192:	647b      	str	r3, [r7, #68]	; 0x44
 8012194:	e01f      	b.n	80121d6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012198:	891b      	ldrh	r3, [r3, #8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d101      	bne.n	80121a2 <find_volume+0x3c2>
 801219e:	230d      	movs	r3, #13
 80121a0:	e094      	b.n	80122cc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a8:	441a      	add	r2, r3
 80121aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80121ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121b2:	2b02      	cmp	r3, #2
 80121b4:	d103      	bne.n	80121be <find_volume+0x3de>
 80121b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b8:	699b      	ldr	r3, [r3, #24]
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	e00a      	b.n	80121d4 <find_volume+0x3f4>
 80121be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c0:	699a      	ldr	r2, [r3, #24]
 80121c2:	4613      	mov	r3, r2
 80121c4:	005b      	lsls	r3, r3, #1
 80121c6:	4413      	add	r3, r2
 80121c8:	085a      	lsrs	r2, r3, #1
 80121ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121cc:	699b      	ldr	r3, [r3, #24]
 80121ce:	f003 0301 	and.w	r3, r3, #1
 80121d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80121d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80121d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d8:	69da      	ldr	r2, [r3, #28]
 80121da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121dc:	899b      	ldrh	r3, [r3, #12]
 80121de:	4619      	mov	r1, r3
 80121e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121e2:	440b      	add	r3, r1
 80121e4:	3b01      	subs	r3, #1
 80121e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121e8:	8989      	ldrh	r1, [r1, #12]
 80121ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d201      	bcs.n	80121f6 <find_volume+0x416>
 80121f2:	230d      	movs	r3, #13
 80121f4:	e06a      	b.n	80122cc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80121f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121fc:	615a      	str	r2, [r3, #20]
 80121fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012200:	695a      	ldr	r2, [r3, #20]
 8012202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012204:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012208:	2280      	movs	r2, #128	; 0x80
 801220a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801220c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012210:	2b03      	cmp	r3, #3
 8012212:	d149      	bne.n	80122a8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012216:	3334      	adds	r3, #52	; 0x34
 8012218:	3330      	adds	r3, #48	; 0x30
 801221a:	4618      	mov	r0, r3
 801221c:	f7fe fb3e 	bl	801089c <ld_word>
 8012220:	4603      	mov	r3, r0
 8012222:	2b01      	cmp	r3, #1
 8012224:	d140      	bne.n	80122a8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012228:	3301      	adds	r3, #1
 801222a:	4619      	mov	r1, r3
 801222c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801222e:	f7fe fde5 	bl	8010dfc <move_window>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d137      	bne.n	80122a8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223a:	2200      	movs	r2, #0
 801223c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	3334      	adds	r3, #52	; 0x34
 8012242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012246:	4618      	mov	r0, r3
 8012248:	f7fe fb28 	bl	801089c <ld_word>
 801224c:	4603      	mov	r3, r0
 801224e:	461a      	mov	r2, r3
 8012250:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012254:	429a      	cmp	r2, r3
 8012256:	d127      	bne.n	80122a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	3334      	adds	r3, #52	; 0x34
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe fb35 	bl	80108cc <ld_dword>
 8012262:	4603      	mov	r3, r0
 8012264:	4a1b      	ldr	r2, [pc, #108]	; (80122d4 <find_volume+0x4f4>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d11e      	bne.n	80122a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226c:	3334      	adds	r3, #52	; 0x34
 801226e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe fb2a 	bl	80108cc <ld_dword>
 8012278:	4603      	mov	r3, r0
 801227a:	4a17      	ldr	r2, [pc, #92]	; (80122d8 <find_volume+0x4f8>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d113      	bne.n	80122a8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012282:	3334      	adds	r3, #52	; 0x34
 8012284:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fb1f 	bl	80108cc <ld_dword>
 801228e:	4602      	mov	r2, r0
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012296:	3334      	adds	r3, #52	; 0x34
 8012298:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fb15 	bl	80108cc <ld_dword>
 80122a2:	4602      	mov	r2, r0
 80122a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80122a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80122ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <find_volume+0x4fc>)
 80122b2:	881b      	ldrh	r3, [r3, #0]
 80122b4:	3301      	adds	r3, #1
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	4b08      	ldr	r3, [pc, #32]	; (80122dc <find_volume+0x4fc>)
 80122ba:	801a      	strh	r2, [r3, #0]
 80122bc:	4b07      	ldr	r3, [pc, #28]	; (80122dc <find_volume+0x4fc>)
 80122be:	881a      	ldrh	r2, [r3, #0]
 80122c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80122c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80122c6:	f7fe fd31 	bl	8010d2c <clear_lock>
#endif
	return FR_OK;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3758      	adds	r7, #88	; 0x58
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	41615252 	.word	0x41615252
 80122d8:	61417272 	.word	0x61417272
 80122dc:	24002cd4 	.word	0x24002cd4

080122e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80122ea:	2309      	movs	r3, #9
 80122ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d01c      	beq.n	801232e <validate+0x4e>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d018      	beq.n	801232e <validate+0x4e>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d013      	beq.n	801232e <validate+0x4e>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	889a      	ldrh	r2, [r3, #4]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	88db      	ldrh	r3, [r3, #6]
 8012310:	429a      	cmp	r2, r3
 8012312:	d10c      	bne.n	801232e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	785b      	ldrb	r3, [r3, #1]
 801231a:	4618      	mov	r0, r3
 801231c:	f7fe fa20 	bl	8010760 <disk_status>
 8012320:	4603      	mov	r3, r0
 8012322:	f003 0301 	and.w	r3, r3, #1
 8012326:	2b00      	cmp	r3, #0
 8012328:	d101      	bne.n	801232e <validate+0x4e>
			res = FR_OK;
 801232a:	2300      	movs	r3, #0
 801232c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801232e:	7bfb      	ldrb	r3, [r7, #15]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d102      	bne.n	801233a <validate+0x5a>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	e000      	b.n	801233c <validate+0x5c>
 801233a:	2300      	movs	r3, #0
 801233c:	683a      	ldr	r2, [r7, #0]
 801233e:	6013      	str	r3, [r2, #0]
	return res;
 8012340:	7bfb      	ldrb	r3, [r7, #15]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
	...

0801234c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b088      	sub	sp, #32
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	4613      	mov	r3, r2
 8012358:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801235e:	f107 0310 	add.w	r3, r7, #16
 8012362:	4618      	mov	r0, r3
 8012364:	f7ff fca2 	bl	8011cac <get_ldnumber>
 8012368:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	2b00      	cmp	r3, #0
 801236e:	da01      	bge.n	8012374 <f_mount+0x28>
 8012370:	230b      	movs	r3, #11
 8012372:	e02b      	b.n	80123cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012374:	4a17      	ldr	r2, [pc, #92]	; (80123d4 <f_mount+0x88>)
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801237c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d005      	beq.n	8012390 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012384:	69b8      	ldr	r0, [r7, #24]
 8012386:	f7fe fcd1 	bl	8010d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	2200      	movs	r2, #0
 801238e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d002      	beq.n	801239c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	490d      	ldr	r1, [pc, #52]	; (80123d4 <f_mount+0x88>)
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <f_mount+0x66>
 80123ac:	79fb      	ldrb	r3, [r7, #7]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d001      	beq.n	80123b6 <f_mount+0x6a>
 80123b2:	2300      	movs	r3, #0
 80123b4:	e00a      	b.n	80123cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80123b6:	f107 010c 	add.w	r1, r7, #12
 80123ba:	f107 0308 	add.w	r3, r7, #8
 80123be:	2200      	movs	r2, #0
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7ff fd0d 	bl	8011de0 <find_volume>
 80123c6:	4603      	mov	r3, r0
 80123c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80123ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3720      	adds	r7, #32
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	24002cd0 	.word	0x24002cd0

080123d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b098      	sub	sp, #96	; 0x60
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	4613      	mov	r3, r2
 80123e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <f_open+0x18>
 80123ec:	2309      	movs	r3, #9
 80123ee:	e1bb      	b.n	8012768 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80123f0:	79fb      	ldrb	r3, [r7, #7]
 80123f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80123f8:	79fa      	ldrb	r2, [r7, #7]
 80123fa:	f107 0110 	add.w	r1, r7, #16
 80123fe:	f107 0308 	add.w	r3, r7, #8
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff fcec 	bl	8011de0 <find_volume>
 8012408:	4603      	mov	r3, r0
 801240a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801240e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012412:	2b00      	cmp	r3, #0
 8012414:	f040 819f 	bne.w	8012756 <f_open+0x37e>
		dj.obj.fs = fs;
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	f107 0314 	add.w	r3, r7, #20
 8012422:	4611      	mov	r1, r2
 8012424:	4618      	mov	r0, r3
 8012426:	f7ff fbcb 	bl	8011bc0 <follow_path>
 801242a:	4603      	mov	r3, r0
 801242c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012434:	2b00      	cmp	r3, #0
 8012436:	d11a      	bne.n	801246e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012438:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801243c:	b25b      	sxtb	r3, r3
 801243e:	2b00      	cmp	r3, #0
 8012440:	da03      	bge.n	801244a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012442:	2306      	movs	r3, #6
 8012444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012448:	e011      	b.n	801246e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801244a:	79fb      	ldrb	r3, [r7, #7]
 801244c:	f023 0301 	bic.w	r3, r3, #1
 8012450:	2b00      	cmp	r3, #0
 8012452:	bf14      	ite	ne
 8012454:	2301      	movne	r3, #1
 8012456:	2300      	moveq	r3, #0
 8012458:	b2db      	uxtb	r3, r3
 801245a:	461a      	mov	r2, r3
 801245c:	f107 0314 	add.w	r3, r7, #20
 8012460:	4611      	mov	r1, r2
 8012462:	4618      	mov	r0, r3
 8012464:	f7fe fb1a 	bl	8010a9c <chk_lock>
 8012468:	4603      	mov	r3, r0
 801246a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801246e:	79fb      	ldrb	r3, [r7, #7]
 8012470:	f003 031c 	and.w	r3, r3, #28
 8012474:	2b00      	cmp	r3, #0
 8012476:	d07f      	beq.n	8012578 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801247c:	2b00      	cmp	r3, #0
 801247e:	d017      	beq.n	80124b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012484:	2b04      	cmp	r3, #4
 8012486:	d10e      	bne.n	80124a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012488:	f7fe fb64 	bl	8010b54 <enq_lock>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d006      	beq.n	80124a0 <f_open+0xc8>
 8012492:	f107 0314 	add.w	r3, r7, #20
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff facc 	bl	8011a34 <dir_register>
 801249c:	4603      	mov	r3, r0
 801249e:	e000      	b.n	80124a2 <f_open+0xca>
 80124a0:	2312      	movs	r3, #18
 80124a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80124a6:	79fb      	ldrb	r3, [r7, #7]
 80124a8:	f043 0308 	orr.w	r3, r3, #8
 80124ac:	71fb      	strb	r3, [r7, #7]
 80124ae:	e010      	b.n	80124d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80124b0:	7ebb      	ldrb	r3, [r7, #26]
 80124b2:	f003 0311 	and.w	r3, r3, #17
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d003      	beq.n	80124c2 <f_open+0xea>
					res = FR_DENIED;
 80124ba:	2307      	movs	r3, #7
 80124bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124c0:	e007      	b.n	80124d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80124c2:	79fb      	ldrb	r3, [r7, #7]
 80124c4:	f003 0304 	and.w	r3, r3, #4
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <f_open+0xfa>
 80124cc:	2308      	movs	r3, #8
 80124ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80124d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d168      	bne.n	80125ac <f_open+0x1d4>
 80124da:	79fb      	ldrb	r3, [r7, #7]
 80124dc:	f003 0308 	and.w	r3, r3, #8
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d063      	beq.n	80125ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80124e4:	f7fe f8de 	bl	80106a4 <get_fattime>
 80124e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80124ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ec:	330e      	adds	r3, #14
 80124ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fe fa29 	bl	8010948 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80124f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124f8:	3316      	adds	r3, #22
 80124fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fe fa23 	bl	8010948 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012504:	330b      	adds	r3, #11
 8012506:	2220      	movs	r2, #32
 8012508:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801250e:	4611      	mov	r1, r2
 8012510:	4618      	mov	r0, r3
 8012512:	f7ff f9fb 	bl	801190c <ld_clust>
 8012516:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801251c:	2200      	movs	r2, #0
 801251e:	4618      	mov	r0, r3
 8012520:	f7ff fa13 	bl	801194a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012526:	331c      	adds	r3, #28
 8012528:	2100      	movs	r1, #0
 801252a:	4618      	mov	r0, r3
 801252c:	f7fe fa0c 	bl	8010948 <st_dword>
					fs->wflag = 1;
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	2201      	movs	r2, #1
 8012534:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012538:	2b00      	cmp	r3, #0
 801253a:	d037      	beq.n	80125ac <f_open+0x1d4>
						dw = fs->winsect;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012540:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012542:	f107 0314 	add.w	r3, r7, #20
 8012546:	2200      	movs	r2, #0
 8012548:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801254a:	4618      	mov	r0, r3
 801254c:	f7fe ff03 	bl	8011356 <remove_chain>
 8012550:	4603      	mov	r3, r0
 8012552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801255a:	2b00      	cmp	r3, #0
 801255c:	d126      	bne.n	80125ac <f_open+0x1d4>
							res = move_window(fs, dw);
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012562:	4618      	mov	r0, r3
 8012564:	f7fe fc4a 	bl	8010dfc <move_window>
 8012568:	4603      	mov	r3, r0
 801256a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012572:	3a01      	subs	r2, #1
 8012574:	611a      	str	r2, [r3, #16]
 8012576:	e019      	b.n	80125ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801257c:	2b00      	cmp	r3, #0
 801257e:	d115      	bne.n	80125ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012580:	7ebb      	ldrb	r3, [r7, #26]
 8012582:	f003 0310 	and.w	r3, r3, #16
 8012586:	2b00      	cmp	r3, #0
 8012588:	d003      	beq.n	8012592 <f_open+0x1ba>
					res = FR_NO_FILE;
 801258a:	2304      	movs	r3, #4
 801258c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012590:	e00c      	b.n	80125ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012592:	79fb      	ldrb	r3, [r7, #7]
 8012594:	f003 0302 	and.w	r3, r3, #2
 8012598:	2b00      	cmp	r3, #0
 801259a:	d007      	beq.n	80125ac <f_open+0x1d4>
 801259c:	7ebb      	ldrb	r3, [r7, #26]
 801259e:	f003 0301 	and.w	r3, r3, #1
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <f_open+0x1d4>
						res = FR_DENIED;
 80125a6:	2307      	movs	r3, #7
 80125a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80125ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d128      	bne.n	8012606 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	f003 0308 	and.w	r3, r3, #8
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80125be:	79fb      	ldrb	r3, [r7, #7]
 80125c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80125ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80125d4:	79fb      	ldrb	r3, [r7, #7]
 80125d6:	f023 0301 	bic.w	r3, r3, #1
 80125da:	2b00      	cmp	r3, #0
 80125dc:	bf14      	ite	ne
 80125de:	2301      	movne	r3, #1
 80125e0:	2300      	moveq	r3, #0
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	461a      	mov	r2, r3
 80125e6:	f107 0314 	add.w	r3, r7, #20
 80125ea:	4611      	mov	r1, r2
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fe fad3 	bl	8010b98 <inc_lock>
 80125f2:	4602      	mov	r2, r0
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d102      	bne.n	8012606 <f_open+0x22e>
 8012600:	2302      	movs	r3, #2
 8012602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801260a:	2b00      	cmp	r3, #0
 801260c:	f040 80a3 	bne.w	8012756 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f7ff f978 	bl	801190c <ld_clust>
 801261c:	4602      	mov	r2, r0
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012624:	331c      	adds	r3, #28
 8012626:	4618      	mov	r0, r3
 8012628:	f7fe f950 	bl	80108cc <ld_dword>
 801262c:	4602      	mov	r2, r0
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2200      	movs	r2, #0
 8012636:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012638:	693a      	ldr	r2, [r7, #16]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	88da      	ldrh	r2, [r3, #6]
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	79fa      	ldrb	r2, [r7, #7]
 801264a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2200      	movs	r2, #0
 8012650:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2200      	movs	r2, #0
 8012656:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	2200      	movs	r2, #0
 801265c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3330      	adds	r3, #48	; 0x30
 8012662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012666:	2100      	movs	r1, #0
 8012668:	4618      	mov	r0, r3
 801266a:	f7fe f9ba 	bl	80109e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801266e:	79fb      	ldrb	r3, [r7, #7]
 8012670:	f003 0320 	and.w	r3, r3, #32
 8012674:	2b00      	cmp	r3, #0
 8012676:	d06e      	beq.n	8012756 <f_open+0x37e>
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d06a      	beq.n	8012756 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	68da      	ldr	r2, [r3, #12]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	895b      	ldrh	r3, [r3, #10]
 801268c:	461a      	mov	r2, r3
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	899b      	ldrh	r3, [r3, #12]
 8012692:	fb02 f303 	mul.w	r3, r2, r3
 8012696:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	657b      	str	r3, [r7, #84]	; 0x54
 80126a4:	e016      	b.n	80126d4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fe fc63 	bl	8010f76 <get_fat>
 80126b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80126b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d802      	bhi.n	80126be <f_open+0x2e6>
 80126b8:	2302      	movs	r3, #2
 80126ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80126be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126c4:	d102      	bne.n	80126cc <f_open+0x2f4>
 80126c6:	2301      	movs	r3, #1
 80126c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80126cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	657b      	str	r3, [r7, #84]	; 0x54
 80126d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d103      	bne.n	80126e4 <f_open+0x30c>
 80126dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d8e0      	bhi.n	80126a6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80126ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d131      	bne.n	8012756 <f_open+0x37e>
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	899b      	ldrh	r3, [r3, #12]
 80126f6:	461a      	mov	r2, r3
 80126f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80126fe:	fb01 f202 	mul.w	r2, r1, r2
 8012702:	1a9b      	subs	r3, r3, r2
 8012704:	2b00      	cmp	r3, #0
 8012706:	d026      	beq.n	8012756 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801270c:	4618      	mov	r0, r3
 801270e:	f7fe fc13 	bl	8010f38 <clust2sect>
 8012712:	6478      	str	r0, [r7, #68]	; 0x44
 8012714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012716:	2b00      	cmp	r3, #0
 8012718:	d103      	bne.n	8012722 <f_open+0x34a>
						res = FR_INT_ERR;
 801271a:	2302      	movs	r3, #2
 801271c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012720:	e019      	b.n	8012756 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	899b      	ldrh	r3, [r3, #12]
 8012726:	461a      	mov	r2, r3
 8012728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272a:	fbb3 f2f2 	udiv	r2, r3, r2
 801272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012730:	441a      	add	r2, r3
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	7858      	ldrb	r0, [r3, #1]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	6a1a      	ldr	r2, [r3, #32]
 8012744:	2301      	movs	r3, #1
 8012746:	f7fe f84b 	bl	80107e0 <disk_read>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d002      	beq.n	8012756 <f_open+0x37e>
 8012750:	2301      	movs	r3, #1
 8012752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801275a:	2b00      	cmp	r3, #0
 801275c:	d002      	beq.n	8012764 <f_open+0x38c>
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2200      	movs	r2, #0
 8012762:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012768:	4618      	mov	r0, r3
 801276a:	3760      	adds	r7, #96	; 0x60
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08c      	sub	sp, #48	; 0x30
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
 801277c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	2200      	movs	r2, #0
 8012786:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f107 0210 	add.w	r2, r7, #16
 801278e:	4611      	mov	r1, r2
 8012790:	4618      	mov	r0, r3
 8012792:	f7ff fda5 	bl	80122e0 <validate>
 8012796:	4603      	mov	r3, r0
 8012798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801279c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d107      	bne.n	80127b4 <f_write+0x44>
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	7d5b      	ldrb	r3, [r3, #21]
 80127a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80127ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <f_write+0x4a>
 80127b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b8:	e16a      	b.n	8012a90 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7d1b      	ldrb	r3, [r3, #20]
 80127be:	f003 0302 	and.w	r3, r3, #2
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d101      	bne.n	80127ca <f_write+0x5a>
 80127c6:	2307      	movs	r3, #7
 80127c8:	e162      	b.n	8012a90 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	699a      	ldr	r2, [r3, #24]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	441a      	add	r2, r3
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	f080 814c 	bcs.w	8012a74 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	699b      	ldr	r3, [r3, #24]
 80127e0:	43db      	mvns	r3, r3
 80127e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80127e4:	e146      	b.n	8012a74 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	699b      	ldr	r3, [r3, #24]
 80127ea:	693a      	ldr	r2, [r7, #16]
 80127ec:	8992      	ldrh	r2, [r2, #12]
 80127ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80127f2:	fb01 f202 	mul.w	r2, r1, r2
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f040 80f1 	bne.w	80129e0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	699b      	ldr	r3, [r3, #24]
 8012802:	693a      	ldr	r2, [r7, #16]
 8012804:	8992      	ldrh	r2, [r2, #12]
 8012806:	fbb3 f3f2 	udiv	r3, r3, r2
 801280a:	693a      	ldr	r2, [r7, #16]
 801280c:	8952      	ldrh	r2, [r2, #10]
 801280e:	3a01      	subs	r2, #1
 8012810:	4013      	ands	r3, r2
 8012812:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d143      	bne.n	80128a2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d10c      	bne.n	801283c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	689b      	ldr	r3, [r3, #8]
 8012826:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282a:	2b00      	cmp	r3, #0
 801282c:	d11a      	bne.n	8012864 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2100      	movs	r1, #0
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe fdf4 	bl	8011420 <create_chain>
 8012838:	62b8      	str	r0, [r7, #40]	; 0x28
 801283a:	e013      	b.n	8012864 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012840:	2b00      	cmp	r3, #0
 8012842:	d007      	beq.n	8012854 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	699b      	ldr	r3, [r3, #24]
 8012848:	4619      	mov	r1, r3
 801284a:	68f8      	ldr	r0, [r7, #12]
 801284c:	f7fe fe80 	bl	8011550 <clmt_clust>
 8012850:	62b8      	str	r0, [r7, #40]	; 0x28
 8012852:	e007      	b.n	8012864 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012854:	68fa      	ldr	r2, [r7, #12]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	69db      	ldr	r3, [r3, #28]
 801285a:	4619      	mov	r1, r3
 801285c:	4610      	mov	r0, r2
 801285e:	f7fe fddf 	bl	8011420 <create_chain>
 8012862:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012866:	2b00      	cmp	r3, #0
 8012868:	f000 8109 	beq.w	8012a7e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286e:	2b01      	cmp	r3, #1
 8012870:	d104      	bne.n	801287c <f_write+0x10c>
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	2202      	movs	r2, #2
 8012876:	755a      	strb	r2, [r3, #21]
 8012878:	2302      	movs	r3, #2
 801287a:	e109      	b.n	8012a90 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012882:	d104      	bne.n	801288e <f_write+0x11e>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2201      	movs	r2, #1
 8012888:	755a      	strb	r2, [r3, #21]
 801288a:	2301      	movs	r3, #1
 801288c:	e100      	b.n	8012a90 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012892:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d102      	bne.n	80128a2 <f_write+0x132>
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	7d1b      	ldrb	r3, [r3, #20]
 80128a6:	b25b      	sxtb	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	da18      	bge.n	80128de <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	7858      	ldrb	r0, [r3, #1]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	6a1a      	ldr	r2, [r3, #32]
 80128ba:	2301      	movs	r3, #1
 80128bc:	f7fd ffb0 	bl	8010820 <disk_write>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d004      	beq.n	80128d0 <f_write+0x160>
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2201      	movs	r2, #1
 80128ca:	755a      	strb	r2, [r3, #21]
 80128cc:	2301      	movs	r3, #1
 80128ce:	e0df      	b.n	8012a90 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	7d1b      	ldrb	r3, [r3, #20]
 80128d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80128de:	693a      	ldr	r2, [r7, #16]
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	69db      	ldr	r3, [r3, #28]
 80128e4:	4619      	mov	r1, r3
 80128e6:	4610      	mov	r0, r2
 80128e8:	f7fe fb26 	bl	8010f38 <clust2sect>
 80128ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d104      	bne.n	80128fe <f_write+0x18e>
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2202      	movs	r2, #2
 80128f8:	755a      	strb	r2, [r3, #21]
 80128fa:	2302      	movs	r3, #2
 80128fc:	e0c8      	b.n	8012a90 <f_write+0x320>
			sect += csect;
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	4413      	add	r3, r2
 8012904:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	899b      	ldrh	r3, [r3, #12]
 801290a:	461a      	mov	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012912:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d043      	beq.n	80129a2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801291a:	69ba      	ldr	r2, [r7, #24]
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	4413      	add	r3, r2
 8012920:	693a      	ldr	r2, [r7, #16]
 8012922:	8952      	ldrh	r2, [r2, #10]
 8012924:	4293      	cmp	r3, r2
 8012926:	d905      	bls.n	8012934 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	895b      	ldrh	r3, [r3, #10]
 801292c:	461a      	mov	r2, r3
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	7858      	ldrb	r0, [r3, #1]
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	697a      	ldr	r2, [r7, #20]
 801293c:	69f9      	ldr	r1, [r7, #28]
 801293e:	f7fd ff6f 	bl	8010820 <disk_write>
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d004      	beq.n	8012952 <f_write+0x1e2>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2201      	movs	r2, #1
 801294c:	755a      	strb	r2, [r3, #21]
 801294e:	2301      	movs	r3, #1
 8012950:	e09e      	b.n	8012a90 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	6a1a      	ldr	r2, [r3, #32]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	6a3a      	ldr	r2, [r7, #32]
 801295c:	429a      	cmp	r2, r3
 801295e:	d918      	bls.n	8012992 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6a1a      	ldr	r2, [r3, #32]
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	693a      	ldr	r2, [r7, #16]
 8012970:	8992      	ldrh	r2, [r2, #12]
 8012972:	fb02 f303 	mul.w	r3, r2, r3
 8012976:	69fa      	ldr	r2, [r7, #28]
 8012978:	18d1      	adds	r1, r2, r3
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	899b      	ldrh	r3, [r3, #12]
 801297e:	461a      	mov	r2, r3
 8012980:	f7fe f80e 	bl	80109a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	7d1b      	ldrb	r3, [r3, #20]
 8012988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801298c:	b2da      	uxtb	r2, r3
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	899b      	ldrh	r3, [r3, #12]
 8012996:	461a      	mov	r2, r3
 8012998:	6a3b      	ldr	r3, [r7, #32]
 801299a:	fb02 f303 	mul.w	r3, r2, r3
 801299e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80129a0:	e04b      	b.n	8012a3a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	697a      	ldr	r2, [r7, #20]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d016      	beq.n	80129da <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	699a      	ldr	r2, [r3, #24]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d210      	bcs.n	80129da <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	7858      	ldrb	r0, [r3, #1]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129c2:	2301      	movs	r3, #1
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	f7fd ff0b 	bl	80107e0 <disk_read>
 80129ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d004      	beq.n	80129da <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2201      	movs	r2, #1
 80129d4:	755a      	strb	r2, [r3, #21]
 80129d6:	2301      	movs	r3, #1
 80129d8:	e05a      	b.n	8012a90 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	697a      	ldr	r2, [r7, #20]
 80129de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	899b      	ldrh	r3, [r3, #12]
 80129e4:	4618      	mov	r0, r3
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	699b      	ldr	r3, [r3, #24]
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	8992      	ldrh	r2, [r2, #12]
 80129ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80129f2:	fb01 f202 	mul.w	r2, r1, r2
 80129f6:	1a9b      	subs	r3, r3, r2
 80129f8:	1ac3      	subs	r3, r0, r3
 80129fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80129fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d901      	bls.n	8012a08 <f_write+0x298>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	699b      	ldr	r3, [r3, #24]
 8012a12:	693a      	ldr	r2, [r7, #16]
 8012a14:	8992      	ldrh	r2, [r2, #12]
 8012a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a1a:	fb00 f202 	mul.w	r2, r0, r2
 8012a1e:	1a9b      	subs	r3, r3, r2
 8012a20:	440b      	add	r3, r1
 8012a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a24:	69f9      	ldr	r1, [r7, #28]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fd ffba 	bl	80109a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	7d1b      	ldrb	r3, [r3, #20]
 8012a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012a3a:	69fa      	ldr	r2, [r7, #28]
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	4413      	add	r3, r2
 8012a40:	61fb      	str	r3, [r7, #28]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	699a      	ldr	r2, [r3, #24]
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	441a      	add	r2, r3
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	619a      	str	r2, [r3, #24]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	68da      	ldr	r2, [r3, #12]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	699b      	ldr	r3, [r3, #24]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	bf38      	it	cc
 8012a5a:	461a      	movcc	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	60da      	str	r2, [r3, #12]
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a66:	441a      	add	r2, r3
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	601a      	str	r2, [r3, #0]
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a70:	1ad3      	subs	r3, r2, r3
 8012a72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f47f aeb5 	bne.w	80127e6 <f_write+0x76>
 8012a7c:	e000      	b.n	8012a80 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a7e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	7d1b      	ldrb	r3, [r3, #20]
 8012a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3730      	adds	r7, #48	; 0x30
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b086      	sub	sp, #24
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f107 0208 	add.w	r2, r7, #8
 8012aa6:	4611      	mov	r1, r2
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7ff fc19 	bl	80122e0 <validate>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ab2:	7dfb      	ldrb	r3, [r7, #23]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d168      	bne.n	8012b8a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	7d1b      	ldrb	r3, [r3, #20]
 8012abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d062      	beq.n	8012b8a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	b25b      	sxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	da15      	bge.n	8012afa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	7858      	ldrb	r0, [r3, #1]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a1a      	ldr	r2, [r3, #32]
 8012adc:	2301      	movs	r3, #1
 8012ade:	f7fd fe9f 	bl	8010820 <disk_write>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d001      	beq.n	8012aec <f_sync+0x54>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e04f      	b.n	8012b8c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	7d1b      	ldrb	r3, [r3, #20]
 8012af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012af4:	b2da      	uxtb	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012afa:	f7fd fdd3 	bl	80106a4 <get_fattime>
 8012afe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012b00:	68ba      	ldr	r2, [r7, #8]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b06:	4619      	mov	r1, r3
 8012b08:	4610      	mov	r0, r2
 8012b0a:	f7fe f977 	bl	8010dfc <move_window>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012b12:	7dfb      	ldrb	r3, [r7, #23]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d138      	bne.n	8012b8a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b1c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	330b      	adds	r3, #11
 8012b22:	781a      	ldrb	r2, [r3, #0]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	330b      	adds	r3, #11
 8012b28:	f042 0220 	orr.w	r2, r2, #32
 8012b2c:	b2d2      	uxtb	r2, r2
 8012b2e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6818      	ldr	r0, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	68f9      	ldr	r1, [r7, #12]
 8012b3c:	f7fe ff05 	bl	801194a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f103 021c 	add.w	r2, r3, #28
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	f7fd fefb 	bl	8010948 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	3316      	adds	r3, #22
 8012b56:	6939      	ldr	r1, [r7, #16]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fd fef5 	bl	8010948 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	3312      	adds	r3, #18
 8012b62:	2100      	movs	r1, #0
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7fd fed4 	bl	8010912 <st_word>
					fs->wflag = 1;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe f970 	bl	8010e58 <sync_fs>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	7d1b      	ldrb	r3, [r3, #20]
 8012b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b84:	b2da      	uxtb	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3718      	adds	r7, #24
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff ff7b 	bl	8012a98 <f_sync>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012ba6:	7bfb      	ldrb	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d118      	bne.n	8012bde <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f107 0208 	add.w	r2, r7, #8
 8012bb2:	4611      	mov	r1, r2
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7ff fb93 	bl	80122e0 <validate>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012bbe:	7bfb      	ldrb	r3, [r7, #15]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10c      	bne.n	8012bde <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	691b      	ldr	r3, [r3, #16]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fe f873 	bl	8010cb4 <dec_lock>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012bd2:	7bfb      	ldrb	r3, [r7, #15]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	460b      	mov	r3, r1
 8012bf2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012bf4:	78fb      	ldrb	r3, [r7, #3]
 8012bf6:	2b0a      	cmp	r3, #10
 8012bf8:	d103      	bne.n	8012c02 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012bfa:	210d      	movs	r1, #13
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff fff3 	bl	8012be8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	db25      	blt.n	8012c5a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	1c5a      	adds	r2, r3, #1
 8012c12:	60fa      	str	r2, [r7, #12]
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	4413      	add	r3, r2
 8012c18:	78fa      	ldrb	r2, [r7, #3]
 8012c1a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2b3c      	cmp	r3, #60	; 0x3c
 8012c20:	dd12      	ble.n	8012c48 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6818      	ldr	r0, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f103 010c 	add.w	r1, r3, #12
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	f107 0308 	add.w	r3, r7, #8
 8012c32:	f7ff fd9d 	bl	8012770 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012c36:	68ba      	ldr	r2, [r7, #8]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d101      	bne.n	8012c42 <putc_bfd+0x5a>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e001      	b.n	8012c46 <putc_bfd+0x5e>
 8012c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c46:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	1c5a      	adds	r2, r3, #1
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	609a      	str	r2, [r3, #8]
 8012c58:	e000      	b.n	8012c5c <putc_bfd+0x74>
	if (i < 0) return;
 8012c5a:	bf00      	nop
}
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b084      	sub	sp, #16
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	db16      	blt.n	8012ca0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6818      	ldr	r0, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f103 010c 	add.w	r1, r3, #12
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	461a      	mov	r2, r3
 8012c82:	f107 030c 	add.w	r3, r7, #12
 8012c86:	f7ff fd73 	bl	8012770 <f_write>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d107      	bne.n	8012ca0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d102      	bne.n	8012ca0 <putc_flush+0x3e>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	e001      	b.n	8012ca4 <putc_flush+0x42>
	return EOF;
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	683a      	ldr	r2, [r7, #0]
 8012cba:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	605a      	str	r2, [r3, #4]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	685a      	ldr	r2, [r3, #4]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	609a      	str	r2, [r3, #8]
}
 8012cca:	bf00      	nop
 8012ccc:	370c      	adds	r7, #12
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr

08012cd6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b096      	sub	sp, #88	; 0x58
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
 8012cde:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8012ce0:	f107 030c 	add.w	r3, r7, #12
 8012ce4:	6839      	ldr	r1, [r7, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ff ffe0 	bl	8012cac <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8012cec:	e009      	b.n	8012d02 <f_puts+0x2c>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	1c5a      	adds	r2, r3, #1
 8012cf2:	607a      	str	r2, [r7, #4]
 8012cf4:	781a      	ldrb	r2, [r3, #0]
 8012cf6:	f107 030c 	add.w	r3, r7, #12
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7ff ff73 	bl	8012be8 <putc_bfd>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d1f1      	bne.n	8012cee <f_puts+0x18>
	return putc_flush(&pb);
 8012d0a:	f107 030c 	add.w	r3, r7, #12
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7ff ffa7 	bl	8012c62 <putc_flush>
 8012d14:	4603      	mov	r3, r0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3758      	adds	r7, #88	; 0x58
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
	...

08012d20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b087      	sub	sp, #28
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012d36:	4b1f      	ldr	r3, [pc, #124]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d38:	7a5b      	ldrb	r3, [r3, #9]
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d131      	bne.n	8012da4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d42:	7a5b      	ldrb	r3, [r3, #9]
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	461a      	mov	r2, r3
 8012d48:	4b1a      	ldr	r3, [pc, #104]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012d4e:	4b19      	ldr	r3, [pc, #100]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d50:	7a5b      	ldrb	r3, [r3, #9]
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	4a17      	ldr	r2, [pc, #92]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	4413      	add	r3, r2
 8012d5a:	68fa      	ldr	r2, [r7, #12]
 8012d5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012d5e:	4b15      	ldr	r3, [pc, #84]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d60:	7a5b      	ldrb	r3, [r3, #9]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	461a      	mov	r2, r3
 8012d66:	4b13      	ldr	r3, [pc, #76]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d68:	4413      	add	r3, r2
 8012d6a:	79fa      	ldrb	r2, [r7, #7]
 8012d6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012d6e:	4b11      	ldr	r3, [pc, #68]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d70:	7a5b      	ldrb	r3, [r3, #9]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	1c5a      	adds	r2, r3, #1
 8012d76:	b2d1      	uxtb	r1, r2
 8012d78:	4a0e      	ldr	r2, [pc, #56]	; (8012db4 <FATFS_LinkDriverEx+0x94>)
 8012d7a:	7251      	strb	r1, [r2, #9]
 8012d7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012d7e:	7dbb      	ldrb	r3, [r7, #22]
 8012d80:	3330      	adds	r3, #48	; 0x30
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	223a      	movs	r2, #58	; 0x3a
 8012d8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	3302      	adds	r3, #2
 8012d94:	222f      	movs	r2, #47	; 0x2f
 8012d96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	3303      	adds	r3, #3
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	371c      	adds	r7, #28
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr
 8012db2:	bf00      	nop
 8012db4:	24002cf8 	.word	0x24002cf8

08012db8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff ffaa 	bl	8012d20 <FATFS_LinkDriverEx>
 8012dcc:	4603      	mov	r3, r0
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
	...

08012dd8 <__errno>:
 8012dd8:	4b01      	ldr	r3, [pc, #4]	; (8012de0 <__errno+0x8>)
 8012dda:	6818      	ldr	r0, [r3, #0]
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	24000028 	.word	0x24000028

08012de4 <__libc_init_array>:
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	4d0d      	ldr	r5, [pc, #52]	; (8012e1c <__libc_init_array+0x38>)
 8012de8:	4c0d      	ldr	r4, [pc, #52]	; (8012e20 <__libc_init_array+0x3c>)
 8012dea:	1b64      	subs	r4, r4, r5
 8012dec:	10a4      	asrs	r4, r4, #2
 8012dee:	2600      	movs	r6, #0
 8012df0:	42a6      	cmp	r6, r4
 8012df2:	d109      	bne.n	8012e08 <__libc_init_array+0x24>
 8012df4:	4d0b      	ldr	r5, [pc, #44]	; (8012e24 <__libc_init_array+0x40>)
 8012df6:	4c0c      	ldr	r4, [pc, #48]	; (8012e28 <__libc_init_array+0x44>)
 8012df8:	f004 fbba 	bl	8017570 <_init>
 8012dfc:	1b64      	subs	r4, r4, r5
 8012dfe:	10a4      	asrs	r4, r4, #2
 8012e00:	2600      	movs	r6, #0
 8012e02:	42a6      	cmp	r6, r4
 8012e04:	d105      	bne.n	8012e12 <__libc_init_array+0x2e>
 8012e06:	bd70      	pop	{r4, r5, r6, pc}
 8012e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e0c:	4798      	blx	r3
 8012e0e:	3601      	adds	r6, #1
 8012e10:	e7ee      	b.n	8012df0 <__libc_init_array+0xc>
 8012e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e16:	4798      	blx	r3
 8012e18:	3601      	adds	r6, #1
 8012e1a:	e7f2      	b.n	8012e02 <__libc_init_array+0x1e>
 8012e1c:	08017d34 	.word	0x08017d34
 8012e20:	08017d34 	.word	0x08017d34
 8012e24:	08017d34 	.word	0x08017d34
 8012e28:	08017d38 	.word	0x08017d38

08012e2c <memcpy>:
 8012e2c:	440a      	add	r2, r1
 8012e2e:	4291      	cmp	r1, r2
 8012e30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012e34:	d100      	bne.n	8012e38 <memcpy+0xc>
 8012e36:	4770      	bx	lr
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e42:	4291      	cmp	r1, r2
 8012e44:	d1f9      	bne.n	8012e3a <memcpy+0xe>
 8012e46:	bd10      	pop	{r4, pc}

08012e48 <memset>:
 8012e48:	4402      	add	r2, r0
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d100      	bne.n	8012e52 <memset+0xa>
 8012e50:	4770      	bx	lr
 8012e52:	f803 1b01 	strb.w	r1, [r3], #1
 8012e56:	e7f9      	b.n	8012e4c <memset+0x4>

08012e58 <__cvt>:
 8012e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e5a:	ed2d 8b02 	vpush	{d8}
 8012e5e:	eeb0 8b40 	vmov.f64	d8, d0
 8012e62:	b085      	sub	sp, #20
 8012e64:	4617      	mov	r7, r2
 8012e66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012e68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012e6a:	ee18 2a90 	vmov	r2, s17
 8012e6e:	f025 0520 	bic.w	r5, r5, #32
 8012e72:	2a00      	cmp	r2, #0
 8012e74:	bfb6      	itet	lt
 8012e76:	222d      	movlt	r2, #45	; 0x2d
 8012e78:	2200      	movge	r2, #0
 8012e7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8012e7e:	2d46      	cmp	r5, #70	; 0x46
 8012e80:	460c      	mov	r4, r1
 8012e82:	701a      	strb	r2, [r3, #0]
 8012e84:	d004      	beq.n	8012e90 <__cvt+0x38>
 8012e86:	2d45      	cmp	r5, #69	; 0x45
 8012e88:	d100      	bne.n	8012e8c <__cvt+0x34>
 8012e8a:	3401      	adds	r4, #1
 8012e8c:	2102      	movs	r1, #2
 8012e8e:	e000      	b.n	8012e92 <__cvt+0x3a>
 8012e90:	2103      	movs	r1, #3
 8012e92:	ab03      	add	r3, sp, #12
 8012e94:	9301      	str	r3, [sp, #4]
 8012e96:	ab02      	add	r3, sp, #8
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	4622      	mov	r2, r4
 8012e9c:	4633      	mov	r3, r6
 8012e9e:	eeb0 0b48 	vmov.f64	d0, d8
 8012ea2:	f001 fd61 	bl	8014968 <_dtoa_r>
 8012ea6:	2d47      	cmp	r5, #71	; 0x47
 8012ea8:	d101      	bne.n	8012eae <__cvt+0x56>
 8012eaa:	07fb      	lsls	r3, r7, #31
 8012eac:	d51a      	bpl.n	8012ee4 <__cvt+0x8c>
 8012eae:	2d46      	cmp	r5, #70	; 0x46
 8012eb0:	eb00 0204 	add.w	r2, r0, r4
 8012eb4:	d10c      	bne.n	8012ed0 <__cvt+0x78>
 8012eb6:	7803      	ldrb	r3, [r0, #0]
 8012eb8:	2b30      	cmp	r3, #48	; 0x30
 8012eba:	d107      	bne.n	8012ecc <__cvt+0x74>
 8012ebc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec4:	bf1c      	itt	ne
 8012ec6:	f1c4 0401 	rsbne	r4, r4, #1
 8012eca:	6034      	strne	r4, [r6, #0]
 8012ecc:	6833      	ldr	r3, [r6, #0]
 8012ece:	441a      	add	r2, r3
 8012ed0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed8:	bf08      	it	eq
 8012eda:	9203      	streq	r2, [sp, #12]
 8012edc:	2130      	movs	r1, #48	; 0x30
 8012ede:	9b03      	ldr	r3, [sp, #12]
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d307      	bcc.n	8012ef4 <__cvt+0x9c>
 8012ee4:	9b03      	ldr	r3, [sp, #12]
 8012ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ee8:	1a1b      	subs	r3, r3, r0
 8012eea:	6013      	str	r3, [r2, #0]
 8012eec:	b005      	add	sp, #20
 8012eee:	ecbd 8b02 	vpop	{d8}
 8012ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ef4:	1c5c      	adds	r4, r3, #1
 8012ef6:	9403      	str	r4, [sp, #12]
 8012ef8:	7019      	strb	r1, [r3, #0]
 8012efa:	e7f0      	b.n	8012ede <__cvt+0x86>

08012efc <__exponent>:
 8012efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012efe:	4603      	mov	r3, r0
 8012f00:	2900      	cmp	r1, #0
 8012f02:	bfb8      	it	lt
 8012f04:	4249      	neglt	r1, r1
 8012f06:	f803 2b02 	strb.w	r2, [r3], #2
 8012f0a:	bfb4      	ite	lt
 8012f0c:	222d      	movlt	r2, #45	; 0x2d
 8012f0e:	222b      	movge	r2, #43	; 0x2b
 8012f10:	2909      	cmp	r1, #9
 8012f12:	7042      	strb	r2, [r0, #1]
 8012f14:	dd2a      	ble.n	8012f6c <__exponent+0x70>
 8012f16:	f10d 0407 	add.w	r4, sp, #7
 8012f1a:	46a4      	mov	ip, r4
 8012f1c:	270a      	movs	r7, #10
 8012f1e:	46a6      	mov	lr, r4
 8012f20:	460a      	mov	r2, r1
 8012f22:	fb91 f6f7 	sdiv	r6, r1, r7
 8012f26:	fb07 1516 	mls	r5, r7, r6, r1
 8012f2a:	3530      	adds	r5, #48	; 0x30
 8012f2c:	2a63      	cmp	r2, #99	; 0x63
 8012f2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012f32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012f36:	4631      	mov	r1, r6
 8012f38:	dcf1      	bgt.n	8012f1e <__exponent+0x22>
 8012f3a:	3130      	adds	r1, #48	; 0x30
 8012f3c:	f1ae 0502 	sub.w	r5, lr, #2
 8012f40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012f44:	1c44      	adds	r4, r0, #1
 8012f46:	4629      	mov	r1, r5
 8012f48:	4561      	cmp	r1, ip
 8012f4a:	d30a      	bcc.n	8012f62 <__exponent+0x66>
 8012f4c:	f10d 0209 	add.w	r2, sp, #9
 8012f50:	eba2 020e 	sub.w	r2, r2, lr
 8012f54:	4565      	cmp	r5, ip
 8012f56:	bf88      	it	hi
 8012f58:	2200      	movhi	r2, #0
 8012f5a:	4413      	add	r3, r2
 8012f5c:	1a18      	subs	r0, r3, r0
 8012f5e:	b003      	add	sp, #12
 8012f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012f6a:	e7ed      	b.n	8012f48 <__exponent+0x4c>
 8012f6c:	2330      	movs	r3, #48	; 0x30
 8012f6e:	3130      	adds	r1, #48	; 0x30
 8012f70:	7083      	strb	r3, [r0, #2]
 8012f72:	70c1      	strb	r1, [r0, #3]
 8012f74:	1d03      	adds	r3, r0, #4
 8012f76:	e7f1      	b.n	8012f5c <__exponent+0x60>

08012f78 <_printf_float>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	b08b      	sub	sp, #44	; 0x2c
 8012f7e:	460c      	mov	r4, r1
 8012f80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012f84:	4616      	mov	r6, r2
 8012f86:	461f      	mov	r7, r3
 8012f88:	4605      	mov	r5, r0
 8012f8a:	f002 fdcb 	bl	8015b24 <_localeconv_r>
 8012f8e:	f8d0 b000 	ldr.w	fp, [r0]
 8012f92:	4658      	mov	r0, fp
 8012f94:	f7ed f9ac 	bl	80002f0 <strlen>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	9308      	str	r3, [sp, #32]
 8012f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8012fa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012fa4:	6822      	ldr	r2, [r4, #0]
 8012fa6:	3307      	adds	r3, #7
 8012fa8:	f023 0307 	bic.w	r3, r3, #7
 8012fac:	f103 0108 	add.w	r1, r3, #8
 8012fb0:	f8c8 1000 	str.w	r1, [r8]
 8012fb4:	4682      	mov	sl, r0
 8012fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012fba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012fbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013220 <_printf_float+0x2a8>
 8012fc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012fc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8012fca:	eeb4 6b47 	vcmp.f64	d6, d7
 8012fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd2:	dd24      	ble.n	801301e <_printf_float+0xa6>
 8012fd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fdc:	d502      	bpl.n	8012fe4 <_printf_float+0x6c>
 8012fde:	232d      	movs	r3, #45	; 0x2d
 8012fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fe4:	4b90      	ldr	r3, [pc, #576]	; (8013228 <_printf_float+0x2b0>)
 8012fe6:	4891      	ldr	r0, [pc, #580]	; (801322c <_printf_float+0x2b4>)
 8012fe8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012fec:	bf94      	ite	ls
 8012fee:	4698      	movls	r8, r3
 8012ff0:	4680      	movhi	r8, r0
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	6123      	str	r3, [r4, #16]
 8012ff6:	f022 0204 	bic.w	r2, r2, #4
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	6022      	str	r2, [r4, #0]
 8012ffe:	9304      	str	r3, [sp, #16]
 8013000:	9700      	str	r7, [sp, #0]
 8013002:	4633      	mov	r3, r6
 8013004:	aa09      	add	r2, sp, #36	; 0x24
 8013006:	4621      	mov	r1, r4
 8013008:	4628      	mov	r0, r5
 801300a:	f000 f9d3 	bl	80133b4 <_printf_common>
 801300e:	3001      	adds	r0, #1
 8013010:	f040 808a 	bne.w	8013128 <_printf_float+0x1b0>
 8013014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013018:	b00b      	add	sp, #44	; 0x2c
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013026:	d709      	bvc.n	801303c <_printf_float+0xc4>
 8013028:	ee10 3a90 	vmov	r3, s1
 801302c:	2b00      	cmp	r3, #0
 801302e:	bfbc      	itt	lt
 8013030:	232d      	movlt	r3, #45	; 0x2d
 8013032:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013036:	487e      	ldr	r0, [pc, #504]	; (8013230 <_printf_float+0x2b8>)
 8013038:	4b7e      	ldr	r3, [pc, #504]	; (8013234 <_printf_float+0x2bc>)
 801303a:	e7d5      	b.n	8012fe8 <_printf_float+0x70>
 801303c:	6863      	ldr	r3, [r4, #4]
 801303e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013042:	9104      	str	r1, [sp, #16]
 8013044:	1c59      	adds	r1, r3, #1
 8013046:	d13c      	bne.n	80130c2 <_printf_float+0x14a>
 8013048:	2306      	movs	r3, #6
 801304a:	6063      	str	r3, [r4, #4]
 801304c:	2300      	movs	r3, #0
 801304e:	9303      	str	r3, [sp, #12]
 8013050:	ab08      	add	r3, sp, #32
 8013052:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801305a:	ab07      	add	r3, sp, #28
 801305c:	6861      	ldr	r1, [r4, #4]
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	6022      	str	r2, [r4, #0]
 8013062:	f10d 031b 	add.w	r3, sp, #27
 8013066:	4628      	mov	r0, r5
 8013068:	f7ff fef6 	bl	8012e58 <__cvt>
 801306c:	9b04      	ldr	r3, [sp, #16]
 801306e:	9907      	ldr	r1, [sp, #28]
 8013070:	2b47      	cmp	r3, #71	; 0x47
 8013072:	4680      	mov	r8, r0
 8013074:	d108      	bne.n	8013088 <_printf_float+0x110>
 8013076:	1cc8      	adds	r0, r1, #3
 8013078:	db02      	blt.n	8013080 <_printf_float+0x108>
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	4299      	cmp	r1, r3
 801307e:	dd41      	ble.n	8013104 <_printf_float+0x18c>
 8013080:	f1a9 0902 	sub.w	r9, r9, #2
 8013084:	fa5f f989 	uxtb.w	r9, r9
 8013088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801308c:	d820      	bhi.n	80130d0 <_printf_float+0x158>
 801308e:	3901      	subs	r1, #1
 8013090:	464a      	mov	r2, r9
 8013092:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013096:	9107      	str	r1, [sp, #28]
 8013098:	f7ff ff30 	bl	8012efc <__exponent>
 801309c:	9a08      	ldr	r2, [sp, #32]
 801309e:	9004      	str	r0, [sp, #16]
 80130a0:	1813      	adds	r3, r2, r0
 80130a2:	2a01      	cmp	r2, #1
 80130a4:	6123      	str	r3, [r4, #16]
 80130a6:	dc02      	bgt.n	80130ae <_printf_float+0x136>
 80130a8:	6822      	ldr	r2, [r4, #0]
 80130aa:	07d2      	lsls	r2, r2, #31
 80130ac:	d501      	bpl.n	80130b2 <_printf_float+0x13a>
 80130ae:	3301      	adds	r3, #1
 80130b0:	6123      	str	r3, [r4, #16]
 80130b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d0a2      	beq.n	8013000 <_printf_float+0x88>
 80130ba:	232d      	movs	r3, #45	; 0x2d
 80130bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130c0:	e79e      	b.n	8013000 <_printf_float+0x88>
 80130c2:	9904      	ldr	r1, [sp, #16]
 80130c4:	2947      	cmp	r1, #71	; 0x47
 80130c6:	d1c1      	bne.n	801304c <_printf_float+0xd4>
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d1bf      	bne.n	801304c <_printf_float+0xd4>
 80130cc:	2301      	movs	r3, #1
 80130ce:	e7bc      	b.n	801304a <_printf_float+0xd2>
 80130d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80130d4:	d118      	bne.n	8013108 <_printf_float+0x190>
 80130d6:	2900      	cmp	r1, #0
 80130d8:	6863      	ldr	r3, [r4, #4]
 80130da:	dd0b      	ble.n	80130f4 <_printf_float+0x17c>
 80130dc:	6121      	str	r1, [r4, #16]
 80130de:	b913      	cbnz	r3, 80130e6 <_printf_float+0x16e>
 80130e0:	6822      	ldr	r2, [r4, #0]
 80130e2:	07d0      	lsls	r0, r2, #31
 80130e4:	d502      	bpl.n	80130ec <_printf_float+0x174>
 80130e6:	3301      	adds	r3, #1
 80130e8:	440b      	add	r3, r1
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	2300      	movs	r3, #0
 80130ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80130f0:	9304      	str	r3, [sp, #16]
 80130f2:	e7de      	b.n	80130b2 <_printf_float+0x13a>
 80130f4:	b913      	cbnz	r3, 80130fc <_printf_float+0x184>
 80130f6:	6822      	ldr	r2, [r4, #0]
 80130f8:	07d2      	lsls	r2, r2, #31
 80130fa:	d501      	bpl.n	8013100 <_printf_float+0x188>
 80130fc:	3302      	adds	r3, #2
 80130fe:	e7f4      	b.n	80130ea <_printf_float+0x172>
 8013100:	2301      	movs	r3, #1
 8013102:	e7f2      	b.n	80130ea <_printf_float+0x172>
 8013104:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013108:	9b08      	ldr	r3, [sp, #32]
 801310a:	4299      	cmp	r1, r3
 801310c:	db05      	blt.n	801311a <_printf_float+0x1a2>
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	6121      	str	r1, [r4, #16]
 8013112:	07d8      	lsls	r0, r3, #31
 8013114:	d5ea      	bpl.n	80130ec <_printf_float+0x174>
 8013116:	1c4b      	adds	r3, r1, #1
 8013118:	e7e7      	b.n	80130ea <_printf_float+0x172>
 801311a:	2900      	cmp	r1, #0
 801311c:	bfd4      	ite	le
 801311e:	f1c1 0202 	rsble	r2, r1, #2
 8013122:	2201      	movgt	r2, #1
 8013124:	4413      	add	r3, r2
 8013126:	e7e0      	b.n	80130ea <_printf_float+0x172>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	055a      	lsls	r2, r3, #21
 801312c:	d407      	bmi.n	801313e <_printf_float+0x1c6>
 801312e:	6923      	ldr	r3, [r4, #16]
 8013130:	4642      	mov	r2, r8
 8013132:	4631      	mov	r1, r6
 8013134:	4628      	mov	r0, r5
 8013136:	47b8      	blx	r7
 8013138:	3001      	adds	r0, #1
 801313a:	d12a      	bne.n	8013192 <_printf_float+0x21a>
 801313c:	e76a      	b.n	8013014 <_printf_float+0x9c>
 801313e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013142:	f240 80e2 	bls.w	801330a <_printf_float+0x392>
 8013146:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801314a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013152:	d133      	bne.n	80131bc <_printf_float+0x244>
 8013154:	4a38      	ldr	r2, [pc, #224]	; (8013238 <_printf_float+0x2c0>)
 8013156:	2301      	movs	r3, #1
 8013158:	4631      	mov	r1, r6
 801315a:	4628      	mov	r0, r5
 801315c:	47b8      	blx	r7
 801315e:	3001      	adds	r0, #1
 8013160:	f43f af58 	beq.w	8013014 <_printf_float+0x9c>
 8013164:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013168:	429a      	cmp	r2, r3
 801316a:	db02      	blt.n	8013172 <_printf_float+0x1fa>
 801316c:	6823      	ldr	r3, [r4, #0]
 801316e:	07d8      	lsls	r0, r3, #31
 8013170:	d50f      	bpl.n	8013192 <_printf_float+0x21a>
 8013172:	4653      	mov	r3, sl
 8013174:	465a      	mov	r2, fp
 8013176:	4631      	mov	r1, r6
 8013178:	4628      	mov	r0, r5
 801317a:	47b8      	blx	r7
 801317c:	3001      	adds	r0, #1
 801317e:	f43f af49 	beq.w	8013014 <_printf_float+0x9c>
 8013182:	f04f 0800 	mov.w	r8, #0
 8013186:	f104 091a 	add.w	r9, r4, #26
 801318a:	9b08      	ldr	r3, [sp, #32]
 801318c:	3b01      	subs	r3, #1
 801318e:	4543      	cmp	r3, r8
 8013190:	dc09      	bgt.n	80131a6 <_printf_float+0x22e>
 8013192:	6823      	ldr	r3, [r4, #0]
 8013194:	079b      	lsls	r3, r3, #30
 8013196:	f100 8108 	bmi.w	80133aa <_printf_float+0x432>
 801319a:	68e0      	ldr	r0, [r4, #12]
 801319c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801319e:	4298      	cmp	r0, r3
 80131a0:	bfb8      	it	lt
 80131a2:	4618      	movlt	r0, r3
 80131a4:	e738      	b.n	8013018 <_printf_float+0xa0>
 80131a6:	2301      	movs	r3, #1
 80131a8:	464a      	mov	r2, r9
 80131aa:	4631      	mov	r1, r6
 80131ac:	4628      	mov	r0, r5
 80131ae:	47b8      	blx	r7
 80131b0:	3001      	adds	r0, #1
 80131b2:	f43f af2f 	beq.w	8013014 <_printf_float+0x9c>
 80131b6:	f108 0801 	add.w	r8, r8, #1
 80131ba:	e7e6      	b.n	801318a <_printf_float+0x212>
 80131bc:	9b07      	ldr	r3, [sp, #28]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	dc3c      	bgt.n	801323c <_printf_float+0x2c4>
 80131c2:	4a1d      	ldr	r2, [pc, #116]	; (8013238 <_printf_float+0x2c0>)
 80131c4:	2301      	movs	r3, #1
 80131c6:	4631      	mov	r1, r6
 80131c8:	4628      	mov	r0, r5
 80131ca:	47b8      	blx	r7
 80131cc:	3001      	adds	r0, #1
 80131ce:	f43f af21 	beq.w	8013014 <_printf_float+0x9c>
 80131d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80131d6:	4313      	orrs	r3, r2
 80131d8:	d102      	bne.n	80131e0 <_printf_float+0x268>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	07d9      	lsls	r1, r3, #31
 80131de:	d5d8      	bpl.n	8013192 <_printf_float+0x21a>
 80131e0:	4653      	mov	r3, sl
 80131e2:	465a      	mov	r2, fp
 80131e4:	4631      	mov	r1, r6
 80131e6:	4628      	mov	r0, r5
 80131e8:	47b8      	blx	r7
 80131ea:	3001      	adds	r0, #1
 80131ec:	f43f af12 	beq.w	8013014 <_printf_float+0x9c>
 80131f0:	f04f 0900 	mov.w	r9, #0
 80131f4:	f104 0a1a 	add.w	sl, r4, #26
 80131f8:	9b07      	ldr	r3, [sp, #28]
 80131fa:	425b      	negs	r3, r3
 80131fc:	454b      	cmp	r3, r9
 80131fe:	dc01      	bgt.n	8013204 <_printf_float+0x28c>
 8013200:	9b08      	ldr	r3, [sp, #32]
 8013202:	e795      	b.n	8013130 <_printf_float+0x1b8>
 8013204:	2301      	movs	r3, #1
 8013206:	4652      	mov	r2, sl
 8013208:	4631      	mov	r1, r6
 801320a:	4628      	mov	r0, r5
 801320c:	47b8      	blx	r7
 801320e:	3001      	adds	r0, #1
 8013210:	f43f af00 	beq.w	8013014 <_printf_float+0x9c>
 8013214:	f109 0901 	add.w	r9, r9, #1
 8013218:	e7ee      	b.n	80131f8 <_printf_float+0x280>
 801321a:	bf00      	nop
 801321c:	f3af 8000 	nop.w
 8013220:	ffffffff 	.word	0xffffffff
 8013224:	7fefffff 	.word	0x7fefffff
 8013228:	0801788c 	.word	0x0801788c
 801322c:	08017890 	.word	0x08017890
 8013230:	08017898 	.word	0x08017898
 8013234:	08017894 	.word	0x08017894
 8013238:	0801789c 	.word	0x0801789c
 801323c:	9a08      	ldr	r2, [sp, #32]
 801323e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013240:	429a      	cmp	r2, r3
 8013242:	bfa8      	it	ge
 8013244:	461a      	movge	r2, r3
 8013246:	2a00      	cmp	r2, #0
 8013248:	4691      	mov	r9, r2
 801324a:	dc38      	bgt.n	80132be <_printf_float+0x346>
 801324c:	2300      	movs	r3, #0
 801324e:	9305      	str	r3, [sp, #20]
 8013250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013254:	f104 021a 	add.w	r2, r4, #26
 8013258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801325a:	9905      	ldr	r1, [sp, #20]
 801325c:	9304      	str	r3, [sp, #16]
 801325e:	eba3 0309 	sub.w	r3, r3, r9
 8013262:	428b      	cmp	r3, r1
 8013264:	dc33      	bgt.n	80132ce <_printf_float+0x356>
 8013266:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801326a:	429a      	cmp	r2, r3
 801326c:	db3c      	blt.n	80132e8 <_printf_float+0x370>
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	07da      	lsls	r2, r3, #31
 8013272:	d439      	bmi.n	80132e8 <_printf_float+0x370>
 8013274:	9b08      	ldr	r3, [sp, #32]
 8013276:	9a04      	ldr	r2, [sp, #16]
 8013278:	9907      	ldr	r1, [sp, #28]
 801327a:	1a9a      	subs	r2, r3, r2
 801327c:	eba3 0901 	sub.w	r9, r3, r1
 8013280:	4591      	cmp	r9, r2
 8013282:	bfa8      	it	ge
 8013284:	4691      	movge	r9, r2
 8013286:	f1b9 0f00 	cmp.w	r9, #0
 801328a:	dc35      	bgt.n	80132f8 <_printf_float+0x380>
 801328c:	f04f 0800 	mov.w	r8, #0
 8013290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013294:	f104 0a1a 	add.w	sl, r4, #26
 8013298:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801329c:	1a9b      	subs	r3, r3, r2
 801329e:	eba3 0309 	sub.w	r3, r3, r9
 80132a2:	4543      	cmp	r3, r8
 80132a4:	f77f af75 	ble.w	8013192 <_printf_float+0x21a>
 80132a8:	2301      	movs	r3, #1
 80132aa:	4652      	mov	r2, sl
 80132ac:	4631      	mov	r1, r6
 80132ae:	4628      	mov	r0, r5
 80132b0:	47b8      	blx	r7
 80132b2:	3001      	adds	r0, #1
 80132b4:	f43f aeae 	beq.w	8013014 <_printf_float+0x9c>
 80132b8:	f108 0801 	add.w	r8, r8, #1
 80132bc:	e7ec      	b.n	8013298 <_printf_float+0x320>
 80132be:	4613      	mov	r3, r2
 80132c0:	4631      	mov	r1, r6
 80132c2:	4642      	mov	r2, r8
 80132c4:	4628      	mov	r0, r5
 80132c6:	47b8      	blx	r7
 80132c8:	3001      	adds	r0, #1
 80132ca:	d1bf      	bne.n	801324c <_printf_float+0x2d4>
 80132cc:	e6a2      	b.n	8013014 <_printf_float+0x9c>
 80132ce:	2301      	movs	r3, #1
 80132d0:	4631      	mov	r1, r6
 80132d2:	4628      	mov	r0, r5
 80132d4:	9204      	str	r2, [sp, #16]
 80132d6:	47b8      	blx	r7
 80132d8:	3001      	adds	r0, #1
 80132da:	f43f ae9b 	beq.w	8013014 <_printf_float+0x9c>
 80132de:	9b05      	ldr	r3, [sp, #20]
 80132e0:	9a04      	ldr	r2, [sp, #16]
 80132e2:	3301      	adds	r3, #1
 80132e4:	9305      	str	r3, [sp, #20]
 80132e6:	e7b7      	b.n	8013258 <_printf_float+0x2e0>
 80132e8:	4653      	mov	r3, sl
 80132ea:	465a      	mov	r2, fp
 80132ec:	4631      	mov	r1, r6
 80132ee:	4628      	mov	r0, r5
 80132f0:	47b8      	blx	r7
 80132f2:	3001      	adds	r0, #1
 80132f4:	d1be      	bne.n	8013274 <_printf_float+0x2fc>
 80132f6:	e68d      	b.n	8013014 <_printf_float+0x9c>
 80132f8:	9a04      	ldr	r2, [sp, #16]
 80132fa:	464b      	mov	r3, r9
 80132fc:	4442      	add	r2, r8
 80132fe:	4631      	mov	r1, r6
 8013300:	4628      	mov	r0, r5
 8013302:	47b8      	blx	r7
 8013304:	3001      	adds	r0, #1
 8013306:	d1c1      	bne.n	801328c <_printf_float+0x314>
 8013308:	e684      	b.n	8013014 <_printf_float+0x9c>
 801330a:	9a08      	ldr	r2, [sp, #32]
 801330c:	2a01      	cmp	r2, #1
 801330e:	dc01      	bgt.n	8013314 <_printf_float+0x39c>
 8013310:	07db      	lsls	r3, r3, #31
 8013312:	d537      	bpl.n	8013384 <_printf_float+0x40c>
 8013314:	2301      	movs	r3, #1
 8013316:	4642      	mov	r2, r8
 8013318:	4631      	mov	r1, r6
 801331a:	4628      	mov	r0, r5
 801331c:	47b8      	blx	r7
 801331e:	3001      	adds	r0, #1
 8013320:	f43f ae78 	beq.w	8013014 <_printf_float+0x9c>
 8013324:	4653      	mov	r3, sl
 8013326:	465a      	mov	r2, fp
 8013328:	4631      	mov	r1, r6
 801332a:	4628      	mov	r0, r5
 801332c:	47b8      	blx	r7
 801332e:	3001      	adds	r0, #1
 8013330:	f43f ae70 	beq.w	8013014 <_printf_float+0x9c>
 8013334:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013338:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013340:	d01b      	beq.n	801337a <_printf_float+0x402>
 8013342:	9b08      	ldr	r3, [sp, #32]
 8013344:	f108 0201 	add.w	r2, r8, #1
 8013348:	3b01      	subs	r3, #1
 801334a:	4631      	mov	r1, r6
 801334c:	4628      	mov	r0, r5
 801334e:	47b8      	blx	r7
 8013350:	3001      	adds	r0, #1
 8013352:	d10e      	bne.n	8013372 <_printf_float+0x3fa>
 8013354:	e65e      	b.n	8013014 <_printf_float+0x9c>
 8013356:	2301      	movs	r3, #1
 8013358:	464a      	mov	r2, r9
 801335a:	4631      	mov	r1, r6
 801335c:	4628      	mov	r0, r5
 801335e:	47b8      	blx	r7
 8013360:	3001      	adds	r0, #1
 8013362:	f43f ae57 	beq.w	8013014 <_printf_float+0x9c>
 8013366:	f108 0801 	add.w	r8, r8, #1
 801336a:	9b08      	ldr	r3, [sp, #32]
 801336c:	3b01      	subs	r3, #1
 801336e:	4543      	cmp	r3, r8
 8013370:	dcf1      	bgt.n	8013356 <_printf_float+0x3de>
 8013372:	9b04      	ldr	r3, [sp, #16]
 8013374:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013378:	e6db      	b.n	8013132 <_printf_float+0x1ba>
 801337a:	f04f 0800 	mov.w	r8, #0
 801337e:	f104 091a 	add.w	r9, r4, #26
 8013382:	e7f2      	b.n	801336a <_printf_float+0x3f2>
 8013384:	2301      	movs	r3, #1
 8013386:	4642      	mov	r2, r8
 8013388:	e7df      	b.n	801334a <_printf_float+0x3d2>
 801338a:	2301      	movs	r3, #1
 801338c:	464a      	mov	r2, r9
 801338e:	4631      	mov	r1, r6
 8013390:	4628      	mov	r0, r5
 8013392:	47b8      	blx	r7
 8013394:	3001      	adds	r0, #1
 8013396:	f43f ae3d 	beq.w	8013014 <_printf_float+0x9c>
 801339a:	f108 0801 	add.w	r8, r8, #1
 801339e:	68e3      	ldr	r3, [r4, #12]
 80133a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133a2:	1a5b      	subs	r3, r3, r1
 80133a4:	4543      	cmp	r3, r8
 80133a6:	dcf0      	bgt.n	801338a <_printf_float+0x412>
 80133a8:	e6f7      	b.n	801319a <_printf_float+0x222>
 80133aa:	f04f 0800 	mov.w	r8, #0
 80133ae:	f104 0919 	add.w	r9, r4, #25
 80133b2:	e7f4      	b.n	801339e <_printf_float+0x426>

080133b4 <_printf_common>:
 80133b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133b8:	4616      	mov	r6, r2
 80133ba:	4699      	mov	r9, r3
 80133bc:	688a      	ldr	r2, [r1, #8]
 80133be:	690b      	ldr	r3, [r1, #16]
 80133c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133c4:	4293      	cmp	r3, r2
 80133c6:	bfb8      	it	lt
 80133c8:	4613      	movlt	r3, r2
 80133ca:	6033      	str	r3, [r6, #0]
 80133cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133d0:	4607      	mov	r7, r0
 80133d2:	460c      	mov	r4, r1
 80133d4:	b10a      	cbz	r2, 80133da <_printf_common+0x26>
 80133d6:	3301      	adds	r3, #1
 80133d8:	6033      	str	r3, [r6, #0]
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	0699      	lsls	r1, r3, #26
 80133de:	bf42      	ittt	mi
 80133e0:	6833      	ldrmi	r3, [r6, #0]
 80133e2:	3302      	addmi	r3, #2
 80133e4:	6033      	strmi	r3, [r6, #0]
 80133e6:	6825      	ldr	r5, [r4, #0]
 80133e8:	f015 0506 	ands.w	r5, r5, #6
 80133ec:	d106      	bne.n	80133fc <_printf_common+0x48>
 80133ee:	f104 0a19 	add.w	sl, r4, #25
 80133f2:	68e3      	ldr	r3, [r4, #12]
 80133f4:	6832      	ldr	r2, [r6, #0]
 80133f6:	1a9b      	subs	r3, r3, r2
 80133f8:	42ab      	cmp	r3, r5
 80133fa:	dc26      	bgt.n	801344a <_printf_common+0x96>
 80133fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013400:	1e13      	subs	r3, r2, #0
 8013402:	6822      	ldr	r2, [r4, #0]
 8013404:	bf18      	it	ne
 8013406:	2301      	movne	r3, #1
 8013408:	0692      	lsls	r2, r2, #26
 801340a:	d42b      	bmi.n	8013464 <_printf_common+0xb0>
 801340c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013410:	4649      	mov	r1, r9
 8013412:	4638      	mov	r0, r7
 8013414:	47c0      	blx	r8
 8013416:	3001      	adds	r0, #1
 8013418:	d01e      	beq.n	8013458 <_printf_common+0xa4>
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	68e5      	ldr	r5, [r4, #12]
 801341e:	6832      	ldr	r2, [r6, #0]
 8013420:	f003 0306 	and.w	r3, r3, #6
 8013424:	2b04      	cmp	r3, #4
 8013426:	bf08      	it	eq
 8013428:	1aad      	subeq	r5, r5, r2
 801342a:	68a3      	ldr	r3, [r4, #8]
 801342c:	6922      	ldr	r2, [r4, #16]
 801342e:	bf0c      	ite	eq
 8013430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013434:	2500      	movne	r5, #0
 8013436:	4293      	cmp	r3, r2
 8013438:	bfc4      	itt	gt
 801343a:	1a9b      	subgt	r3, r3, r2
 801343c:	18ed      	addgt	r5, r5, r3
 801343e:	2600      	movs	r6, #0
 8013440:	341a      	adds	r4, #26
 8013442:	42b5      	cmp	r5, r6
 8013444:	d11a      	bne.n	801347c <_printf_common+0xc8>
 8013446:	2000      	movs	r0, #0
 8013448:	e008      	b.n	801345c <_printf_common+0xa8>
 801344a:	2301      	movs	r3, #1
 801344c:	4652      	mov	r2, sl
 801344e:	4649      	mov	r1, r9
 8013450:	4638      	mov	r0, r7
 8013452:	47c0      	blx	r8
 8013454:	3001      	adds	r0, #1
 8013456:	d103      	bne.n	8013460 <_printf_common+0xac>
 8013458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801345c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013460:	3501      	adds	r5, #1
 8013462:	e7c6      	b.n	80133f2 <_printf_common+0x3e>
 8013464:	18e1      	adds	r1, r4, r3
 8013466:	1c5a      	adds	r2, r3, #1
 8013468:	2030      	movs	r0, #48	; 0x30
 801346a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801346e:	4422      	add	r2, r4
 8013470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013478:	3302      	adds	r3, #2
 801347a:	e7c7      	b.n	801340c <_printf_common+0x58>
 801347c:	2301      	movs	r3, #1
 801347e:	4622      	mov	r2, r4
 8013480:	4649      	mov	r1, r9
 8013482:	4638      	mov	r0, r7
 8013484:	47c0      	blx	r8
 8013486:	3001      	adds	r0, #1
 8013488:	d0e6      	beq.n	8013458 <_printf_common+0xa4>
 801348a:	3601      	adds	r6, #1
 801348c:	e7d9      	b.n	8013442 <_printf_common+0x8e>
	...

08013490 <_printf_i>:
 8013490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013494:	7e0f      	ldrb	r7, [r1, #24]
 8013496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013498:	2f78      	cmp	r7, #120	; 0x78
 801349a:	4691      	mov	r9, r2
 801349c:	4680      	mov	r8, r0
 801349e:	460c      	mov	r4, r1
 80134a0:	469a      	mov	sl, r3
 80134a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134a6:	d807      	bhi.n	80134b8 <_printf_i+0x28>
 80134a8:	2f62      	cmp	r7, #98	; 0x62
 80134aa:	d80a      	bhi.n	80134c2 <_printf_i+0x32>
 80134ac:	2f00      	cmp	r7, #0
 80134ae:	f000 80d8 	beq.w	8013662 <_printf_i+0x1d2>
 80134b2:	2f58      	cmp	r7, #88	; 0x58
 80134b4:	f000 80a3 	beq.w	80135fe <_printf_i+0x16e>
 80134b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134c0:	e03a      	b.n	8013538 <_printf_i+0xa8>
 80134c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134c6:	2b15      	cmp	r3, #21
 80134c8:	d8f6      	bhi.n	80134b8 <_printf_i+0x28>
 80134ca:	a101      	add	r1, pc, #4	; (adr r1, 80134d0 <_printf_i+0x40>)
 80134cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134d0:	08013529 	.word	0x08013529
 80134d4:	0801353d 	.word	0x0801353d
 80134d8:	080134b9 	.word	0x080134b9
 80134dc:	080134b9 	.word	0x080134b9
 80134e0:	080134b9 	.word	0x080134b9
 80134e4:	080134b9 	.word	0x080134b9
 80134e8:	0801353d 	.word	0x0801353d
 80134ec:	080134b9 	.word	0x080134b9
 80134f0:	080134b9 	.word	0x080134b9
 80134f4:	080134b9 	.word	0x080134b9
 80134f8:	080134b9 	.word	0x080134b9
 80134fc:	08013649 	.word	0x08013649
 8013500:	0801356d 	.word	0x0801356d
 8013504:	0801362b 	.word	0x0801362b
 8013508:	080134b9 	.word	0x080134b9
 801350c:	080134b9 	.word	0x080134b9
 8013510:	0801366b 	.word	0x0801366b
 8013514:	080134b9 	.word	0x080134b9
 8013518:	0801356d 	.word	0x0801356d
 801351c:	080134b9 	.word	0x080134b9
 8013520:	080134b9 	.word	0x080134b9
 8013524:	08013633 	.word	0x08013633
 8013528:	682b      	ldr	r3, [r5, #0]
 801352a:	1d1a      	adds	r2, r3, #4
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	602a      	str	r2, [r5, #0]
 8013530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013538:	2301      	movs	r3, #1
 801353a:	e0a3      	b.n	8013684 <_printf_i+0x1f4>
 801353c:	6820      	ldr	r0, [r4, #0]
 801353e:	6829      	ldr	r1, [r5, #0]
 8013540:	0606      	lsls	r6, r0, #24
 8013542:	f101 0304 	add.w	r3, r1, #4
 8013546:	d50a      	bpl.n	801355e <_printf_i+0xce>
 8013548:	680e      	ldr	r6, [r1, #0]
 801354a:	602b      	str	r3, [r5, #0]
 801354c:	2e00      	cmp	r6, #0
 801354e:	da03      	bge.n	8013558 <_printf_i+0xc8>
 8013550:	232d      	movs	r3, #45	; 0x2d
 8013552:	4276      	negs	r6, r6
 8013554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013558:	485e      	ldr	r0, [pc, #376]	; (80136d4 <_printf_i+0x244>)
 801355a:	230a      	movs	r3, #10
 801355c:	e019      	b.n	8013592 <_printf_i+0x102>
 801355e:	680e      	ldr	r6, [r1, #0]
 8013560:	602b      	str	r3, [r5, #0]
 8013562:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013566:	bf18      	it	ne
 8013568:	b236      	sxthne	r6, r6
 801356a:	e7ef      	b.n	801354c <_printf_i+0xbc>
 801356c:	682b      	ldr	r3, [r5, #0]
 801356e:	6820      	ldr	r0, [r4, #0]
 8013570:	1d19      	adds	r1, r3, #4
 8013572:	6029      	str	r1, [r5, #0]
 8013574:	0601      	lsls	r1, r0, #24
 8013576:	d501      	bpl.n	801357c <_printf_i+0xec>
 8013578:	681e      	ldr	r6, [r3, #0]
 801357a:	e002      	b.n	8013582 <_printf_i+0xf2>
 801357c:	0646      	lsls	r6, r0, #25
 801357e:	d5fb      	bpl.n	8013578 <_printf_i+0xe8>
 8013580:	881e      	ldrh	r6, [r3, #0]
 8013582:	4854      	ldr	r0, [pc, #336]	; (80136d4 <_printf_i+0x244>)
 8013584:	2f6f      	cmp	r7, #111	; 0x6f
 8013586:	bf0c      	ite	eq
 8013588:	2308      	moveq	r3, #8
 801358a:	230a      	movne	r3, #10
 801358c:	2100      	movs	r1, #0
 801358e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013592:	6865      	ldr	r5, [r4, #4]
 8013594:	60a5      	str	r5, [r4, #8]
 8013596:	2d00      	cmp	r5, #0
 8013598:	bfa2      	ittt	ge
 801359a:	6821      	ldrge	r1, [r4, #0]
 801359c:	f021 0104 	bicge.w	r1, r1, #4
 80135a0:	6021      	strge	r1, [r4, #0]
 80135a2:	b90e      	cbnz	r6, 80135a8 <_printf_i+0x118>
 80135a4:	2d00      	cmp	r5, #0
 80135a6:	d04d      	beq.n	8013644 <_printf_i+0x1b4>
 80135a8:	4615      	mov	r5, r2
 80135aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80135ae:	fb03 6711 	mls	r7, r3, r1, r6
 80135b2:	5dc7      	ldrb	r7, [r0, r7]
 80135b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80135b8:	4637      	mov	r7, r6
 80135ba:	42bb      	cmp	r3, r7
 80135bc:	460e      	mov	r6, r1
 80135be:	d9f4      	bls.n	80135aa <_printf_i+0x11a>
 80135c0:	2b08      	cmp	r3, #8
 80135c2:	d10b      	bne.n	80135dc <_printf_i+0x14c>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	07de      	lsls	r6, r3, #31
 80135c8:	d508      	bpl.n	80135dc <_printf_i+0x14c>
 80135ca:	6923      	ldr	r3, [r4, #16]
 80135cc:	6861      	ldr	r1, [r4, #4]
 80135ce:	4299      	cmp	r1, r3
 80135d0:	bfde      	ittt	le
 80135d2:	2330      	movle	r3, #48	; 0x30
 80135d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80135dc:	1b52      	subs	r2, r2, r5
 80135de:	6122      	str	r2, [r4, #16]
 80135e0:	f8cd a000 	str.w	sl, [sp]
 80135e4:	464b      	mov	r3, r9
 80135e6:	aa03      	add	r2, sp, #12
 80135e8:	4621      	mov	r1, r4
 80135ea:	4640      	mov	r0, r8
 80135ec:	f7ff fee2 	bl	80133b4 <_printf_common>
 80135f0:	3001      	adds	r0, #1
 80135f2:	d14c      	bne.n	801368e <_printf_i+0x1fe>
 80135f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135f8:	b004      	add	sp, #16
 80135fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135fe:	4835      	ldr	r0, [pc, #212]	; (80136d4 <_printf_i+0x244>)
 8013600:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013604:	6829      	ldr	r1, [r5, #0]
 8013606:	6823      	ldr	r3, [r4, #0]
 8013608:	f851 6b04 	ldr.w	r6, [r1], #4
 801360c:	6029      	str	r1, [r5, #0]
 801360e:	061d      	lsls	r5, r3, #24
 8013610:	d514      	bpl.n	801363c <_printf_i+0x1ac>
 8013612:	07df      	lsls	r7, r3, #31
 8013614:	bf44      	itt	mi
 8013616:	f043 0320 	orrmi.w	r3, r3, #32
 801361a:	6023      	strmi	r3, [r4, #0]
 801361c:	b91e      	cbnz	r6, 8013626 <_printf_i+0x196>
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	f023 0320 	bic.w	r3, r3, #32
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	2310      	movs	r3, #16
 8013628:	e7b0      	b.n	801358c <_printf_i+0xfc>
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	f043 0320 	orr.w	r3, r3, #32
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	2378      	movs	r3, #120	; 0x78
 8013634:	4828      	ldr	r0, [pc, #160]	; (80136d8 <_printf_i+0x248>)
 8013636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801363a:	e7e3      	b.n	8013604 <_printf_i+0x174>
 801363c:	0659      	lsls	r1, r3, #25
 801363e:	bf48      	it	mi
 8013640:	b2b6      	uxthmi	r6, r6
 8013642:	e7e6      	b.n	8013612 <_printf_i+0x182>
 8013644:	4615      	mov	r5, r2
 8013646:	e7bb      	b.n	80135c0 <_printf_i+0x130>
 8013648:	682b      	ldr	r3, [r5, #0]
 801364a:	6826      	ldr	r6, [r4, #0]
 801364c:	6961      	ldr	r1, [r4, #20]
 801364e:	1d18      	adds	r0, r3, #4
 8013650:	6028      	str	r0, [r5, #0]
 8013652:	0635      	lsls	r5, r6, #24
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	d501      	bpl.n	801365c <_printf_i+0x1cc>
 8013658:	6019      	str	r1, [r3, #0]
 801365a:	e002      	b.n	8013662 <_printf_i+0x1d2>
 801365c:	0670      	lsls	r0, r6, #25
 801365e:	d5fb      	bpl.n	8013658 <_printf_i+0x1c8>
 8013660:	8019      	strh	r1, [r3, #0]
 8013662:	2300      	movs	r3, #0
 8013664:	6123      	str	r3, [r4, #16]
 8013666:	4615      	mov	r5, r2
 8013668:	e7ba      	b.n	80135e0 <_printf_i+0x150>
 801366a:	682b      	ldr	r3, [r5, #0]
 801366c:	1d1a      	adds	r2, r3, #4
 801366e:	602a      	str	r2, [r5, #0]
 8013670:	681d      	ldr	r5, [r3, #0]
 8013672:	6862      	ldr	r2, [r4, #4]
 8013674:	2100      	movs	r1, #0
 8013676:	4628      	mov	r0, r5
 8013678:	f7ec fe42 	bl	8000300 <memchr>
 801367c:	b108      	cbz	r0, 8013682 <_printf_i+0x1f2>
 801367e:	1b40      	subs	r0, r0, r5
 8013680:	6060      	str	r0, [r4, #4]
 8013682:	6863      	ldr	r3, [r4, #4]
 8013684:	6123      	str	r3, [r4, #16]
 8013686:	2300      	movs	r3, #0
 8013688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801368c:	e7a8      	b.n	80135e0 <_printf_i+0x150>
 801368e:	6923      	ldr	r3, [r4, #16]
 8013690:	462a      	mov	r2, r5
 8013692:	4649      	mov	r1, r9
 8013694:	4640      	mov	r0, r8
 8013696:	47d0      	blx	sl
 8013698:	3001      	adds	r0, #1
 801369a:	d0ab      	beq.n	80135f4 <_printf_i+0x164>
 801369c:	6823      	ldr	r3, [r4, #0]
 801369e:	079b      	lsls	r3, r3, #30
 80136a0:	d413      	bmi.n	80136ca <_printf_i+0x23a>
 80136a2:	68e0      	ldr	r0, [r4, #12]
 80136a4:	9b03      	ldr	r3, [sp, #12]
 80136a6:	4298      	cmp	r0, r3
 80136a8:	bfb8      	it	lt
 80136aa:	4618      	movlt	r0, r3
 80136ac:	e7a4      	b.n	80135f8 <_printf_i+0x168>
 80136ae:	2301      	movs	r3, #1
 80136b0:	4632      	mov	r2, r6
 80136b2:	4649      	mov	r1, r9
 80136b4:	4640      	mov	r0, r8
 80136b6:	47d0      	blx	sl
 80136b8:	3001      	adds	r0, #1
 80136ba:	d09b      	beq.n	80135f4 <_printf_i+0x164>
 80136bc:	3501      	adds	r5, #1
 80136be:	68e3      	ldr	r3, [r4, #12]
 80136c0:	9903      	ldr	r1, [sp, #12]
 80136c2:	1a5b      	subs	r3, r3, r1
 80136c4:	42ab      	cmp	r3, r5
 80136c6:	dcf2      	bgt.n	80136ae <_printf_i+0x21e>
 80136c8:	e7eb      	b.n	80136a2 <_printf_i+0x212>
 80136ca:	2500      	movs	r5, #0
 80136cc:	f104 0619 	add.w	r6, r4, #25
 80136d0:	e7f5      	b.n	80136be <_printf_i+0x22e>
 80136d2:	bf00      	nop
 80136d4:	0801789e 	.word	0x0801789e
 80136d8:	080178af 	.word	0x080178af

080136dc <_scanf_float>:
 80136dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e0:	b087      	sub	sp, #28
 80136e2:	4617      	mov	r7, r2
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	688b      	ldr	r3, [r1, #8]
 80136e8:	1e5a      	subs	r2, r3, #1
 80136ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80136ee:	bf83      	ittte	hi
 80136f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80136f4:	195b      	addhi	r3, r3, r5
 80136f6:	9302      	strhi	r3, [sp, #8]
 80136f8:	2300      	movls	r3, #0
 80136fa:	bf86      	itte	hi
 80136fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013700:	608b      	strhi	r3, [r1, #8]
 8013702:	9302      	strls	r3, [sp, #8]
 8013704:	680b      	ldr	r3, [r1, #0]
 8013706:	468b      	mov	fp, r1
 8013708:	2500      	movs	r5, #0
 801370a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801370e:	f84b 3b1c 	str.w	r3, [fp], #28
 8013712:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013716:	4680      	mov	r8, r0
 8013718:	460c      	mov	r4, r1
 801371a:	465e      	mov	r6, fp
 801371c:	46aa      	mov	sl, r5
 801371e:	46a9      	mov	r9, r5
 8013720:	9501      	str	r5, [sp, #4]
 8013722:	68a2      	ldr	r2, [r4, #8]
 8013724:	b152      	cbz	r2, 801373c <_scanf_float+0x60>
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	2b4e      	cmp	r3, #78	; 0x4e
 801372c:	d864      	bhi.n	80137f8 <_scanf_float+0x11c>
 801372e:	2b40      	cmp	r3, #64	; 0x40
 8013730:	d83c      	bhi.n	80137ac <_scanf_float+0xd0>
 8013732:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013736:	b2c8      	uxtb	r0, r1
 8013738:	280e      	cmp	r0, #14
 801373a:	d93a      	bls.n	80137b2 <_scanf_float+0xd6>
 801373c:	f1b9 0f00 	cmp.w	r9, #0
 8013740:	d003      	beq.n	801374a <_scanf_float+0x6e>
 8013742:	6823      	ldr	r3, [r4, #0]
 8013744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013748:	6023      	str	r3, [r4, #0]
 801374a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801374e:	f1ba 0f01 	cmp.w	sl, #1
 8013752:	f200 8113 	bhi.w	801397c <_scanf_float+0x2a0>
 8013756:	455e      	cmp	r6, fp
 8013758:	f200 8105 	bhi.w	8013966 <_scanf_float+0x28a>
 801375c:	2501      	movs	r5, #1
 801375e:	4628      	mov	r0, r5
 8013760:	b007      	add	sp, #28
 8013762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013766:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801376a:	2a0d      	cmp	r2, #13
 801376c:	d8e6      	bhi.n	801373c <_scanf_float+0x60>
 801376e:	a101      	add	r1, pc, #4	; (adr r1, 8013774 <_scanf_float+0x98>)
 8013770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013774:	080138b3 	.word	0x080138b3
 8013778:	0801373d 	.word	0x0801373d
 801377c:	0801373d 	.word	0x0801373d
 8013780:	0801373d 	.word	0x0801373d
 8013784:	08013913 	.word	0x08013913
 8013788:	080138eb 	.word	0x080138eb
 801378c:	0801373d 	.word	0x0801373d
 8013790:	0801373d 	.word	0x0801373d
 8013794:	080138c1 	.word	0x080138c1
 8013798:	0801373d 	.word	0x0801373d
 801379c:	0801373d 	.word	0x0801373d
 80137a0:	0801373d 	.word	0x0801373d
 80137a4:	0801373d 	.word	0x0801373d
 80137a8:	08013879 	.word	0x08013879
 80137ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80137b0:	e7db      	b.n	801376a <_scanf_float+0x8e>
 80137b2:	290e      	cmp	r1, #14
 80137b4:	d8c2      	bhi.n	801373c <_scanf_float+0x60>
 80137b6:	a001      	add	r0, pc, #4	; (adr r0, 80137bc <_scanf_float+0xe0>)
 80137b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80137bc:	0801386b 	.word	0x0801386b
 80137c0:	0801373d 	.word	0x0801373d
 80137c4:	0801386b 	.word	0x0801386b
 80137c8:	080138ff 	.word	0x080138ff
 80137cc:	0801373d 	.word	0x0801373d
 80137d0:	08013819 	.word	0x08013819
 80137d4:	08013855 	.word	0x08013855
 80137d8:	08013855 	.word	0x08013855
 80137dc:	08013855 	.word	0x08013855
 80137e0:	08013855 	.word	0x08013855
 80137e4:	08013855 	.word	0x08013855
 80137e8:	08013855 	.word	0x08013855
 80137ec:	08013855 	.word	0x08013855
 80137f0:	08013855 	.word	0x08013855
 80137f4:	08013855 	.word	0x08013855
 80137f8:	2b6e      	cmp	r3, #110	; 0x6e
 80137fa:	d809      	bhi.n	8013810 <_scanf_float+0x134>
 80137fc:	2b60      	cmp	r3, #96	; 0x60
 80137fe:	d8b2      	bhi.n	8013766 <_scanf_float+0x8a>
 8013800:	2b54      	cmp	r3, #84	; 0x54
 8013802:	d077      	beq.n	80138f4 <_scanf_float+0x218>
 8013804:	2b59      	cmp	r3, #89	; 0x59
 8013806:	d199      	bne.n	801373c <_scanf_float+0x60>
 8013808:	2d07      	cmp	r5, #7
 801380a:	d197      	bne.n	801373c <_scanf_float+0x60>
 801380c:	2508      	movs	r5, #8
 801380e:	e029      	b.n	8013864 <_scanf_float+0x188>
 8013810:	2b74      	cmp	r3, #116	; 0x74
 8013812:	d06f      	beq.n	80138f4 <_scanf_float+0x218>
 8013814:	2b79      	cmp	r3, #121	; 0x79
 8013816:	e7f6      	b.n	8013806 <_scanf_float+0x12a>
 8013818:	6821      	ldr	r1, [r4, #0]
 801381a:	05c8      	lsls	r0, r1, #23
 801381c:	d51a      	bpl.n	8013854 <_scanf_float+0x178>
 801381e:	9b02      	ldr	r3, [sp, #8]
 8013820:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013824:	6021      	str	r1, [r4, #0]
 8013826:	f109 0901 	add.w	r9, r9, #1
 801382a:	b11b      	cbz	r3, 8013834 <_scanf_float+0x158>
 801382c:	3b01      	subs	r3, #1
 801382e:	3201      	adds	r2, #1
 8013830:	9302      	str	r3, [sp, #8]
 8013832:	60a2      	str	r2, [r4, #8]
 8013834:	68a3      	ldr	r3, [r4, #8]
 8013836:	3b01      	subs	r3, #1
 8013838:	60a3      	str	r3, [r4, #8]
 801383a:	6923      	ldr	r3, [r4, #16]
 801383c:	3301      	adds	r3, #1
 801383e:	6123      	str	r3, [r4, #16]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	3b01      	subs	r3, #1
 8013844:	2b00      	cmp	r3, #0
 8013846:	607b      	str	r3, [r7, #4]
 8013848:	f340 8084 	ble.w	8013954 <_scanf_float+0x278>
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	3301      	adds	r3, #1
 8013850:	603b      	str	r3, [r7, #0]
 8013852:	e766      	b.n	8013722 <_scanf_float+0x46>
 8013854:	eb1a 0f05 	cmn.w	sl, r5
 8013858:	f47f af70 	bne.w	801373c <_scanf_float+0x60>
 801385c:	6822      	ldr	r2, [r4, #0]
 801385e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013862:	6022      	str	r2, [r4, #0]
 8013864:	f806 3b01 	strb.w	r3, [r6], #1
 8013868:	e7e4      	b.n	8013834 <_scanf_float+0x158>
 801386a:	6822      	ldr	r2, [r4, #0]
 801386c:	0610      	lsls	r0, r2, #24
 801386e:	f57f af65 	bpl.w	801373c <_scanf_float+0x60>
 8013872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013876:	e7f4      	b.n	8013862 <_scanf_float+0x186>
 8013878:	f1ba 0f00 	cmp.w	sl, #0
 801387c:	d10e      	bne.n	801389c <_scanf_float+0x1c0>
 801387e:	f1b9 0f00 	cmp.w	r9, #0
 8013882:	d10e      	bne.n	80138a2 <_scanf_float+0x1c6>
 8013884:	6822      	ldr	r2, [r4, #0]
 8013886:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801388a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801388e:	d108      	bne.n	80138a2 <_scanf_float+0x1c6>
 8013890:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013894:	6022      	str	r2, [r4, #0]
 8013896:	f04f 0a01 	mov.w	sl, #1
 801389a:	e7e3      	b.n	8013864 <_scanf_float+0x188>
 801389c:	f1ba 0f02 	cmp.w	sl, #2
 80138a0:	d055      	beq.n	801394e <_scanf_float+0x272>
 80138a2:	2d01      	cmp	r5, #1
 80138a4:	d002      	beq.n	80138ac <_scanf_float+0x1d0>
 80138a6:	2d04      	cmp	r5, #4
 80138a8:	f47f af48 	bne.w	801373c <_scanf_float+0x60>
 80138ac:	3501      	adds	r5, #1
 80138ae:	b2ed      	uxtb	r5, r5
 80138b0:	e7d8      	b.n	8013864 <_scanf_float+0x188>
 80138b2:	f1ba 0f01 	cmp.w	sl, #1
 80138b6:	f47f af41 	bne.w	801373c <_scanf_float+0x60>
 80138ba:	f04f 0a02 	mov.w	sl, #2
 80138be:	e7d1      	b.n	8013864 <_scanf_float+0x188>
 80138c0:	b97d      	cbnz	r5, 80138e2 <_scanf_float+0x206>
 80138c2:	f1b9 0f00 	cmp.w	r9, #0
 80138c6:	f47f af3c 	bne.w	8013742 <_scanf_float+0x66>
 80138ca:	6822      	ldr	r2, [r4, #0]
 80138cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80138d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80138d4:	f47f af39 	bne.w	801374a <_scanf_float+0x6e>
 80138d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80138dc:	6022      	str	r2, [r4, #0]
 80138de:	2501      	movs	r5, #1
 80138e0:	e7c0      	b.n	8013864 <_scanf_float+0x188>
 80138e2:	2d03      	cmp	r5, #3
 80138e4:	d0e2      	beq.n	80138ac <_scanf_float+0x1d0>
 80138e6:	2d05      	cmp	r5, #5
 80138e8:	e7de      	b.n	80138a8 <_scanf_float+0x1cc>
 80138ea:	2d02      	cmp	r5, #2
 80138ec:	f47f af26 	bne.w	801373c <_scanf_float+0x60>
 80138f0:	2503      	movs	r5, #3
 80138f2:	e7b7      	b.n	8013864 <_scanf_float+0x188>
 80138f4:	2d06      	cmp	r5, #6
 80138f6:	f47f af21 	bne.w	801373c <_scanf_float+0x60>
 80138fa:	2507      	movs	r5, #7
 80138fc:	e7b2      	b.n	8013864 <_scanf_float+0x188>
 80138fe:	6822      	ldr	r2, [r4, #0]
 8013900:	0591      	lsls	r1, r2, #22
 8013902:	f57f af1b 	bpl.w	801373c <_scanf_float+0x60>
 8013906:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801390a:	6022      	str	r2, [r4, #0]
 801390c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013910:	e7a8      	b.n	8013864 <_scanf_float+0x188>
 8013912:	6822      	ldr	r2, [r4, #0]
 8013914:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013918:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801391c:	d006      	beq.n	801392c <_scanf_float+0x250>
 801391e:	0550      	lsls	r0, r2, #21
 8013920:	f57f af0c 	bpl.w	801373c <_scanf_float+0x60>
 8013924:	f1b9 0f00 	cmp.w	r9, #0
 8013928:	f43f af0f 	beq.w	801374a <_scanf_float+0x6e>
 801392c:	0591      	lsls	r1, r2, #22
 801392e:	bf58      	it	pl
 8013930:	9901      	ldrpl	r1, [sp, #4]
 8013932:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013936:	bf58      	it	pl
 8013938:	eba9 0101 	subpl.w	r1, r9, r1
 801393c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013940:	bf58      	it	pl
 8013942:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013946:	6022      	str	r2, [r4, #0]
 8013948:	f04f 0900 	mov.w	r9, #0
 801394c:	e78a      	b.n	8013864 <_scanf_float+0x188>
 801394e:	f04f 0a03 	mov.w	sl, #3
 8013952:	e787      	b.n	8013864 <_scanf_float+0x188>
 8013954:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013958:	4639      	mov	r1, r7
 801395a:	4640      	mov	r0, r8
 801395c:	4798      	blx	r3
 801395e:	2800      	cmp	r0, #0
 8013960:	f43f aedf 	beq.w	8013722 <_scanf_float+0x46>
 8013964:	e6ea      	b.n	801373c <_scanf_float+0x60>
 8013966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801396a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801396e:	463a      	mov	r2, r7
 8013970:	4640      	mov	r0, r8
 8013972:	4798      	blx	r3
 8013974:	6923      	ldr	r3, [r4, #16]
 8013976:	3b01      	subs	r3, #1
 8013978:	6123      	str	r3, [r4, #16]
 801397a:	e6ec      	b.n	8013756 <_scanf_float+0x7a>
 801397c:	1e6b      	subs	r3, r5, #1
 801397e:	2b06      	cmp	r3, #6
 8013980:	d825      	bhi.n	80139ce <_scanf_float+0x2f2>
 8013982:	2d02      	cmp	r5, #2
 8013984:	d836      	bhi.n	80139f4 <_scanf_float+0x318>
 8013986:	455e      	cmp	r6, fp
 8013988:	f67f aee8 	bls.w	801375c <_scanf_float+0x80>
 801398c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013990:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013994:	463a      	mov	r2, r7
 8013996:	4640      	mov	r0, r8
 8013998:	4798      	blx	r3
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	3b01      	subs	r3, #1
 801399e:	6123      	str	r3, [r4, #16]
 80139a0:	e7f1      	b.n	8013986 <_scanf_float+0x2aa>
 80139a2:	9802      	ldr	r0, [sp, #8]
 80139a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80139ac:	9002      	str	r0, [sp, #8]
 80139ae:	463a      	mov	r2, r7
 80139b0:	4640      	mov	r0, r8
 80139b2:	4798      	blx	r3
 80139b4:	6923      	ldr	r3, [r4, #16]
 80139b6:	3b01      	subs	r3, #1
 80139b8:	6123      	str	r3, [r4, #16]
 80139ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80139be:	fa5f fa8a 	uxtb.w	sl, sl
 80139c2:	f1ba 0f02 	cmp.w	sl, #2
 80139c6:	d1ec      	bne.n	80139a2 <_scanf_float+0x2c6>
 80139c8:	3d03      	subs	r5, #3
 80139ca:	b2ed      	uxtb	r5, r5
 80139cc:	1b76      	subs	r6, r6, r5
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	05da      	lsls	r2, r3, #23
 80139d2:	d52f      	bpl.n	8013a34 <_scanf_float+0x358>
 80139d4:	055b      	lsls	r3, r3, #21
 80139d6:	d510      	bpl.n	80139fa <_scanf_float+0x31e>
 80139d8:	455e      	cmp	r6, fp
 80139da:	f67f aebf 	bls.w	801375c <_scanf_float+0x80>
 80139de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80139e6:	463a      	mov	r2, r7
 80139e8:	4640      	mov	r0, r8
 80139ea:	4798      	blx	r3
 80139ec:	6923      	ldr	r3, [r4, #16]
 80139ee:	3b01      	subs	r3, #1
 80139f0:	6123      	str	r3, [r4, #16]
 80139f2:	e7f1      	b.n	80139d8 <_scanf_float+0x2fc>
 80139f4:	46aa      	mov	sl, r5
 80139f6:	9602      	str	r6, [sp, #8]
 80139f8:	e7df      	b.n	80139ba <_scanf_float+0x2de>
 80139fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80139fe:	6923      	ldr	r3, [r4, #16]
 8013a00:	2965      	cmp	r1, #101	; 0x65
 8013a02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013a06:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8013a0a:	6123      	str	r3, [r4, #16]
 8013a0c:	d00c      	beq.n	8013a28 <_scanf_float+0x34c>
 8013a0e:	2945      	cmp	r1, #69	; 0x45
 8013a10:	d00a      	beq.n	8013a28 <_scanf_float+0x34c>
 8013a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a16:	463a      	mov	r2, r7
 8013a18:	4640      	mov	r0, r8
 8013a1a:	4798      	blx	r3
 8013a1c:	6923      	ldr	r3, [r4, #16]
 8013a1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013a22:	3b01      	subs	r3, #1
 8013a24:	1eb5      	subs	r5, r6, #2
 8013a26:	6123      	str	r3, [r4, #16]
 8013a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a2c:	463a      	mov	r2, r7
 8013a2e:	4640      	mov	r0, r8
 8013a30:	4798      	blx	r3
 8013a32:	462e      	mov	r6, r5
 8013a34:	6825      	ldr	r5, [r4, #0]
 8013a36:	f015 0510 	ands.w	r5, r5, #16
 8013a3a:	d14e      	bne.n	8013ada <_scanf_float+0x3fe>
 8013a3c:	7035      	strb	r5, [r6, #0]
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a48:	d119      	bne.n	8013a7e <_scanf_float+0x3a2>
 8013a4a:	9b01      	ldr	r3, [sp, #4]
 8013a4c:	454b      	cmp	r3, r9
 8013a4e:	eba3 0209 	sub.w	r2, r3, r9
 8013a52:	d121      	bne.n	8013a98 <_scanf_float+0x3bc>
 8013a54:	2200      	movs	r2, #0
 8013a56:	4659      	mov	r1, fp
 8013a58:	4640      	mov	r0, r8
 8013a5a:	f000 fe6f 	bl	801473c <_strtod_r>
 8013a5e:	6822      	ldr	r2, [r4, #0]
 8013a60:	9b03      	ldr	r3, [sp, #12]
 8013a62:	f012 0f02 	tst.w	r2, #2
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	d021      	beq.n	8013aae <_scanf_float+0x3d2>
 8013a6a:	9903      	ldr	r1, [sp, #12]
 8013a6c:	1d1a      	adds	r2, r3, #4
 8013a6e:	600a      	str	r2, [r1, #0]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	ed83 0b00 	vstr	d0, [r3]
 8013a76:	68e3      	ldr	r3, [r4, #12]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	60e3      	str	r3, [r4, #12]
 8013a7c:	e66f      	b.n	801375e <_scanf_float+0x82>
 8013a7e:	9b04      	ldr	r3, [sp, #16]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d0e7      	beq.n	8013a54 <_scanf_float+0x378>
 8013a84:	9905      	ldr	r1, [sp, #20]
 8013a86:	230a      	movs	r3, #10
 8013a88:	462a      	mov	r2, r5
 8013a8a:	3101      	adds	r1, #1
 8013a8c:	4640      	mov	r0, r8
 8013a8e:	f000 fedd 	bl	801484c <_strtol_r>
 8013a92:	9b04      	ldr	r3, [sp, #16]
 8013a94:	9e05      	ldr	r6, [sp, #20]
 8013a96:	1ac2      	subs	r2, r0, r3
 8013a98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013a9c:	429e      	cmp	r6, r3
 8013a9e:	bf28      	it	cs
 8013aa0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013aa4:	490e      	ldr	r1, [pc, #56]	; (8013ae0 <_scanf_float+0x404>)
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f000 f858 	bl	8013b5c <siprintf>
 8013aac:	e7d2      	b.n	8013a54 <_scanf_float+0x378>
 8013aae:	9903      	ldr	r1, [sp, #12]
 8013ab0:	f012 0f04 	tst.w	r2, #4
 8013ab4:	f103 0204 	add.w	r2, r3, #4
 8013ab8:	600a      	str	r2, [r1, #0]
 8013aba:	d1d9      	bne.n	8013a70 <_scanf_float+0x394>
 8013abc:	eeb4 0b40 	vcmp.f64	d0, d0
 8013ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac4:	681e      	ldr	r6, [r3, #0]
 8013ac6:	d705      	bvc.n	8013ad4 <_scanf_float+0x3f8>
 8013ac8:	4806      	ldr	r0, [pc, #24]	; (8013ae4 <_scanf_float+0x408>)
 8013aca:	f000 f80d 	bl	8013ae8 <nanf>
 8013ace:	ed86 0a00 	vstr	s0, [r6]
 8013ad2:	e7d0      	b.n	8013a76 <_scanf_float+0x39a>
 8013ad4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013ad8:	e7f9      	b.n	8013ace <_scanf_float+0x3f2>
 8013ada:	2500      	movs	r5, #0
 8013adc:	e63f      	b.n	801375e <_scanf_float+0x82>
 8013ade:	bf00      	nop
 8013ae0:	080178c0 	.word	0x080178c0
 8013ae4:	08017cc8 	.word	0x08017cc8

08013ae8 <nanf>:
 8013ae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013af0 <nanf+0x8>
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	7fc00000 	.word	0x7fc00000

08013af4 <sniprintf>:
 8013af4:	b40c      	push	{r2, r3}
 8013af6:	b530      	push	{r4, r5, lr}
 8013af8:	4b17      	ldr	r3, [pc, #92]	; (8013b58 <sniprintf+0x64>)
 8013afa:	1e0c      	subs	r4, r1, #0
 8013afc:	681d      	ldr	r5, [r3, #0]
 8013afe:	b09d      	sub	sp, #116	; 0x74
 8013b00:	da08      	bge.n	8013b14 <sniprintf+0x20>
 8013b02:	238b      	movs	r3, #139	; 0x8b
 8013b04:	602b      	str	r3, [r5, #0]
 8013b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b0a:	b01d      	add	sp, #116	; 0x74
 8013b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b10:	b002      	add	sp, #8
 8013b12:	4770      	bx	lr
 8013b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b1c:	bf14      	ite	ne
 8013b1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013b22:	4623      	moveq	r3, r4
 8013b24:	9304      	str	r3, [sp, #16]
 8013b26:	9307      	str	r3, [sp, #28]
 8013b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b2c:	9002      	str	r0, [sp, #8]
 8013b2e:	9006      	str	r0, [sp, #24]
 8013b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013b36:	ab21      	add	r3, sp, #132	; 0x84
 8013b38:	a902      	add	r1, sp, #8
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	9301      	str	r3, [sp, #4]
 8013b3e:	f002 fe1f 	bl	8016780 <_svfiprintf_r>
 8013b42:	1c43      	adds	r3, r0, #1
 8013b44:	bfbc      	itt	lt
 8013b46:	238b      	movlt	r3, #139	; 0x8b
 8013b48:	602b      	strlt	r3, [r5, #0]
 8013b4a:	2c00      	cmp	r4, #0
 8013b4c:	d0dd      	beq.n	8013b0a <sniprintf+0x16>
 8013b4e:	9b02      	ldr	r3, [sp, #8]
 8013b50:	2200      	movs	r2, #0
 8013b52:	701a      	strb	r2, [r3, #0]
 8013b54:	e7d9      	b.n	8013b0a <sniprintf+0x16>
 8013b56:	bf00      	nop
 8013b58:	24000028 	.word	0x24000028

08013b5c <siprintf>:
 8013b5c:	b40e      	push	{r1, r2, r3}
 8013b5e:	b500      	push	{lr}
 8013b60:	b09c      	sub	sp, #112	; 0x70
 8013b62:	ab1d      	add	r3, sp, #116	; 0x74
 8013b64:	9002      	str	r0, [sp, #8]
 8013b66:	9006      	str	r0, [sp, #24]
 8013b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b6c:	4809      	ldr	r0, [pc, #36]	; (8013b94 <siprintf+0x38>)
 8013b6e:	9107      	str	r1, [sp, #28]
 8013b70:	9104      	str	r1, [sp, #16]
 8013b72:	4909      	ldr	r1, [pc, #36]	; (8013b98 <siprintf+0x3c>)
 8013b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b78:	9105      	str	r1, [sp, #20]
 8013b7a:	6800      	ldr	r0, [r0, #0]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	a902      	add	r1, sp, #8
 8013b80:	f002 fdfe 	bl	8016780 <_svfiprintf_r>
 8013b84:	9b02      	ldr	r3, [sp, #8]
 8013b86:	2200      	movs	r2, #0
 8013b88:	701a      	strb	r2, [r3, #0]
 8013b8a:	b01c      	add	sp, #112	; 0x70
 8013b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b90:	b003      	add	sp, #12
 8013b92:	4770      	bx	lr
 8013b94:	24000028 	.word	0x24000028
 8013b98:	ffff0208 	.word	0xffff0208

08013b9c <sulp>:
 8013b9c:	b570      	push	{r4, r5, r6, lr}
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	460d      	mov	r5, r1
 8013ba2:	4616      	mov	r6, r2
 8013ba4:	ec45 4b10 	vmov	d0, r4, r5
 8013ba8:	f002 fb4c 	bl	8016244 <__ulp>
 8013bac:	b17e      	cbz	r6, 8013bce <sulp+0x32>
 8013bae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013bb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	dd09      	ble.n	8013bce <sulp+0x32>
 8013bba:	051b      	lsls	r3, r3, #20
 8013bbc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013bc6:	ec41 0b17 	vmov	d7, r0, r1
 8013bca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013bce:	bd70      	pop	{r4, r5, r6, pc}

08013bd0 <_strtod_l>:
 8013bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	ed2d 8b0e 	vpush	{d8-d14}
 8013bd8:	b097      	sub	sp, #92	; 0x5c
 8013bda:	461f      	mov	r7, r3
 8013bdc:	2300      	movs	r3, #0
 8013bde:	9312      	str	r3, [sp, #72]	; 0x48
 8013be0:	4ba1      	ldr	r3, [pc, #644]	; (8013e68 <_strtod_l+0x298>)
 8013be2:	920d      	str	r2, [sp, #52]	; 0x34
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	9307      	str	r3, [sp, #28]
 8013be8:	4604      	mov	r4, r0
 8013bea:	4618      	mov	r0, r3
 8013bec:	468b      	mov	fp, r1
 8013bee:	f7ec fb7f 	bl	80002f0 <strlen>
 8013bf2:	f04f 0800 	mov.w	r8, #0
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	f04f 0900 	mov.w	r9, #0
 8013bfc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013c02:	7813      	ldrb	r3, [r2, #0]
 8013c04:	2b2b      	cmp	r3, #43	; 0x2b
 8013c06:	d04d      	beq.n	8013ca4 <_strtod_l+0xd4>
 8013c08:	d83a      	bhi.n	8013c80 <_strtod_l+0xb0>
 8013c0a:	2b0d      	cmp	r3, #13
 8013c0c:	d833      	bhi.n	8013c76 <_strtod_l+0xa6>
 8013c0e:	2b08      	cmp	r3, #8
 8013c10:	d833      	bhi.n	8013c7a <_strtod_l+0xaa>
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d03d      	beq.n	8013c92 <_strtod_l+0xc2>
 8013c16:	2300      	movs	r3, #0
 8013c18:	9308      	str	r3, [sp, #32]
 8013c1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013c1c:	7833      	ldrb	r3, [r6, #0]
 8013c1e:	2b30      	cmp	r3, #48	; 0x30
 8013c20:	f040 80b0 	bne.w	8013d84 <_strtod_l+0x1b4>
 8013c24:	7873      	ldrb	r3, [r6, #1]
 8013c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c2a:	2b58      	cmp	r3, #88	; 0x58
 8013c2c:	d167      	bne.n	8013cfe <_strtod_l+0x12e>
 8013c2e:	9b08      	ldr	r3, [sp, #32]
 8013c30:	9301      	str	r3, [sp, #4]
 8013c32:	ab12      	add	r3, sp, #72	; 0x48
 8013c34:	9702      	str	r7, [sp, #8]
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	4a8c      	ldr	r2, [pc, #560]	; (8013e6c <_strtod_l+0x29c>)
 8013c3a:	ab13      	add	r3, sp, #76	; 0x4c
 8013c3c:	a911      	add	r1, sp, #68	; 0x44
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f001 fc68 	bl	8015514 <__gethex>
 8013c44:	f010 0507 	ands.w	r5, r0, #7
 8013c48:	4607      	mov	r7, r0
 8013c4a:	d005      	beq.n	8013c58 <_strtod_l+0x88>
 8013c4c:	2d06      	cmp	r5, #6
 8013c4e:	d12b      	bne.n	8013ca8 <_strtod_l+0xd8>
 8013c50:	3601      	adds	r6, #1
 8013c52:	2300      	movs	r3, #0
 8013c54:	9611      	str	r6, [sp, #68]	; 0x44
 8013c56:	9308      	str	r3, [sp, #32]
 8013c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f040 854e 	bne.w	80146fc <_strtod_l+0xb2c>
 8013c60:	9b08      	ldr	r3, [sp, #32]
 8013c62:	b1e3      	cbz	r3, 8013c9e <_strtod_l+0xce>
 8013c64:	ec49 8b17 	vmov	d7, r8, r9
 8013c68:	eeb1 0b47 	vneg.f64	d0, d7
 8013c6c:	b017      	add	sp, #92	; 0x5c
 8013c6e:	ecbd 8b0e 	vpop	{d8-d14}
 8013c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c76:	2b20      	cmp	r3, #32
 8013c78:	d1cd      	bne.n	8013c16 <_strtod_l+0x46>
 8013c7a:	3201      	adds	r2, #1
 8013c7c:	9211      	str	r2, [sp, #68]	; 0x44
 8013c7e:	e7bf      	b.n	8013c00 <_strtod_l+0x30>
 8013c80:	2b2d      	cmp	r3, #45	; 0x2d
 8013c82:	d1c8      	bne.n	8013c16 <_strtod_l+0x46>
 8013c84:	2301      	movs	r3, #1
 8013c86:	9308      	str	r3, [sp, #32]
 8013c88:	1c53      	adds	r3, r2, #1
 8013c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8013c8c:	7853      	ldrb	r3, [r2, #1]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d1c3      	bne.n	8013c1a <_strtod_l+0x4a>
 8013c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f040 852d 	bne.w	80146f8 <_strtod_l+0xb28>
 8013c9e:	ec49 8b10 	vmov	d0, r8, r9
 8013ca2:	e7e3      	b.n	8013c6c <_strtod_l+0x9c>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	e7ee      	b.n	8013c86 <_strtod_l+0xb6>
 8013ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013caa:	b13a      	cbz	r2, 8013cbc <_strtod_l+0xec>
 8013cac:	2135      	movs	r1, #53	; 0x35
 8013cae:	a814      	add	r0, sp, #80	; 0x50
 8013cb0:	f002 fbd0 	bl	8016454 <__copybits>
 8013cb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f001 ff92 	bl	8015be0 <_Bfree>
 8013cbc:	3d01      	subs	r5, #1
 8013cbe:	2d04      	cmp	r5, #4
 8013cc0:	d806      	bhi.n	8013cd0 <_strtod_l+0x100>
 8013cc2:	e8df f005 	tbb	[pc, r5]
 8013cc6:	030a      	.short	0x030a
 8013cc8:	1714      	.short	0x1714
 8013cca:	0a          	.byte	0x0a
 8013ccb:	00          	.byte	0x00
 8013ccc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8013cd0:	073f      	lsls	r7, r7, #28
 8013cd2:	d5c1      	bpl.n	8013c58 <_strtod_l+0x88>
 8013cd4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8013cd8:	e7be      	b.n	8013c58 <_strtod_l+0x88>
 8013cda:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013cde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013ce0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013ce4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013ce8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013cec:	e7f0      	b.n	8013cd0 <_strtod_l+0x100>
 8013cee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8013e70 <_strtod_l+0x2a0>
 8013cf2:	e7ed      	b.n	8013cd0 <_strtod_l+0x100>
 8013cf4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013cf8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013cfc:	e7e8      	b.n	8013cd0 <_strtod_l+0x100>
 8013cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d00:	1c5a      	adds	r2, r3, #1
 8013d02:	9211      	str	r2, [sp, #68]	; 0x44
 8013d04:	785b      	ldrb	r3, [r3, #1]
 8013d06:	2b30      	cmp	r3, #48	; 0x30
 8013d08:	d0f9      	beq.n	8013cfe <_strtod_l+0x12e>
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d0a4      	beq.n	8013c58 <_strtod_l+0x88>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	f04f 0a00 	mov.w	sl, #0
 8013d14:	9304      	str	r3, [sp, #16]
 8013d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d18:	930a      	str	r3, [sp, #40]	; 0x28
 8013d1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013d1e:	f8cd a018 	str.w	sl, [sp, #24]
 8013d22:	220a      	movs	r2, #10
 8013d24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013d26:	7807      	ldrb	r7, [r0, #0]
 8013d28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013d2c:	b2d9      	uxtb	r1, r3
 8013d2e:	2909      	cmp	r1, #9
 8013d30:	d92a      	bls.n	8013d88 <_strtod_l+0x1b8>
 8013d32:	9907      	ldr	r1, [sp, #28]
 8013d34:	462a      	mov	r2, r5
 8013d36:	f002 fe3b 	bl	80169b0 <strncmp>
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d033      	beq.n	8013da6 <_strtod_l+0x1d6>
 8013d3e:	2000      	movs	r0, #0
 8013d40:	9b06      	ldr	r3, [sp, #24]
 8013d42:	463a      	mov	r2, r7
 8013d44:	4601      	mov	r1, r0
 8013d46:	4607      	mov	r7, r0
 8013d48:	2a65      	cmp	r2, #101	; 0x65
 8013d4a:	d001      	beq.n	8013d50 <_strtod_l+0x180>
 8013d4c:	2a45      	cmp	r2, #69	; 0x45
 8013d4e:	d117      	bne.n	8013d80 <_strtod_l+0x1b0>
 8013d50:	b91b      	cbnz	r3, 8013d5a <_strtod_l+0x18a>
 8013d52:	9b04      	ldr	r3, [sp, #16]
 8013d54:	4303      	orrs	r3, r0
 8013d56:	d09c      	beq.n	8013c92 <_strtod_l+0xc2>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8013d5e:	f10b 0201 	add.w	r2, fp, #1
 8013d62:	9211      	str	r2, [sp, #68]	; 0x44
 8013d64:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8013d68:	2a2b      	cmp	r2, #43	; 0x2b
 8013d6a:	d071      	beq.n	8013e50 <_strtod_l+0x280>
 8013d6c:	2a2d      	cmp	r2, #45	; 0x2d
 8013d6e:	d077      	beq.n	8013e60 <_strtod_l+0x290>
 8013d70:	f04f 0e00 	mov.w	lr, #0
 8013d74:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8013d78:	2d09      	cmp	r5, #9
 8013d7a:	d97f      	bls.n	8013e7c <_strtod_l+0x2ac>
 8013d7c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013d80:	2500      	movs	r5, #0
 8013d82:	e09b      	b.n	8013ebc <_strtod_l+0x2ec>
 8013d84:	2300      	movs	r3, #0
 8013d86:	e7c3      	b.n	8013d10 <_strtod_l+0x140>
 8013d88:	9906      	ldr	r1, [sp, #24]
 8013d8a:	2908      	cmp	r1, #8
 8013d8c:	bfdd      	ittte	le
 8013d8e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013d90:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d94:	9309      	strle	r3, [sp, #36]	; 0x24
 8013d96:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013d9a:	9b06      	ldr	r3, [sp, #24]
 8013d9c:	3001      	adds	r0, #1
 8013d9e:	3301      	adds	r3, #1
 8013da0:	9306      	str	r3, [sp, #24]
 8013da2:	9011      	str	r0, [sp, #68]	; 0x44
 8013da4:	e7be      	b.n	8013d24 <_strtod_l+0x154>
 8013da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013da8:	195a      	adds	r2, r3, r5
 8013daa:	9211      	str	r2, [sp, #68]	; 0x44
 8013dac:	5d5a      	ldrb	r2, [r3, r5]
 8013dae:	9b06      	ldr	r3, [sp, #24]
 8013db0:	b3a3      	cbz	r3, 8013e1c <_strtod_l+0x24c>
 8013db2:	4607      	mov	r7, r0
 8013db4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013db8:	2909      	cmp	r1, #9
 8013dba:	d912      	bls.n	8013de2 <_strtod_l+0x212>
 8013dbc:	2101      	movs	r1, #1
 8013dbe:	e7c3      	b.n	8013d48 <_strtod_l+0x178>
 8013dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	9211      	str	r2, [sp, #68]	; 0x44
 8013dc6:	785a      	ldrb	r2, [r3, #1]
 8013dc8:	3001      	adds	r0, #1
 8013dca:	2a30      	cmp	r2, #48	; 0x30
 8013dcc:	d0f8      	beq.n	8013dc0 <_strtod_l+0x1f0>
 8013dce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013dd2:	2b08      	cmp	r3, #8
 8013dd4:	f200 8497 	bhi.w	8014706 <_strtod_l+0xb36>
 8013dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dda:	930a      	str	r3, [sp, #40]	; 0x28
 8013ddc:	4607      	mov	r7, r0
 8013dde:	2000      	movs	r0, #0
 8013de0:	4603      	mov	r3, r0
 8013de2:	3a30      	subs	r2, #48	; 0x30
 8013de4:	f100 0101 	add.w	r1, r0, #1
 8013de8:	d012      	beq.n	8013e10 <_strtod_l+0x240>
 8013dea:	440f      	add	r7, r1
 8013dec:	eb00 0c03 	add.w	ip, r0, r3
 8013df0:	4619      	mov	r1, r3
 8013df2:	250a      	movs	r5, #10
 8013df4:	4561      	cmp	r1, ip
 8013df6:	d113      	bne.n	8013e20 <_strtod_l+0x250>
 8013df8:	1819      	adds	r1, r3, r0
 8013dfa:	2908      	cmp	r1, #8
 8013dfc:	f103 0301 	add.w	r3, r3, #1
 8013e00:	4403      	add	r3, r0
 8013e02:	dc1c      	bgt.n	8013e3e <_strtod_l+0x26e>
 8013e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e06:	210a      	movs	r1, #10
 8013e08:	fb01 2200 	mla	r2, r1, r0, r2
 8013e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8013e0e:	2100      	movs	r1, #0
 8013e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e12:	1c50      	adds	r0, r2, #1
 8013e14:	9011      	str	r0, [sp, #68]	; 0x44
 8013e16:	7852      	ldrb	r2, [r2, #1]
 8013e18:	4608      	mov	r0, r1
 8013e1a:	e7cb      	b.n	8013db4 <_strtod_l+0x1e4>
 8013e1c:	9806      	ldr	r0, [sp, #24]
 8013e1e:	e7d4      	b.n	8013dca <_strtod_l+0x1fa>
 8013e20:	2908      	cmp	r1, #8
 8013e22:	dc04      	bgt.n	8013e2e <_strtod_l+0x25e>
 8013e24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013e26:	436e      	muls	r6, r5
 8013e28:	9609      	str	r6, [sp, #36]	; 0x24
 8013e2a:	3101      	adds	r1, #1
 8013e2c:	e7e2      	b.n	8013df4 <_strtod_l+0x224>
 8013e2e:	f101 0e01 	add.w	lr, r1, #1
 8013e32:	f1be 0f10 	cmp.w	lr, #16
 8013e36:	bfd8      	it	le
 8013e38:	fb05 fa0a 	mulle.w	sl, r5, sl
 8013e3c:	e7f5      	b.n	8013e2a <_strtod_l+0x25a>
 8013e3e:	2b10      	cmp	r3, #16
 8013e40:	bfdc      	itt	le
 8013e42:	210a      	movle	r1, #10
 8013e44:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8013e48:	e7e1      	b.n	8013e0e <_strtod_l+0x23e>
 8013e4a:	2700      	movs	r7, #0
 8013e4c:	2101      	movs	r1, #1
 8013e4e:	e780      	b.n	8013d52 <_strtod_l+0x182>
 8013e50:	f04f 0e00 	mov.w	lr, #0
 8013e54:	f10b 0202 	add.w	r2, fp, #2
 8013e58:	9211      	str	r2, [sp, #68]	; 0x44
 8013e5a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8013e5e:	e789      	b.n	8013d74 <_strtod_l+0x1a4>
 8013e60:	f04f 0e01 	mov.w	lr, #1
 8013e64:	e7f6      	b.n	8013e54 <_strtod_l+0x284>
 8013e66:	bf00      	nop
 8013e68:	08017b10 	.word	0x08017b10
 8013e6c:	080178c8 	.word	0x080178c8
 8013e70:	7ff00000 	.word	0x7ff00000
 8013e74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e76:	1c55      	adds	r5, r2, #1
 8013e78:	9511      	str	r5, [sp, #68]	; 0x44
 8013e7a:	7852      	ldrb	r2, [r2, #1]
 8013e7c:	2a30      	cmp	r2, #48	; 0x30
 8013e7e:	d0f9      	beq.n	8013e74 <_strtod_l+0x2a4>
 8013e80:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8013e84:	2d08      	cmp	r5, #8
 8013e86:	f63f af7b 	bhi.w	8013d80 <_strtod_l+0x1b0>
 8013e8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8013e8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e90:	9207      	str	r2, [sp, #28]
 8013e92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e94:	1c55      	adds	r5, r2, #1
 8013e96:	9511      	str	r5, [sp, #68]	; 0x44
 8013e98:	7852      	ldrb	r2, [r2, #1]
 8013e9a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013e9e:	2e09      	cmp	r6, #9
 8013ea0:	d937      	bls.n	8013f12 <_strtod_l+0x342>
 8013ea2:	9e07      	ldr	r6, [sp, #28]
 8013ea4:	1bad      	subs	r5, r5, r6
 8013ea6:	2d08      	cmp	r5, #8
 8013ea8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013eac:	dc02      	bgt.n	8013eb4 <_strtod_l+0x2e4>
 8013eae:	4565      	cmp	r5, ip
 8013eb0:	bfa8      	it	ge
 8013eb2:	4665      	movge	r5, ip
 8013eb4:	f1be 0f00 	cmp.w	lr, #0
 8013eb8:	d000      	beq.n	8013ebc <_strtod_l+0x2ec>
 8013eba:	426d      	negs	r5, r5
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d14d      	bne.n	8013f5c <_strtod_l+0x38c>
 8013ec0:	9b04      	ldr	r3, [sp, #16]
 8013ec2:	4303      	orrs	r3, r0
 8013ec4:	f47f aec8 	bne.w	8013c58 <_strtod_l+0x88>
 8013ec8:	2900      	cmp	r1, #0
 8013eca:	f47f aee2 	bne.w	8013c92 <_strtod_l+0xc2>
 8013ece:	2a69      	cmp	r2, #105	; 0x69
 8013ed0:	d027      	beq.n	8013f22 <_strtod_l+0x352>
 8013ed2:	dc24      	bgt.n	8013f1e <_strtod_l+0x34e>
 8013ed4:	2a49      	cmp	r2, #73	; 0x49
 8013ed6:	d024      	beq.n	8013f22 <_strtod_l+0x352>
 8013ed8:	2a4e      	cmp	r2, #78	; 0x4e
 8013eda:	f47f aeda 	bne.w	8013c92 <_strtod_l+0xc2>
 8013ede:	4996      	ldr	r1, [pc, #600]	; (8014138 <_strtod_l+0x568>)
 8013ee0:	a811      	add	r0, sp, #68	; 0x44
 8013ee2:	f001 fd6f 	bl	80159c4 <__match>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f43f aed3 	beq.w	8013c92 <_strtod_l+0xc2>
 8013eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	2b28      	cmp	r3, #40	; 0x28
 8013ef2:	d12d      	bne.n	8013f50 <_strtod_l+0x380>
 8013ef4:	4991      	ldr	r1, [pc, #580]	; (801413c <_strtod_l+0x56c>)
 8013ef6:	aa14      	add	r2, sp, #80	; 0x50
 8013ef8:	a811      	add	r0, sp, #68	; 0x44
 8013efa:	f001 fd77 	bl	80159ec <__hexnan>
 8013efe:	2805      	cmp	r0, #5
 8013f00:	d126      	bne.n	8013f50 <_strtod_l+0x380>
 8013f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f04:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013f08:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013f0c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013f10:	e6a2      	b.n	8013c58 <_strtod_l+0x88>
 8013f12:	250a      	movs	r5, #10
 8013f14:	fb05 250c 	mla	r5, r5, ip, r2
 8013f18:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8013f1c:	e7b9      	b.n	8013e92 <_strtod_l+0x2c2>
 8013f1e:	2a6e      	cmp	r2, #110	; 0x6e
 8013f20:	e7db      	b.n	8013eda <_strtod_l+0x30a>
 8013f22:	4987      	ldr	r1, [pc, #540]	; (8014140 <_strtod_l+0x570>)
 8013f24:	a811      	add	r0, sp, #68	; 0x44
 8013f26:	f001 fd4d 	bl	80159c4 <__match>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	f43f aeb1 	beq.w	8013c92 <_strtod_l+0xc2>
 8013f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f32:	4984      	ldr	r1, [pc, #528]	; (8014144 <_strtod_l+0x574>)
 8013f34:	3b01      	subs	r3, #1
 8013f36:	a811      	add	r0, sp, #68	; 0x44
 8013f38:	9311      	str	r3, [sp, #68]	; 0x44
 8013f3a:	f001 fd43 	bl	80159c4 <__match>
 8013f3e:	b910      	cbnz	r0, 8013f46 <_strtod_l+0x376>
 8013f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f42:	3301      	adds	r3, #1
 8013f44:	9311      	str	r3, [sp, #68]	; 0x44
 8013f46:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014158 <_strtod_l+0x588>
 8013f4a:	f04f 0800 	mov.w	r8, #0
 8013f4e:	e683      	b.n	8013c58 <_strtod_l+0x88>
 8013f50:	487d      	ldr	r0, [pc, #500]	; (8014148 <_strtod_l+0x578>)
 8013f52:	f002 fd15 	bl	8016980 <nan>
 8013f56:	ec59 8b10 	vmov	r8, r9, d0
 8013f5a:	e67d      	b.n	8013c58 <_strtod_l+0x88>
 8013f5c:	1bea      	subs	r2, r5, r7
 8013f5e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013f62:	9207      	str	r2, [sp, #28]
 8013f64:	9a06      	ldr	r2, [sp, #24]
 8013f66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013f6a:	2a00      	cmp	r2, #0
 8013f6c:	bf08      	it	eq
 8013f6e:	461a      	moveq	r2, r3
 8013f70:	2b10      	cmp	r3, #16
 8013f72:	9206      	str	r2, [sp, #24]
 8013f74:	461a      	mov	r2, r3
 8013f76:	bfa8      	it	ge
 8013f78:	2210      	movge	r2, #16
 8013f7a:	2b09      	cmp	r3, #9
 8013f7c:	ec59 8b17 	vmov	r8, r9, d7
 8013f80:	dd0c      	ble.n	8013f9c <_strtod_l+0x3cc>
 8013f82:	4972      	ldr	r1, [pc, #456]	; (801414c <_strtod_l+0x57c>)
 8013f84:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013f88:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8013f8c:	ee06 aa90 	vmov	s13, sl
 8013f90:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013f94:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013f98:	ec59 8b16 	vmov	r8, r9, d6
 8013f9c:	2b0f      	cmp	r3, #15
 8013f9e:	dc36      	bgt.n	801400e <_strtod_l+0x43e>
 8013fa0:	9907      	ldr	r1, [sp, #28]
 8013fa2:	2900      	cmp	r1, #0
 8013fa4:	f43f ae58 	beq.w	8013c58 <_strtod_l+0x88>
 8013fa8:	dd23      	ble.n	8013ff2 <_strtod_l+0x422>
 8013faa:	2916      	cmp	r1, #22
 8013fac:	dc0b      	bgt.n	8013fc6 <_strtod_l+0x3f6>
 8013fae:	4b67      	ldr	r3, [pc, #412]	; (801414c <_strtod_l+0x57c>)
 8013fb0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013fb4:	ed93 7b00 	vldr	d7, [r3]
 8013fb8:	ec49 8b16 	vmov	d6, r8, r9
 8013fbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fc0:	ec59 8b17 	vmov	r8, r9, d7
 8013fc4:	e648      	b.n	8013c58 <_strtod_l+0x88>
 8013fc6:	9807      	ldr	r0, [sp, #28]
 8013fc8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8013fcc:	4281      	cmp	r1, r0
 8013fce:	db1e      	blt.n	801400e <_strtod_l+0x43e>
 8013fd0:	4a5e      	ldr	r2, [pc, #376]	; (801414c <_strtod_l+0x57c>)
 8013fd2:	f1c3 030f 	rsb	r3, r3, #15
 8013fd6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013fda:	ed91 7b00 	vldr	d7, [r1]
 8013fde:	ec49 8b16 	vmov	d6, r8, r9
 8013fe2:	1ac3      	subs	r3, r0, r3
 8013fe4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013fe8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fec:	ed92 6b00 	vldr	d6, [r2]
 8013ff0:	e7e4      	b.n	8013fbc <_strtod_l+0x3ec>
 8013ff2:	9907      	ldr	r1, [sp, #28]
 8013ff4:	3116      	adds	r1, #22
 8013ff6:	db0a      	blt.n	801400e <_strtod_l+0x43e>
 8013ff8:	4b54      	ldr	r3, [pc, #336]	; (801414c <_strtod_l+0x57c>)
 8013ffa:	1b7d      	subs	r5, r7, r5
 8013ffc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014000:	ed95 7b00 	vldr	d7, [r5]
 8014004:	ec49 8b16 	vmov	d6, r8, r9
 8014008:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801400c:	e7d8      	b.n	8013fc0 <_strtod_l+0x3f0>
 801400e:	9907      	ldr	r1, [sp, #28]
 8014010:	1a9a      	subs	r2, r3, r2
 8014012:	440a      	add	r2, r1
 8014014:	2a00      	cmp	r2, #0
 8014016:	dd6f      	ble.n	80140f8 <_strtod_l+0x528>
 8014018:	f012 000f 	ands.w	r0, r2, #15
 801401c:	d00a      	beq.n	8014034 <_strtod_l+0x464>
 801401e:	494b      	ldr	r1, [pc, #300]	; (801414c <_strtod_l+0x57c>)
 8014020:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014024:	ed91 7b00 	vldr	d7, [r1]
 8014028:	ec49 8b16 	vmov	d6, r8, r9
 801402c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014030:	ec59 8b17 	vmov	r8, r9, d7
 8014034:	f032 020f 	bics.w	r2, r2, #15
 8014038:	d04f      	beq.n	80140da <_strtod_l+0x50a>
 801403a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801403e:	dd22      	ble.n	8014086 <_strtod_l+0x4b6>
 8014040:	2500      	movs	r5, #0
 8014042:	462e      	mov	r6, r5
 8014044:	9506      	str	r5, [sp, #24]
 8014046:	462f      	mov	r7, r5
 8014048:	2322      	movs	r3, #34	; 0x22
 801404a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014158 <_strtod_l+0x588>
 801404e:	6023      	str	r3, [r4, #0]
 8014050:	f04f 0800 	mov.w	r8, #0
 8014054:	9b06      	ldr	r3, [sp, #24]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f43f adfe 	beq.w	8013c58 <_strtod_l+0x88>
 801405c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801405e:	4620      	mov	r0, r4
 8014060:	f001 fdbe 	bl	8015be0 <_Bfree>
 8014064:	4639      	mov	r1, r7
 8014066:	4620      	mov	r0, r4
 8014068:	f001 fdba 	bl	8015be0 <_Bfree>
 801406c:	4631      	mov	r1, r6
 801406e:	4620      	mov	r0, r4
 8014070:	f001 fdb6 	bl	8015be0 <_Bfree>
 8014074:	9906      	ldr	r1, [sp, #24]
 8014076:	4620      	mov	r0, r4
 8014078:	f001 fdb2 	bl	8015be0 <_Bfree>
 801407c:	4629      	mov	r1, r5
 801407e:	4620      	mov	r0, r4
 8014080:	f001 fdae 	bl	8015be0 <_Bfree>
 8014084:	e5e8      	b.n	8013c58 <_strtod_l+0x88>
 8014086:	2000      	movs	r0, #0
 8014088:	ec49 8b17 	vmov	d7, r8, r9
 801408c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014150 <_strtod_l+0x580>
 8014090:	1112      	asrs	r2, r2, #4
 8014092:	4601      	mov	r1, r0
 8014094:	2a01      	cmp	r2, #1
 8014096:	dc23      	bgt.n	80140e0 <_strtod_l+0x510>
 8014098:	b108      	cbz	r0, 801409e <_strtod_l+0x4ce>
 801409a:	ec59 8b17 	vmov	r8, r9, d7
 801409e:	4a2c      	ldr	r2, [pc, #176]	; (8014150 <_strtod_l+0x580>)
 80140a0:	482c      	ldr	r0, [pc, #176]	; (8014154 <_strtod_l+0x584>)
 80140a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80140a6:	ed92 7b00 	vldr	d7, [r2]
 80140aa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80140ae:	ec49 8b16 	vmov	d6, r8, r9
 80140b2:	4a29      	ldr	r2, [pc, #164]	; (8014158 <_strtod_l+0x588>)
 80140b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80140b8:	ee17 1a90 	vmov	r1, s15
 80140bc:	400a      	ands	r2, r1
 80140be:	4282      	cmp	r2, r0
 80140c0:	ec59 8b17 	vmov	r8, r9, d7
 80140c4:	d8bc      	bhi.n	8014040 <_strtod_l+0x470>
 80140c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80140ca:	4282      	cmp	r2, r0
 80140cc:	bf86      	itte	hi
 80140ce:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801415c <_strtod_l+0x58c>
 80140d2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80140d6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80140da:	2200      	movs	r2, #0
 80140dc:	9204      	str	r2, [sp, #16]
 80140de:	e078      	b.n	80141d2 <_strtod_l+0x602>
 80140e0:	07d6      	lsls	r6, r2, #31
 80140e2:	d504      	bpl.n	80140ee <_strtod_l+0x51e>
 80140e4:	ed9c 6b00 	vldr	d6, [ip]
 80140e8:	2001      	movs	r0, #1
 80140ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80140ee:	3101      	adds	r1, #1
 80140f0:	1052      	asrs	r2, r2, #1
 80140f2:	f10c 0c08 	add.w	ip, ip, #8
 80140f6:	e7cd      	b.n	8014094 <_strtod_l+0x4c4>
 80140f8:	d0ef      	beq.n	80140da <_strtod_l+0x50a>
 80140fa:	4252      	negs	r2, r2
 80140fc:	f012 000f 	ands.w	r0, r2, #15
 8014100:	d00a      	beq.n	8014118 <_strtod_l+0x548>
 8014102:	4912      	ldr	r1, [pc, #72]	; (801414c <_strtod_l+0x57c>)
 8014104:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014108:	ed91 7b00 	vldr	d7, [r1]
 801410c:	ec49 8b16 	vmov	d6, r8, r9
 8014110:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014114:	ec59 8b17 	vmov	r8, r9, d7
 8014118:	1112      	asrs	r2, r2, #4
 801411a:	d0de      	beq.n	80140da <_strtod_l+0x50a>
 801411c:	2a1f      	cmp	r2, #31
 801411e:	dd1f      	ble.n	8014160 <_strtod_l+0x590>
 8014120:	2500      	movs	r5, #0
 8014122:	462e      	mov	r6, r5
 8014124:	9506      	str	r5, [sp, #24]
 8014126:	462f      	mov	r7, r5
 8014128:	2322      	movs	r3, #34	; 0x22
 801412a:	f04f 0800 	mov.w	r8, #0
 801412e:	f04f 0900 	mov.w	r9, #0
 8014132:	6023      	str	r3, [r4, #0]
 8014134:	e78e      	b.n	8014054 <_strtod_l+0x484>
 8014136:	bf00      	nop
 8014138:	08017899 	.word	0x08017899
 801413c:	080178dc 	.word	0x080178dc
 8014140:	08017891 	.word	0x08017891
 8014144:	08017a1c 	.word	0x08017a1c
 8014148:	08017cc8 	.word	0x08017cc8
 801414c:	08017ba8 	.word	0x08017ba8
 8014150:	08017b80 	.word	0x08017b80
 8014154:	7ca00000 	.word	0x7ca00000
 8014158:	7ff00000 	.word	0x7ff00000
 801415c:	7fefffff 	.word	0x7fefffff
 8014160:	f012 0110 	ands.w	r1, r2, #16
 8014164:	bf18      	it	ne
 8014166:	216a      	movne	r1, #106	; 0x6a
 8014168:	9104      	str	r1, [sp, #16]
 801416a:	ec49 8b17 	vmov	d7, r8, r9
 801416e:	49be      	ldr	r1, [pc, #760]	; (8014468 <_strtod_l+0x898>)
 8014170:	2000      	movs	r0, #0
 8014172:	07d6      	lsls	r6, r2, #31
 8014174:	d504      	bpl.n	8014180 <_strtod_l+0x5b0>
 8014176:	ed91 6b00 	vldr	d6, [r1]
 801417a:	2001      	movs	r0, #1
 801417c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014180:	1052      	asrs	r2, r2, #1
 8014182:	f101 0108 	add.w	r1, r1, #8
 8014186:	d1f4      	bne.n	8014172 <_strtod_l+0x5a2>
 8014188:	b108      	cbz	r0, 801418e <_strtod_l+0x5be>
 801418a:	ec59 8b17 	vmov	r8, r9, d7
 801418e:	9a04      	ldr	r2, [sp, #16]
 8014190:	b1c2      	cbz	r2, 80141c4 <_strtod_l+0x5f4>
 8014192:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014196:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801419a:	2a00      	cmp	r2, #0
 801419c:	4648      	mov	r0, r9
 801419e:	dd11      	ble.n	80141c4 <_strtod_l+0x5f4>
 80141a0:	2a1f      	cmp	r2, #31
 80141a2:	f340 812e 	ble.w	8014402 <_strtod_l+0x832>
 80141a6:	2a34      	cmp	r2, #52	; 0x34
 80141a8:	bfde      	ittt	le
 80141aa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80141ae:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80141b2:	fa02 f101 	lslle.w	r1, r2, r1
 80141b6:	f04f 0800 	mov.w	r8, #0
 80141ba:	bfcc      	ite	gt
 80141bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80141c0:	ea01 0900 	andle.w	r9, r1, r0
 80141c4:	ec49 8b17 	vmov	d7, r8, r9
 80141c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80141cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d0:	d0a6      	beq.n	8014120 <_strtod_l+0x550>
 80141d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141d4:	9200      	str	r2, [sp, #0]
 80141d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141d8:	9a06      	ldr	r2, [sp, #24]
 80141da:	4620      	mov	r0, r4
 80141dc:	f001 fd68 	bl	8015cb0 <__s2b>
 80141e0:	9006      	str	r0, [sp, #24]
 80141e2:	2800      	cmp	r0, #0
 80141e4:	f43f af2c 	beq.w	8014040 <_strtod_l+0x470>
 80141e8:	9b07      	ldr	r3, [sp, #28]
 80141ea:	1b7d      	subs	r5, r7, r5
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	bfb4      	ite	lt
 80141f0:	462b      	movlt	r3, r5
 80141f2:	2300      	movge	r3, #0
 80141f4:	9309      	str	r3, [sp, #36]	; 0x24
 80141f6:	9b07      	ldr	r3, [sp, #28]
 80141f8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8014448 <_strtod_l+0x878>
 80141fc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8014450 <_strtod_l+0x880>
 8014200:	ed9f bb95 	vldr	d11, [pc, #596]	; 8014458 <_strtod_l+0x888>
 8014204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014208:	2500      	movs	r5, #0
 801420a:	930c      	str	r3, [sp, #48]	; 0x30
 801420c:	462e      	mov	r6, r5
 801420e:	9b06      	ldr	r3, [sp, #24]
 8014210:	4620      	mov	r0, r4
 8014212:	6859      	ldr	r1, [r3, #4]
 8014214:	f001 fca4 	bl	8015b60 <_Balloc>
 8014218:	4607      	mov	r7, r0
 801421a:	2800      	cmp	r0, #0
 801421c:	f43f af14 	beq.w	8014048 <_strtod_l+0x478>
 8014220:	9b06      	ldr	r3, [sp, #24]
 8014222:	691a      	ldr	r2, [r3, #16]
 8014224:	3202      	adds	r2, #2
 8014226:	f103 010c 	add.w	r1, r3, #12
 801422a:	0092      	lsls	r2, r2, #2
 801422c:	300c      	adds	r0, #12
 801422e:	f7fe fdfd 	bl	8012e2c <memcpy>
 8014232:	ec49 8b10 	vmov	d0, r8, r9
 8014236:	aa14      	add	r2, sp, #80	; 0x50
 8014238:	a913      	add	r1, sp, #76	; 0x4c
 801423a:	4620      	mov	r0, r4
 801423c:	f002 f87e 	bl	801633c <__d2b>
 8014240:	ec49 8b18 	vmov	d8, r8, r9
 8014244:	9012      	str	r0, [sp, #72]	; 0x48
 8014246:	2800      	cmp	r0, #0
 8014248:	f43f aefe 	beq.w	8014048 <_strtod_l+0x478>
 801424c:	2101      	movs	r1, #1
 801424e:	4620      	mov	r0, r4
 8014250:	f001 fdc8 	bl	8015de4 <__i2b>
 8014254:	4606      	mov	r6, r0
 8014256:	2800      	cmp	r0, #0
 8014258:	f43f aef6 	beq.w	8014048 <_strtod_l+0x478>
 801425c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801425e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014260:	2b00      	cmp	r3, #0
 8014262:	bfab      	itete	ge
 8014264:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8014266:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8014268:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801426c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8014270:	bfac      	ite	ge
 8014272:	eb03 0b02 	addge.w	fp, r3, r2
 8014276:	eba2 0a03 	sublt.w	sl, r2, r3
 801427a:	9a04      	ldr	r2, [sp, #16]
 801427c:	1a9b      	subs	r3, r3, r2
 801427e:	440b      	add	r3, r1
 8014280:	4a7a      	ldr	r2, [pc, #488]	; (801446c <_strtod_l+0x89c>)
 8014282:	3b01      	subs	r3, #1
 8014284:	4293      	cmp	r3, r2
 8014286:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801428a:	f280 80cd 	bge.w	8014428 <_strtod_l+0x858>
 801428e:	1ad2      	subs	r2, r2, r3
 8014290:	2a1f      	cmp	r2, #31
 8014292:	eba1 0102 	sub.w	r1, r1, r2
 8014296:	f04f 0001 	mov.w	r0, #1
 801429a:	f300 80b9 	bgt.w	8014410 <_strtod_l+0x840>
 801429e:	fa00 f302 	lsl.w	r3, r0, r2
 80142a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80142a4:	2300      	movs	r3, #0
 80142a6:	930a      	str	r3, [sp, #40]	; 0x28
 80142a8:	eb0b 0301 	add.w	r3, fp, r1
 80142ac:	9a04      	ldr	r2, [sp, #16]
 80142ae:	459b      	cmp	fp, r3
 80142b0:	448a      	add	sl, r1
 80142b2:	4492      	add	sl, r2
 80142b4:	465a      	mov	r2, fp
 80142b6:	bfa8      	it	ge
 80142b8:	461a      	movge	r2, r3
 80142ba:	4552      	cmp	r2, sl
 80142bc:	bfa8      	it	ge
 80142be:	4652      	movge	r2, sl
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	bfc2      	ittt	gt
 80142c4:	1a9b      	subgt	r3, r3, r2
 80142c6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80142ca:	ebab 0b02 	subgt.w	fp, fp, r2
 80142ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142d0:	2a00      	cmp	r2, #0
 80142d2:	dd18      	ble.n	8014306 <_strtod_l+0x736>
 80142d4:	4631      	mov	r1, r6
 80142d6:	4620      	mov	r0, r4
 80142d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80142da:	f001 fe43 	bl	8015f64 <__pow5mult>
 80142de:	4606      	mov	r6, r0
 80142e0:	2800      	cmp	r0, #0
 80142e2:	f43f aeb1 	beq.w	8014048 <_strtod_l+0x478>
 80142e6:	4601      	mov	r1, r0
 80142e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142ea:	4620      	mov	r0, r4
 80142ec:	f001 fd90 	bl	8015e10 <__multiply>
 80142f0:	900e      	str	r0, [sp, #56]	; 0x38
 80142f2:	2800      	cmp	r0, #0
 80142f4:	f43f aea8 	beq.w	8014048 <_strtod_l+0x478>
 80142f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80142fa:	4620      	mov	r0, r4
 80142fc:	f001 fc70 	bl	8015be0 <_Bfree>
 8014300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014304:	9212      	str	r2, [sp, #72]	; 0x48
 8014306:	2b00      	cmp	r3, #0
 8014308:	f300 8093 	bgt.w	8014432 <_strtod_l+0x862>
 801430c:	9b07      	ldr	r3, [sp, #28]
 801430e:	2b00      	cmp	r3, #0
 8014310:	dd08      	ble.n	8014324 <_strtod_l+0x754>
 8014312:	4639      	mov	r1, r7
 8014314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014316:	4620      	mov	r0, r4
 8014318:	f001 fe24 	bl	8015f64 <__pow5mult>
 801431c:	4607      	mov	r7, r0
 801431e:	2800      	cmp	r0, #0
 8014320:	f43f ae92 	beq.w	8014048 <_strtod_l+0x478>
 8014324:	f1ba 0f00 	cmp.w	sl, #0
 8014328:	dd08      	ble.n	801433c <_strtod_l+0x76c>
 801432a:	4639      	mov	r1, r7
 801432c:	4652      	mov	r2, sl
 801432e:	4620      	mov	r0, r4
 8014330:	f001 fe72 	bl	8016018 <__lshift>
 8014334:	4607      	mov	r7, r0
 8014336:	2800      	cmp	r0, #0
 8014338:	f43f ae86 	beq.w	8014048 <_strtod_l+0x478>
 801433c:	f1bb 0f00 	cmp.w	fp, #0
 8014340:	dd08      	ble.n	8014354 <_strtod_l+0x784>
 8014342:	4631      	mov	r1, r6
 8014344:	465a      	mov	r2, fp
 8014346:	4620      	mov	r0, r4
 8014348:	f001 fe66 	bl	8016018 <__lshift>
 801434c:	4606      	mov	r6, r0
 801434e:	2800      	cmp	r0, #0
 8014350:	f43f ae7a 	beq.w	8014048 <_strtod_l+0x478>
 8014354:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014356:	463a      	mov	r2, r7
 8014358:	4620      	mov	r0, r4
 801435a:	f001 fee9 	bl	8016130 <__mdiff>
 801435e:	4605      	mov	r5, r0
 8014360:	2800      	cmp	r0, #0
 8014362:	f43f ae71 	beq.w	8014048 <_strtod_l+0x478>
 8014366:	2300      	movs	r3, #0
 8014368:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801436c:	60c3      	str	r3, [r0, #12]
 801436e:	4631      	mov	r1, r6
 8014370:	f001 fec2 	bl	80160f8 <__mcmp>
 8014374:	2800      	cmp	r0, #0
 8014376:	da7d      	bge.n	8014474 <_strtod_l+0x8a4>
 8014378:	ea5a 0308 	orrs.w	r3, sl, r8
 801437c:	f040 80a3 	bne.w	80144c6 <_strtod_l+0x8f6>
 8014380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014384:	2b00      	cmp	r3, #0
 8014386:	f040 809e 	bne.w	80144c6 <_strtod_l+0x8f6>
 801438a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801438e:	0d1b      	lsrs	r3, r3, #20
 8014390:	051b      	lsls	r3, r3, #20
 8014392:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014396:	f240 8096 	bls.w	80144c6 <_strtod_l+0x8f6>
 801439a:	696b      	ldr	r3, [r5, #20]
 801439c:	b91b      	cbnz	r3, 80143a6 <_strtod_l+0x7d6>
 801439e:	692b      	ldr	r3, [r5, #16]
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	f340 8090 	ble.w	80144c6 <_strtod_l+0x8f6>
 80143a6:	4629      	mov	r1, r5
 80143a8:	2201      	movs	r2, #1
 80143aa:	4620      	mov	r0, r4
 80143ac:	f001 fe34 	bl	8016018 <__lshift>
 80143b0:	4631      	mov	r1, r6
 80143b2:	4605      	mov	r5, r0
 80143b4:	f001 fea0 	bl	80160f8 <__mcmp>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	f340 8084 	ble.w	80144c6 <_strtod_l+0x8f6>
 80143be:	9904      	ldr	r1, [sp, #16]
 80143c0:	4a2b      	ldr	r2, [pc, #172]	; (8014470 <_strtod_l+0x8a0>)
 80143c2:	464b      	mov	r3, r9
 80143c4:	2900      	cmp	r1, #0
 80143c6:	f000 809d 	beq.w	8014504 <_strtod_l+0x934>
 80143ca:	ea02 0109 	and.w	r1, r2, r9
 80143ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143d2:	f300 8097 	bgt.w	8014504 <_strtod_l+0x934>
 80143d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143da:	f77f aea5 	ble.w	8014128 <_strtod_l+0x558>
 80143de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014460 <_strtod_l+0x890>
 80143e2:	ec49 8b16 	vmov	d6, r8, r9
 80143e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80143ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80143ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80143f2:	4313      	orrs	r3, r2
 80143f4:	bf08      	it	eq
 80143f6:	2322      	moveq	r3, #34	; 0x22
 80143f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80143fc:	bf08      	it	eq
 80143fe:	6023      	streq	r3, [r4, #0]
 8014400:	e62c      	b.n	801405c <_strtod_l+0x48c>
 8014402:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014406:	fa01 f202 	lsl.w	r2, r1, r2
 801440a:	ea02 0808 	and.w	r8, r2, r8
 801440e:	e6d9      	b.n	80141c4 <_strtod_l+0x5f4>
 8014410:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8014414:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014418:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801441c:	33e2      	adds	r3, #226	; 0xe2
 801441e:	fa00 f303 	lsl.w	r3, r0, r3
 8014422:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8014426:	e73f      	b.n	80142a8 <_strtod_l+0x6d8>
 8014428:	2200      	movs	r2, #0
 801442a:	2301      	movs	r3, #1
 801442c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014430:	e73a      	b.n	80142a8 <_strtod_l+0x6d8>
 8014432:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014434:	461a      	mov	r2, r3
 8014436:	4620      	mov	r0, r4
 8014438:	f001 fdee 	bl	8016018 <__lshift>
 801443c:	9012      	str	r0, [sp, #72]	; 0x48
 801443e:	2800      	cmp	r0, #0
 8014440:	f47f af64 	bne.w	801430c <_strtod_l+0x73c>
 8014444:	e600      	b.n	8014048 <_strtod_l+0x478>
 8014446:	bf00      	nop
 8014448:	94a03595 	.word	0x94a03595
 801444c:	3fcfffff 	.word	0x3fcfffff
 8014450:	94a03595 	.word	0x94a03595
 8014454:	3fdfffff 	.word	0x3fdfffff
 8014458:	35afe535 	.word	0x35afe535
 801445c:	3fe00000 	.word	0x3fe00000
 8014460:	00000000 	.word	0x00000000
 8014464:	39500000 	.word	0x39500000
 8014468:	080178f0 	.word	0x080178f0
 801446c:	fffffc02 	.word	0xfffffc02
 8014470:	7ff00000 	.word	0x7ff00000
 8014474:	46cb      	mov	fp, r9
 8014476:	d15f      	bne.n	8014538 <_strtod_l+0x968>
 8014478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801447c:	f1ba 0f00 	cmp.w	sl, #0
 8014480:	d02a      	beq.n	80144d8 <_strtod_l+0x908>
 8014482:	4aa7      	ldr	r2, [pc, #668]	; (8014720 <_strtod_l+0xb50>)
 8014484:	4293      	cmp	r3, r2
 8014486:	d12b      	bne.n	80144e0 <_strtod_l+0x910>
 8014488:	9b04      	ldr	r3, [sp, #16]
 801448a:	4642      	mov	r2, r8
 801448c:	b1fb      	cbz	r3, 80144ce <_strtod_l+0x8fe>
 801448e:	4ba5      	ldr	r3, [pc, #660]	; (8014724 <_strtod_l+0xb54>)
 8014490:	ea09 0303 	and.w	r3, r9, r3
 8014494:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801449c:	d81a      	bhi.n	80144d4 <_strtod_l+0x904>
 801449e:	0d1b      	lsrs	r3, r3, #20
 80144a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80144a4:	fa01 f303 	lsl.w	r3, r1, r3
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d119      	bne.n	80144e0 <_strtod_l+0x910>
 80144ac:	4b9e      	ldr	r3, [pc, #632]	; (8014728 <_strtod_l+0xb58>)
 80144ae:	459b      	cmp	fp, r3
 80144b0:	d102      	bne.n	80144b8 <_strtod_l+0x8e8>
 80144b2:	3201      	adds	r2, #1
 80144b4:	f43f adc8 	beq.w	8014048 <_strtod_l+0x478>
 80144b8:	4b9a      	ldr	r3, [pc, #616]	; (8014724 <_strtod_l+0xb54>)
 80144ba:	ea0b 0303 	and.w	r3, fp, r3
 80144be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80144c2:	f04f 0800 	mov.w	r8, #0
 80144c6:	9b04      	ldr	r3, [sp, #16]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d188      	bne.n	80143de <_strtod_l+0x80e>
 80144cc:	e5c6      	b.n	801405c <_strtod_l+0x48c>
 80144ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144d2:	e7e9      	b.n	80144a8 <_strtod_l+0x8d8>
 80144d4:	460b      	mov	r3, r1
 80144d6:	e7e7      	b.n	80144a8 <_strtod_l+0x8d8>
 80144d8:	ea53 0308 	orrs.w	r3, r3, r8
 80144dc:	f43f af6f 	beq.w	80143be <_strtod_l+0x7ee>
 80144e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144e2:	b1cb      	cbz	r3, 8014518 <_strtod_l+0x948>
 80144e4:	ea13 0f0b 	tst.w	r3, fp
 80144e8:	d0ed      	beq.n	80144c6 <_strtod_l+0x8f6>
 80144ea:	9a04      	ldr	r2, [sp, #16]
 80144ec:	4640      	mov	r0, r8
 80144ee:	4649      	mov	r1, r9
 80144f0:	f1ba 0f00 	cmp.w	sl, #0
 80144f4:	d014      	beq.n	8014520 <_strtod_l+0x950>
 80144f6:	f7ff fb51 	bl	8013b9c <sulp>
 80144fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 80144fe:	ec59 8b17 	vmov	r8, r9, d7
 8014502:	e7e0      	b.n	80144c6 <_strtod_l+0x8f6>
 8014504:	4013      	ands	r3, r2
 8014506:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801450a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801450e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014512:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014516:	e7d6      	b.n	80144c6 <_strtod_l+0x8f6>
 8014518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801451a:	ea13 0f08 	tst.w	r3, r8
 801451e:	e7e3      	b.n	80144e8 <_strtod_l+0x918>
 8014520:	f7ff fb3c 	bl	8013b9c <sulp>
 8014524:	ee38 0b40 	vsub.f64	d0, d8, d0
 8014528:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014530:	ec59 8b10 	vmov	r8, r9, d0
 8014534:	d1c7      	bne.n	80144c6 <_strtod_l+0x8f6>
 8014536:	e5f7      	b.n	8014128 <_strtod_l+0x558>
 8014538:	4631      	mov	r1, r6
 801453a:	4628      	mov	r0, r5
 801453c:	f001 ff5a 	bl	80163f4 <__ratio>
 8014540:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014544:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454c:	d865      	bhi.n	801461a <_strtod_l+0xa4a>
 801454e:	f1ba 0f00 	cmp.w	sl, #0
 8014552:	d042      	beq.n	80145da <_strtod_l+0xa0a>
 8014554:	4b75      	ldr	r3, [pc, #468]	; (801472c <_strtod_l+0xb5c>)
 8014556:	2200      	movs	r2, #0
 8014558:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801455c:	4871      	ldr	r0, [pc, #452]	; (8014724 <_strtod_l+0xb54>)
 801455e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8014738 <_strtod_l+0xb68>
 8014562:	ea0b 0100 	and.w	r1, fp, r0
 8014566:	4561      	cmp	r1, ip
 8014568:	f040 808e 	bne.w	8014688 <_strtod_l+0xab8>
 801456c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8014570:	ec49 8b10 	vmov	d0, r8, r9
 8014574:	ec43 2b1c 	vmov	d12, r2, r3
 8014578:	910a      	str	r1, [sp, #40]	; 0x28
 801457a:	f001 fe63 	bl	8016244 <__ulp>
 801457e:	ec49 8b1e 	vmov	d14, r8, r9
 8014582:	4868      	ldr	r0, [pc, #416]	; (8014724 <_strtod_l+0xb54>)
 8014584:	eeac eb00 	vfma.f64	d14, d12, d0
 8014588:	ee1e 3a90 	vmov	r3, s29
 801458c:	4a68      	ldr	r2, [pc, #416]	; (8014730 <_strtod_l+0xb60>)
 801458e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014590:	4018      	ands	r0, r3
 8014592:	4290      	cmp	r0, r2
 8014594:	ec59 8b1e 	vmov	r8, r9, d14
 8014598:	d94e      	bls.n	8014638 <_strtod_l+0xa68>
 801459a:	ee18 3a90 	vmov	r3, s17
 801459e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d104      	bne.n	80145b0 <_strtod_l+0x9e0>
 80145a6:	ee18 3a10 	vmov	r3, s16
 80145aa:	3301      	adds	r3, #1
 80145ac:	f43f ad4c 	beq.w	8014048 <_strtod_l+0x478>
 80145b0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8014728 <_strtod_l+0xb58>
 80145b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80145b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145ba:	4620      	mov	r0, r4
 80145bc:	f001 fb10 	bl	8015be0 <_Bfree>
 80145c0:	4639      	mov	r1, r7
 80145c2:	4620      	mov	r0, r4
 80145c4:	f001 fb0c 	bl	8015be0 <_Bfree>
 80145c8:	4631      	mov	r1, r6
 80145ca:	4620      	mov	r0, r4
 80145cc:	f001 fb08 	bl	8015be0 <_Bfree>
 80145d0:	4629      	mov	r1, r5
 80145d2:	4620      	mov	r0, r4
 80145d4:	f001 fb04 	bl	8015be0 <_Bfree>
 80145d8:	e619      	b.n	801420e <_strtod_l+0x63e>
 80145da:	f1b8 0f00 	cmp.w	r8, #0
 80145de:	d112      	bne.n	8014606 <_strtod_l+0xa36>
 80145e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80145e4:	b9b3      	cbnz	r3, 8014614 <_strtod_l+0xa44>
 80145e6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80145ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80145ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80145f6:	bf58      	it	pl
 80145f8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80145fc:	eeb1 7b4d 	vneg.f64	d7, d13
 8014600:	ec53 2b17 	vmov	r2, r3, d7
 8014604:	e7aa      	b.n	801455c <_strtod_l+0x98c>
 8014606:	f1b8 0f01 	cmp.w	r8, #1
 801460a:	d103      	bne.n	8014614 <_strtod_l+0xa44>
 801460c:	f1b9 0f00 	cmp.w	r9, #0
 8014610:	f43f ad8a 	beq.w	8014128 <_strtod_l+0x558>
 8014614:	4b47      	ldr	r3, [pc, #284]	; (8014734 <_strtod_l+0xb64>)
 8014616:	2200      	movs	r2, #0
 8014618:	e79e      	b.n	8014558 <_strtod_l+0x988>
 801461a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801461e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8014622:	f1ba 0f00 	cmp.w	sl, #0
 8014626:	d104      	bne.n	8014632 <_strtod_l+0xa62>
 8014628:	eeb1 7b4d 	vneg.f64	d7, d13
 801462c:	ec53 2b17 	vmov	r2, r3, d7
 8014630:	e794      	b.n	801455c <_strtod_l+0x98c>
 8014632:	eeb0 7b4d 	vmov.f64	d7, d13
 8014636:	e7f9      	b.n	801462c <_strtod_l+0xa5c>
 8014638:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801463c:	9b04      	ldr	r3, [sp, #16]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1ba      	bne.n	80145b8 <_strtod_l+0x9e8>
 8014642:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014646:	0d1b      	lsrs	r3, r3, #20
 8014648:	051b      	lsls	r3, r3, #20
 801464a:	4299      	cmp	r1, r3
 801464c:	d1b4      	bne.n	80145b8 <_strtod_l+0x9e8>
 801464e:	ec51 0b1d 	vmov	r0, r1, d13
 8014652:	f7ec f879 	bl	8000748 <__aeabi_d2lz>
 8014656:	f7ec f831 	bl	80006bc <__aeabi_l2d>
 801465a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801465e:	ec41 0b17 	vmov	d7, r0, r1
 8014662:	ea43 0308 	orr.w	r3, r3, r8
 8014666:	ea53 030a 	orrs.w	r3, r3, sl
 801466a:	ee3d db47 	vsub.f64	d13, d13, d7
 801466e:	d03c      	beq.n	80146ea <_strtod_l+0xb1a>
 8014670:	eeb4 dbca 	vcmpe.f64	d13, d10
 8014674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014678:	f53f acf0 	bmi.w	801405c <_strtod_l+0x48c>
 801467c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8014680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014684:	dd98      	ble.n	80145b8 <_strtod_l+0x9e8>
 8014686:	e4e9      	b.n	801405c <_strtod_l+0x48c>
 8014688:	9804      	ldr	r0, [sp, #16]
 801468a:	b1f0      	cbz	r0, 80146ca <_strtod_l+0xafa>
 801468c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8014690:	d81b      	bhi.n	80146ca <_strtod_l+0xafa>
 8014692:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014718 <_strtod_l+0xb48>
 8014696:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801469e:	d811      	bhi.n	80146c4 <_strtod_l+0xaf4>
 80146a0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80146a4:	ee1d 3a10 	vmov	r3, s26
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	bf38      	it	cc
 80146ac:	2301      	movcc	r3, #1
 80146ae:	ee0d 3a10 	vmov	s26, r3
 80146b2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80146b6:	f1ba 0f00 	cmp.w	sl, #0
 80146ba:	d113      	bne.n	80146e4 <_strtod_l+0xb14>
 80146bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80146c0:	ec53 2b17 	vmov	r2, r3, d7
 80146c4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80146c8:	1a43      	subs	r3, r0, r1
 80146ca:	eeb0 0b48 	vmov.f64	d0, d8
 80146ce:	ec43 2b1c 	vmov	d12, r2, r3
 80146d2:	910a      	str	r1, [sp, #40]	; 0x28
 80146d4:	f001 fdb6 	bl	8016244 <__ulp>
 80146d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146da:	eeac 8b00 	vfma.f64	d8, d12, d0
 80146de:	ec59 8b18 	vmov	r8, r9, d8
 80146e2:	e7ab      	b.n	801463c <_strtod_l+0xa6c>
 80146e4:	eeb0 7b4d 	vmov.f64	d7, d13
 80146e8:	e7ea      	b.n	80146c0 <_strtod_l+0xaf0>
 80146ea:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80146ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f2:	f57f af61 	bpl.w	80145b8 <_strtod_l+0x9e8>
 80146f6:	e4b1      	b.n	801405c <_strtod_l+0x48c>
 80146f8:	2300      	movs	r3, #0
 80146fa:	9308      	str	r3, [sp, #32]
 80146fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014700:	6013      	str	r3, [r2, #0]
 8014702:	f7ff baad 	b.w	8013c60 <_strtod_l+0x90>
 8014706:	2a65      	cmp	r2, #101	; 0x65
 8014708:	f43f ab9f 	beq.w	8013e4a <_strtod_l+0x27a>
 801470c:	2a45      	cmp	r2, #69	; 0x45
 801470e:	f43f ab9c 	beq.w	8013e4a <_strtod_l+0x27a>
 8014712:	2101      	movs	r1, #1
 8014714:	f7ff bbd4 	b.w	8013ec0 <_strtod_l+0x2f0>
 8014718:	ffc00000 	.word	0xffc00000
 801471c:	41dfffff 	.word	0x41dfffff
 8014720:	000fffff 	.word	0x000fffff
 8014724:	7ff00000 	.word	0x7ff00000
 8014728:	7fefffff 	.word	0x7fefffff
 801472c:	3ff00000 	.word	0x3ff00000
 8014730:	7c9fffff 	.word	0x7c9fffff
 8014734:	bff00000 	.word	0xbff00000
 8014738:	7fe00000 	.word	0x7fe00000

0801473c <_strtod_r>:
 801473c:	4b01      	ldr	r3, [pc, #4]	; (8014744 <_strtod_r+0x8>)
 801473e:	f7ff ba47 	b.w	8013bd0 <_strtod_l>
 8014742:	bf00      	nop
 8014744:	24000090 	.word	0x24000090

08014748 <_strtol_l.constprop.0>:
 8014748:	2b01      	cmp	r3, #1
 801474a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801474e:	d001      	beq.n	8014754 <_strtol_l.constprop.0+0xc>
 8014750:	2b24      	cmp	r3, #36	; 0x24
 8014752:	d906      	bls.n	8014762 <_strtol_l.constprop.0+0x1a>
 8014754:	f7fe fb40 	bl	8012dd8 <__errno>
 8014758:	2316      	movs	r3, #22
 801475a:	6003      	str	r3, [r0, #0]
 801475c:	2000      	movs	r0, #0
 801475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014762:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014848 <_strtol_l.constprop.0+0x100>
 8014766:	460d      	mov	r5, r1
 8014768:	462e      	mov	r6, r5
 801476a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801476e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014772:	f017 0708 	ands.w	r7, r7, #8
 8014776:	d1f7      	bne.n	8014768 <_strtol_l.constprop.0+0x20>
 8014778:	2c2d      	cmp	r4, #45	; 0x2d
 801477a:	d132      	bne.n	80147e2 <_strtol_l.constprop.0+0x9a>
 801477c:	782c      	ldrb	r4, [r5, #0]
 801477e:	2701      	movs	r7, #1
 8014780:	1cb5      	adds	r5, r6, #2
 8014782:	2b00      	cmp	r3, #0
 8014784:	d05b      	beq.n	801483e <_strtol_l.constprop.0+0xf6>
 8014786:	2b10      	cmp	r3, #16
 8014788:	d109      	bne.n	801479e <_strtol_l.constprop.0+0x56>
 801478a:	2c30      	cmp	r4, #48	; 0x30
 801478c:	d107      	bne.n	801479e <_strtol_l.constprop.0+0x56>
 801478e:	782c      	ldrb	r4, [r5, #0]
 8014790:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014794:	2c58      	cmp	r4, #88	; 0x58
 8014796:	d14d      	bne.n	8014834 <_strtol_l.constprop.0+0xec>
 8014798:	786c      	ldrb	r4, [r5, #1]
 801479a:	2310      	movs	r3, #16
 801479c:	3502      	adds	r5, #2
 801479e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80147a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80147a6:	f04f 0c00 	mov.w	ip, #0
 80147aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80147ae:	4666      	mov	r6, ip
 80147b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80147b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80147b8:	f1be 0f09 	cmp.w	lr, #9
 80147bc:	d816      	bhi.n	80147ec <_strtol_l.constprop.0+0xa4>
 80147be:	4674      	mov	r4, lr
 80147c0:	42a3      	cmp	r3, r4
 80147c2:	dd24      	ble.n	801480e <_strtol_l.constprop.0+0xc6>
 80147c4:	f1bc 0f00 	cmp.w	ip, #0
 80147c8:	db1e      	blt.n	8014808 <_strtol_l.constprop.0+0xc0>
 80147ca:	45b1      	cmp	r9, r6
 80147cc:	d31c      	bcc.n	8014808 <_strtol_l.constprop.0+0xc0>
 80147ce:	d101      	bne.n	80147d4 <_strtol_l.constprop.0+0x8c>
 80147d0:	45a2      	cmp	sl, r4
 80147d2:	db19      	blt.n	8014808 <_strtol_l.constprop.0+0xc0>
 80147d4:	fb06 4603 	mla	r6, r6, r3, r4
 80147d8:	f04f 0c01 	mov.w	ip, #1
 80147dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147e0:	e7e8      	b.n	80147b4 <_strtol_l.constprop.0+0x6c>
 80147e2:	2c2b      	cmp	r4, #43	; 0x2b
 80147e4:	bf04      	itt	eq
 80147e6:	782c      	ldrbeq	r4, [r5, #0]
 80147e8:	1cb5      	addeq	r5, r6, #2
 80147ea:	e7ca      	b.n	8014782 <_strtol_l.constprop.0+0x3a>
 80147ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80147f0:	f1be 0f19 	cmp.w	lr, #25
 80147f4:	d801      	bhi.n	80147fa <_strtol_l.constprop.0+0xb2>
 80147f6:	3c37      	subs	r4, #55	; 0x37
 80147f8:	e7e2      	b.n	80147c0 <_strtol_l.constprop.0+0x78>
 80147fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80147fe:	f1be 0f19 	cmp.w	lr, #25
 8014802:	d804      	bhi.n	801480e <_strtol_l.constprop.0+0xc6>
 8014804:	3c57      	subs	r4, #87	; 0x57
 8014806:	e7db      	b.n	80147c0 <_strtol_l.constprop.0+0x78>
 8014808:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801480c:	e7e6      	b.n	80147dc <_strtol_l.constprop.0+0x94>
 801480e:	f1bc 0f00 	cmp.w	ip, #0
 8014812:	da05      	bge.n	8014820 <_strtol_l.constprop.0+0xd8>
 8014814:	2322      	movs	r3, #34	; 0x22
 8014816:	6003      	str	r3, [r0, #0]
 8014818:	4646      	mov	r6, r8
 801481a:	b942      	cbnz	r2, 801482e <_strtol_l.constprop.0+0xe6>
 801481c:	4630      	mov	r0, r6
 801481e:	e79e      	b.n	801475e <_strtol_l.constprop.0+0x16>
 8014820:	b107      	cbz	r7, 8014824 <_strtol_l.constprop.0+0xdc>
 8014822:	4276      	negs	r6, r6
 8014824:	2a00      	cmp	r2, #0
 8014826:	d0f9      	beq.n	801481c <_strtol_l.constprop.0+0xd4>
 8014828:	f1bc 0f00 	cmp.w	ip, #0
 801482c:	d000      	beq.n	8014830 <_strtol_l.constprop.0+0xe8>
 801482e:	1e69      	subs	r1, r5, #1
 8014830:	6011      	str	r1, [r2, #0]
 8014832:	e7f3      	b.n	801481c <_strtol_l.constprop.0+0xd4>
 8014834:	2430      	movs	r4, #48	; 0x30
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1b1      	bne.n	801479e <_strtol_l.constprop.0+0x56>
 801483a:	2308      	movs	r3, #8
 801483c:	e7af      	b.n	801479e <_strtol_l.constprop.0+0x56>
 801483e:	2c30      	cmp	r4, #48	; 0x30
 8014840:	d0a5      	beq.n	801478e <_strtol_l.constprop.0+0x46>
 8014842:	230a      	movs	r3, #10
 8014844:	e7ab      	b.n	801479e <_strtol_l.constprop.0+0x56>
 8014846:	bf00      	nop
 8014848:	08017919 	.word	0x08017919

0801484c <_strtol_r>:
 801484c:	f7ff bf7c 	b.w	8014748 <_strtol_l.constprop.0>

08014850 <quorem>:
 8014850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	6903      	ldr	r3, [r0, #16]
 8014856:	690c      	ldr	r4, [r1, #16]
 8014858:	42a3      	cmp	r3, r4
 801485a:	4607      	mov	r7, r0
 801485c:	f2c0 8081 	blt.w	8014962 <quorem+0x112>
 8014860:	3c01      	subs	r4, #1
 8014862:	f101 0814 	add.w	r8, r1, #20
 8014866:	f100 0514 	add.w	r5, r0, #20
 801486a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801486e:	9301      	str	r3, [sp, #4]
 8014870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014878:	3301      	adds	r3, #1
 801487a:	429a      	cmp	r2, r3
 801487c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014884:	fbb2 f6f3 	udiv	r6, r2, r3
 8014888:	d331      	bcc.n	80148ee <quorem+0x9e>
 801488a:	f04f 0e00 	mov.w	lr, #0
 801488e:	4640      	mov	r0, r8
 8014890:	46ac      	mov	ip, r5
 8014892:	46f2      	mov	sl, lr
 8014894:	f850 2b04 	ldr.w	r2, [r0], #4
 8014898:	b293      	uxth	r3, r2
 801489a:	fb06 e303 	mla	r3, r6, r3, lr
 801489e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	ebaa 0303 	sub.w	r3, sl, r3
 80148a8:	f8dc a000 	ldr.w	sl, [ip]
 80148ac:	0c12      	lsrs	r2, r2, #16
 80148ae:	fa13 f38a 	uxtah	r3, r3, sl
 80148b2:	fb06 e202 	mla	r2, r6, r2, lr
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	9b00      	ldr	r3, [sp, #0]
 80148ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80148be:	b292      	uxth	r2, r2
 80148c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80148c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80148cc:	4581      	cmp	r9, r0
 80148ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148d2:	f84c 3b04 	str.w	r3, [ip], #4
 80148d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80148da:	d2db      	bcs.n	8014894 <quorem+0x44>
 80148dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80148e0:	b92b      	cbnz	r3, 80148ee <quorem+0x9e>
 80148e2:	9b01      	ldr	r3, [sp, #4]
 80148e4:	3b04      	subs	r3, #4
 80148e6:	429d      	cmp	r5, r3
 80148e8:	461a      	mov	r2, r3
 80148ea:	d32e      	bcc.n	801494a <quorem+0xfa>
 80148ec:	613c      	str	r4, [r7, #16]
 80148ee:	4638      	mov	r0, r7
 80148f0:	f001 fc02 	bl	80160f8 <__mcmp>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	db24      	blt.n	8014942 <quorem+0xf2>
 80148f8:	3601      	adds	r6, #1
 80148fa:	4628      	mov	r0, r5
 80148fc:	f04f 0c00 	mov.w	ip, #0
 8014900:	f858 2b04 	ldr.w	r2, [r8], #4
 8014904:	f8d0 e000 	ldr.w	lr, [r0]
 8014908:	b293      	uxth	r3, r2
 801490a:	ebac 0303 	sub.w	r3, ip, r3
 801490e:	0c12      	lsrs	r2, r2, #16
 8014910:	fa13 f38e 	uxtah	r3, r3, lr
 8014914:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801491c:	b29b      	uxth	r3, r3
 801491e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014922:	45c1      	cmp	r9, r8
 8014924:	f840 3b04 	str.w	r3, [r0], #4
 8014928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801492c:	d2e8      	bcs.n	8014900 <quorem+0xb0>
 801492e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014936:	b922      	cbnz	r2, 8014942 <quorem+0xf2>
 8014938:	3b04      	subs	r3, #4
 801493a:	429d      	cmp	r5, r3
 801493c:	461a      	mov	r2, r3
 801493e:	d30a      	bcc.n	8014956 <quorem+0x106>
 8014940:	613c      	str	r4, [r7, #16]
 8014942:	4630      	mov	r0, r6
 8014944:	b003      	add	sp, #12
 8014946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801494a:	6812      	ldr	r2, [r2, #0]
 801494c:	3b04      	subs	r3, #4
 801494e:	2a00      	cmp	r2, #0
 8014950:	d1cc      	bne.n	80148ec <quorem+0x9c>
 8014952:	3c01      	subs	r4, #1
 8014954:	e7c7      	b.n	80148e6 <quorem+0x96>
 8014956:	6812      	ldr	r2, [r2, #0]
 8014958:	3b04      	subs	r3, #4
 801495a:	2a00      	cmp	r2, #0
 801495c:	d1f0      	bne.n	8014940 <quorem+0xf0>
 801495e:	3c01      	subs	r4, #1
 8014960:	e7eb      	b.n	801493a <quorem+0xea>
 8014962:	2000      	movs	r0, #0
 8014964:	e7ee      	b.n	8014944 <quorem+0xf4>
	...

08014968 <_dtoa_r>:
 8014968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801496c:	ed2d 8b02 	vpush	{d8}
 8014970:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014972:	b091      	sub	sp, #68	; 0x44
 8014974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014978:	ec59 8b10 	vmov	r8, r9, d0
 801497c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801497e:	9106      	str	r1, [sp, #24]
 8014980:	4606      	mov	r6, r0
 8014982:	9208      	str	r2, [sp, #32]
 8014984:	930c      	str	r3, [sp, #48]	; 0x30
 8014986:	b975      	cbnz	r5, 80149a6 <_dtoa_r+0x3e>
 8014988:	2010      	movs	r0, #16
 801498a:	f001 f8cf 	bl	8015b2c <malloc>
 801498e:	4602      	mov	r2, r0
 8014990:	6270      	str	r0, [r6, #36]	; 0x24
 8014992:	b920      	cbnz	r0, 801499e <_dtoa_r+0x36>
 8014994:	4baa      	ldr	r3, [pc, #680]	; (8014c40 <_dtoa_r+0x2d8>)
 8014996:	21ea      	movs	r1, #234	; 0xea
 8014998:	48aa      	ldr	r0, [pc, #680]	; (8014c44 <_dtoa_r+0x2dc>)
 801499a:	f002 f82b 	bl	80169f4 <__assert_func>
 801499e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80149a2:	6005      	str	r5, [r0, #0]
 80149a4:	60c5      	str	r5, [r0, #12]
 80149a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80149a8:	6819      	ldr	r1, [r3, #0]
 80149aa:	b151      	cbz	r1, 80149c2 <_dtoa_r+0x5a>
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	604a      	str	r2, [r1, #4]
 80149b0:	2301      	movs	r3, #1
 80149b2:	4093      	lsls	r3, r2
 80149b4:	608b      	str	r3, [r1, #8]
 80149b6:	4630      	mov	r0, r6
 80149b8:	f001 f912 	bl	8015be0 <_Bfree>
 80149bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80149be:	2200      	movs	r2, #0
 80149c0:	601a      	str	r2, [r3, #0]
 80149c2:	f1b9 0300 	subs.w	r3, r9, #0
 80149c6:	bfbb      	ittet	lt
 80149c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80149cc:	9303      	strlt	r3, [sp, #12]
 80149ce:	2300      	movge	r3, #0
 80149d0:	2201      	movlt	r2, #1
 80149d2:	bfac      	ite	ge
 80149d4:	6023      	strge	r3, [r4, #0]
 80149d6:	6022      	strlt	r2, [r4, #0]
 80149d8:	4b9b      	ldr	r3, [pc, #620]	; (8014c48 <_dtoa_r+0x2e0>)
 80149da:	9c03      	ldr	r4, [sp, #12]
 80149dc:	43a3      	bics	r3, r4
 80149de:	d11c      	bne.n	8014a1a <_dtoa_r+0xb2>
 80149e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80149ec:	ea53 0308 	orrs.w	r3, r3, r8
 80149f0:	f000 84fd 	beq.w	80153ee <_dtoa_r+0xa86>
 80149f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80149f6:	b963      	cbnz	r3, 8014a12 <_dtoa_r+0xaa>
 80149f8:	4b94      	ldr	r3, [pc, #592]	; (8014c4c <_dtoa_r+0x2e4>)
 80149fa:	e01f      	b.n	8014a3c <_dtoa_r+0xd4>
 80149fc:	4b94      	ldr	r3, [pc, #592]	; (8014c50 <_dtoa_r+0x2e8>)
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	3308      	adds	r3, #8
 8014a02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014a04:	6013      	str	r3, [r2, #0]
 8014a06:	9801      	ldr	r0, [sp, #4]
 8014a08:	b011      	add	sp, #68	; 0x44
 8014a0a:	ecbd 8b02 	vpop	{d8}
 8014a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a12:	4b8e      	ldr	r3, [pc, #568]	; (8014c4c <_dtoa_r+0x2e4>)
 8014a14:	9301      	str	r3, [sp, #4]
 8014a16:	3303      	adds	r3, #3
 8014a18:	e7f3      	b.n	8014a02 <_dtoa_r+0x9a>
 8014a1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014a1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a26:	d10b      	bne.n	8014a40 <_dtoa_r+0xd8>
 8014a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	6013      	str	r3, [r2, #0]
 8014a2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	f000 84d9 	beq.w	80153e8 <_dtoa_r+0xa80>
 8014a36:	4887      	ldr	r0, [pc, #540]	; (8014c54 <_dtoa_r+0x2ec>)
 8014a38:	6018      	str	r0, [r3, #0]
 8014a3a:	1e43      	subs	r3, r0, #1
 8014a3c:	9301      	str	r3, [sp, #4]
 8014a3e:	e7e2      	b.n	8014a06 <_dtoa_r+0x9e>
 8014a40:	a90f      	add	r1, sp, #60	; 0x3c
 8014a42:	aa0e      	add	r2, sp, #56	; 0x38
 8014a44:	4630      	mov	r0, r6
 8014a46:	eeb0 0b48 	vmov.f64	d0, d8
 8014a4a:	f001 fc77 	bl	801633c <__d2b>
 8014a4e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014a52:	4605      	mov	r5, r0
 8014a54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014a56:	2900      	cmp	r1, #0
 8014a58:	d046      	beq.n	8014ae8 <_dtoa_r+0x180>
 8014a5a:	ee18 4a90 	vmov	r4, s17
 8014a5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014a62:	ec53 2b18 	vmov	r2, r3, d8
 8014a66:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014a6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014a72:	2400      	movs	r4, #0
 8014a74:	ec43 2b16 	vmov	d6, r2, r3
 8014a78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014a7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8014c28 <_dtoa_r+0x2c0>
 8014a80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014a84:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8014c30 <_dtoa_r+0x2c8>
 8014a88:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014a8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8014c38 <_dtoa_r+0x2d0>
 8014a90:	ee07 1a90 	vmov	s15, r1
 8014a94:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014a98:	eeb0 7b46 	vmov.f64	d7, d6
 8014a9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014aa0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014aa4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aac:	ee16 ba90 	vmov	fp, s13
 8014ab0:	940a      	str	r4, [sp, #40]	; 0x28
 8014ab2:	d508      	bpl.n	8014ac6 <_dtoa_r+0x15e>
 8014ab4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014ab8:	eeb4 6b47 	vcmp.f64	d6, d7
 8014abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac0:	bf18      	it	ne
 8014ac2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8014ac6:	f1bb 0f16 	cmp.w	fp, #22
 8014aca:	d82f      	bhi.n	8014b2c <_dtoa_r+0x1c4>
 8014acc:	4b62      	ldr	r3, [pc, #392]	; (8014c58 <_dtoa_r+0x2f0>)
 8014ace:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014ad2:	ed93 7b00 	vldr	d7, [r3]
 8014ad6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ade:	d501      	bpl.n	8014ae4 <_dtoa_r+0x17c>
 8014ae0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	e022      	b.n	8014b2e <_dtoa_r+0x1c6>
 8014ae8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014aea:	4401      	add	r1, r0
 8014aec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014af0:	2b20      	cmp	r3, #32
 8014af2:	bfc1      	itttt	gt
 8014af4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014af8:	fa04 f303 	lslgt.w	r3, r4, r3
 8014afc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014b00:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014b04:	bfd6      	itet	le
 8014b06:	f1c3 0320 	rsble	r3, r3, #32
 8014b0a:	ea43 0808 	orrgt.w	r8, r3, r8
 8014b0e:	fa08 f803 	lslle.w	r8, r8, r3
 8014b12:	ee07 8a90 	vmov	s15, r8
 8014b16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014b1a:	3901      	subs	r1, #1
 8014b1c:	ee17 4a90 	vmov	r4, s15
 8014b20:	ec53 2b17 	vmov	r2, r3, d7
 8014b24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014b28:	2401      	movs	r4, #1
 8014b2a:	e7a3      	b.n	8014a74 <_dtoa_r+0x10c>
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b30:	1a43      	subs	r3, r0, r1
 8014b32:	1e5a      	subs	r2, r3, #1
 8014b34:	bf45      	ittet	mi
 8014b36:	f1c3 0301 	rsbmi	r3, r3, #1
 8014b3a:	9304      	strmi	r3, [sp, #16]
 8014b3c:	2300      	movpl	r3, #0
 8014b3e:	2300      	movmi	r3, #0
 8014b40:	9205      	str	r2, [sp, #20]
 8014b42:	bf54      	ite	pl
 8014b44:	9304      	strpl	r3, [sp, #16]
 8014b46:	9305      	strmi	r3, [sp, #20]
 8014b48:	f1bb 0f00 	cmp.w	fp, #0
 8014b4c:	db18      	blt.n	8014b80 <_dtoa_r+0x218>
 8014b4e:	9b05      	ldr	r3, [sp, #20]
 8014b50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014b54:	445b      	add	r3, fp
 8014b56:	9305      	str	r3, [sp, #20]
 8014b58:	2300      	movs	r3, #0
 8014b5a:	9a06      	ldr	r2, [sp, #24]
 8014b5c:	2a09      	cmp	r2, #9
 8014b5e:	d849      	bhi.n	8014bf4 <_dtoa_r+0x28c>
 8014b60:	2a05      	cmp	r2, #5
 8014b62:	bfc4      	itt	gt
 8014b64:	3a04      	subgt	r2, #4
 8014b66:	9206      	strgt	r2, [sp, #24]
 8014b68:	9a06      	ldr	r2, [sp, #24]
 8014b6a:	f1a2 0202 	sub.w	r2, r2, #2
 8014b6e:	bfcc      	ite	gt
 8014b70:	2400      	movgt	r4, #0
 8014b72:	2401      	movle	r4, #1
 8014b74:	2a03      	cmp	r2, #3
 8014b76:	d848      	bhi.n	8014c0a <_dtoa_r+0x2a2>
 8014b78:	e8df f002 	tbb	[pc, r2]
 8014b7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014b80:	9b04      	ldr	r3, [sp, #16]
 8014b82:	2200      	movs	r2, #0
 8014b84:	eba3 030b 	sub.w	r3, r3, fp
 8014b88:	9304      	str	r3, [sp, #16]
 8014b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8014b8c:	f1cb 0300 	rsb	r3, fp, #0
 8014b90:	e7e3      	b.n	8014b5a <_dtoa_r+0x1f2>
 8014b92:	2200      	movs	r2, #0
 8014b94:	9207      	str	r2, [sp, #28]
 8014b96:	9a08      	ldr	r2, [sp, #32]
 8014b98:	2a00      	cmp	r2, #0
 8014b9a:	dc39      	bgt.n	8014c10 <_dtoa_r+0x2a8>
 8014b9c:	f04f 0a01 	mov.w	sl, #1
 8014ba0:	46d1      	mov	r9, sl
 8014ba2:	4652      	mov	r2, sl
 8014ba4:	f8cd a020 	str.w	sl, [sp, #32]
 8014ba8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8014baa:	2100      	movs	r1, #0
 8014bac:	6079      	str	r1, [r7, #4]
 8014bae:	2004      	movs	r0, #4
 8014bb0:	f100 0c14 	add.w	ip, r0, #20
 8014bb4:	4594      	cmp	ip, r2
 8014bb6:	6879      	ldr	r1, [r7, #4]
 8014bb8:	d92f      	bls.n	8014c1a <_dtoa_r+0x2b2>
 8014bba:	4630      	mov	r0, r6
 8014bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8014bbe:	f000 ffcf 	bl	8015b60 <_Balloc>
 8014bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bc4:	9001      	str	r0, [sp, #4]
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d149      	bne.n	8014c60 <_dtoa_r+0x2f8>
 8014bcc:	4b23      	ldr	r3, [pc, #140]	; (8014c5c <_dtoa_r+0x2f4>)
 8014bce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014bd2:	e6e1      	b.n	8014998 <_dtoa_r+0x30>
 8014bd4:	2201      	movs	r2, #1
 8014bd6:	e7dd      	b.n	8014b94 <_dtoa_r+0x22c>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	9207      	str	r2, [sp, #28]
 8014bdc:	9a08      	ldr	r2, [sp, #32]
 8014bde:	eb0b 0a02 	add.w	sl, fp, r2
 8014be2:	f10a 0901 	add.w	r9, sl, #1
 8014be6:	464a      	mov	r2, r9
 8014be8:	2a01      	cmp	r2, #1
 8014bea:	bfb8      	it	lt
 8014bec:	2201      	movlt	r2, #1
 8014bee:	e7db      	b.n	8014ba8 <_dtoa_r+0x240>
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	e7f2      	b.n	8014bda <_dtoa_r+0x272>
 8014bf4:	2401      	movs	r4, #1
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8014bfc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014c00:	2100      	movs	r1, #0
 8014c02:	46d1      	mov	r9, sl
 8014c04:	2212      	movs	r2, #18
 8014c06:	9108      	str	r1, [sp, #32]
 8014c08:	e7ce      	b.n	8014ba8 <_dtoa_r+0x240>
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	9207      	str	r2, [sp, #28]
 8014c0e:	e7f5      	b.n	8014bfc <_dtoa_r+0x294>
 8014c10:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014c14:	46d1      	mov	r9, sl
 8014c16:	4652      	mov	r2, sl
 8014c18:	e7c6      	b.n	8014ba8 <_dtoa_r+0x240>
 8014c1a:	3101      	adds	r1, #1
 8014c1c:	6079      	str	r1, [r7, #4]
 8014c1e:	0040      	lsls	r0, r0, #1
 8014c20:	e7c6      	b.n	8014bb0 <_dtoa_r+0x248>
 8014c22:	bf00      	nop
 8014c24:	f3af 8000 	nop.w
 8014c28:	636f4361 	.word	0x636f4361
 8014c2c:	3fd287a7 	.word	0x3fd287a7
 8014c30:	8b60c8b3 	.word	0x8b60c8b3
 8014c34:	3fc68a28 	.word	0x3fc68a28
 8014c38:	509f79fb 	.word	0x509f79fb
 8014c3c:	3fd34413 	.word	0x3fd34413
 8014c40:	08017a26 	.word	0x08017a26
 8014c44:	08017a3d 	.word	0x08017a3d
 8014c48:	7ff00000 	.word	0x7ff00000
 8014c4c:	08017a22 	.word	0x08017a22
 8014c50:	08017a19 	.word	0x08017a19
 8014c54:	0801789d 	.word	0x0801789d
 8014c58:	08017ba8 	.word	0x08017ba8
 8014c5c:	08017a98 	.word	0x08017a98
 8014c60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014c62:	9901      	ldr	r1, [sp, #4]
 8014c64:	6011      	str	r1, [r2, #0]
 8014c66:	f1b9 0f0e 	cmp.w	r9, #14
 8014c6a:	d86c      	bhi.n	8014d46 <_dtoa_r+0x3de>
 8014c6c:	2c00      	cmp	r4, #0
 8014c6e:	d06a      	beq.n	8014d46 <_dtoa_r+0x3de>
 8014c70:	f1bb 0f00 	cmp.w	fp, #0
 8014c74:	f340 80a0 	ble.w	8014db8 <_dtoa_r+0x450>
 8014c78:	49c1      	ldr	r1, [pc, #772]	; (8014f80 <_dtoa_r+0x618>)
 8014c7a:	f00b 020f 	and.w	r2, fp, #15
 8014c7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014c82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014c86:	ed92 7b00 	vldr	d7, [r2]
 8014c8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8014c8e:	f000 8087 	beq.w	8014da0 <_dtoa_r+0x438>
 8014c92:	4abc      	ldr	r2, [pc, #752]	; (8014f84 <_dtoa_r+0x61c>)
 8014c94:	ed92 6b08 	vldr	d6, [r2, #32]
 8014c98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014c9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014ca0:	f001 010f 	and.w	r1, r1, #15
 8014ca4:	2203      	movs	r2, #3
 8014ca6:	48b7      	ldr	r0, [pc, #732]	; (8014f84 <_dtoa_r+0x61c>)
 8014ca8:	2900      	cmp	r1, #0
 8014caa:	d17b      	bne.n	8014da4 <_dtoa_r+0x43c>
 8014cac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014cb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014cb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cba:	2900      	cmp	r1, #0
 8014cbc:	f000 80a2 	beq.w	8014e04 <_dtoa_r+0x49c>
 8014cc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014cc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd0:	f140 8098 	bpl.w	8014e04 <_dtoa_r+0x49c>
 8014cd4:	f1b9 0f00 	cmp.w	r9, #0
 8014cd8:	f000 8094 	beq.w	8014e04 <_dtoa_r+0x49c>
 8014cdc:	f1ba 0f00 	cmp.w	sl, #0
 8014ce0:	dd2f      	ble.n	8014d42 <_dtoa_r+0x3da>
 8014ce2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014ce6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014cea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cee:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8014cf2:	3201      	adds	r2, #1
 8014cf4:	4650      	mov	r0, sl
 8014cf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014cfa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014cfe:	ee07 2a90 	vmov	s15, r2
 8014d02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014d06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014d0a:	ee15 4a90 	vmov	r4, s11
 8014d0e:	ec52 1b15 	vmov	r1, r2, d5
 8014d12:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d177      	bne.n	8014e0a <_dtoa_r+0x4a2>
 8014d1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014d1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014d22:	ec42 1b17 	vmov	d7, r1, r2
 8014d26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2e:	f300 8263 	bgt.w	80151f8 <_dtoa_r+0x890>
 8014d32:	eeb1 7b47 	vneg.f64	d7, d7
 8014d36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3e:	f100 8258 	bmi.w	80151f2 <_dtoa_r+0x88a>
 8014d42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d48:	2a00      	cmp	r2, #0
 8014d4a:	f2c0 811d 	blt.w	8014f88 <_dtoa_r+0x620>
 8014d4e:	f1bb 0f0e 	cmp.w	fp, #14
 8014d52:	f300 8119 	bgt.w	8014f88 <_dtoa_r+0x620>
 8014d56:	4b8a      	ldr	r3, [pc, #552]	; (8014f80 <_dtoa_r+0x618>)
 8014d58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014d5c:	ed93 6b00 	vldr	d6, [r3]
 8014d60:	9b08      	ldr	r3, [sp, #32]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f280 80b7 	bge.w	8014ed6 <_dtoa_r+0x56e>
 8014d68:	f1b9 0f00 	cmp.w	r9, #0
 8014d6c:	f300 80b3 	bgt.w	8014ed6 <_dtoa_r+0x56e>
 8014d70:	f040 823f 	bne.w	80151f2 <_dtoa_r+0x88a>
 8014d74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014d78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d88:	464c      	mov	r4, r9
 8014d8a:	464f      	mov	r7, r9
 8014d8c:	f280 8215 	bge.w	80151ba <_dtoa_r+0x852>
 8014d90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d94:	2331      	movs	r3, #49	; 0x31
 8014d96:	f808 3b01 	strb.w	r3, [r8], #1
 8014d9a:	f10b 0b01 	add.w	fp, fp, #1
 8014d9e:	e211      	b.n	80151c4 <_dtoa_r+0x85c>
 8014da0:	2202      	movs	r2, #2
 8014da2:	e780      	b.n	8014ca6 <_dtoa_r+0x33e>
 8014da4:	07cc      	lsls	r4, r1, #31
 8014da6:	d504      	bpl.n	8014db2 <_dtoa_r+0x44a>
 8014da8:	ed90 6b00 	vldr	d6, [r0]
 8014dac:	3201      	adds	r2, #1
 8014dae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014db2:	1049      	asrs	r1, r1, #1
 8014db4:	3008      	adds	r0, #8
 8014db6:	e777      	b.n	8014ca8 <_dtoa_r+0x340>
 8014db8:	d022      	beq.n	8014e00 <_dtoa_r+0x498>
 8014dba:	f1cb 0100 	rsb	r1, fp, #0
 8014dbe:	4a70      	ldr	r2, [pc, #448]	; (8014f80 <_dtoa_r+0x618>)
 8014dc0:	f001 000f 	and.w	r0, r1, #15
 8014dc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014dc8:	ed92 7b00 	vldr	d7, [r2]
 8014dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014dd4:	486b      	ldr	r0, [pc, #428]	; (8014f84 <_dtoa_r+0x61c>)
 8014dd6:	1109      	asrs	r1, r1, #4
 8014dd8:	2400      	movs	r4, #0
 8014dda:	2202      	movs	r2, #2
 8014ddc:	b929      	cbnz	r1, 8014dea <_dtoa_r+0x482>
 8014dde:	2c00      	cmp	r4, #0
 8014de0:	f43f af6a 	beq.w	8014cb8 <_dtoa_r+0x350>
 8014de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014de8:	e766      	b.n	8014cb8 <_dtoa_r+0x350>
 8014dea:	07cf      	lsls	r7, r1, #31
 8014dec:	d505      	bpl.n	8014dfa <_dtoa_r+0x492>
 8014dee:	ed90 6b00 	vldr	d6, [r0]
 8014df2:	3201      	adds	r2, #1
 8014df4:	2401      	movs	r4, #1
 8014df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014dfa:	1049      	asrs	r1, r1, #1
 8014dfc:	3008      	adds	r0, #8
 8014dfe:	e7ed      	b.n	8014ddc <_dtoa_r+0x474>
 8014e00:	2202      	movs	r2, #2
 8014e02:	e759      	b.n	8014cb8 <_dtoa_r+0x350>
 8014e04:	465f      	mov	r7, fp
 8014e06:	4648      	mov	r0, r9
 8014e08:	e775      	b.n	8014cf6 <_dtoa_r+0x38e>
 8014e0a:	ec42 1b17 	vmov	d7, r1, r2
 8014e0e:	4a5c      	ldr	r2, [pc, #368]	; (8014f80 <_dtoa_r+0x618>)
 8014e10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014e14:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014e18:	9a01      	ldr	r2, [sp, #4]
 8014e1a:	1814      	adds	r4, r2, r0
 8014e1c:	9a07      	ldr	r2, [sp, #28]
 8014e1e:	b352      	cbz	r2, 8014e76 <_dtoa_r+0x50e>
 8014e20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014e24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014e28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014e30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014e34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014e38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014e3c:	ee14 2a90 	vmov	r2, s9
 8014e40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014e44:	3230      	adds	r2, #48	; 0x30
 8014e46:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014e4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e52:	f808 2b01 	strb.w	r2, [r8], #1
 8014e56:	d439      	bmi.n	8014ecc <_dtoa_r+0x564>
 8014e58:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014e5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e64:	d472      	bmi.n	8014f4c <_dtoa_r+0x5e4>
 8014e66:	45a0      	cmp	r8, r4
 8014e68:	f43f af6b 	beq.w	8014d42 <_dtoa_r+0x3da>
 8014e6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014e70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014e74:	e7e0      	b.n	8014e38 <_dtoa_r+0x4d0>
 8014e76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014e7e:	4621      	mov	r1, r4
 8014e80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014e84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014e88:	ee14 2a90 	vmov	r2, s9
 8014e8c:	3230      	adds	r2, #48	; 0x30
 8014e8e:	f808 2b01 	strb.w	r2, [r8], #1
 8014e92:	45a0      	cmp	r8, r4
 8014e94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014e98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014e9c:	d118      	bne.n	8014ed0 <_dtoa_r+0x568>
 8014e9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014ea2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014ea6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eae:	dc4d      	bgt.n	8014f4c <_dtoa_r+0x5e4>
 8014eb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014eb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ebc:	f57f af41 	bpl.w	8014d42 <_dtoa_r+0x3da>
 8014ec0:	4688      	mov	r8, r1
 8014ec2:	3901      	subs	r1, #1
 8014ec4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014ec8:	2b30      	cmp	r3, #48	; 0x30
 8014eca:	d0f9      	beq.n	8014ec0 <_dtoa_r+0x558>
 8014ecc:	46bb      	mov	fp, r7
 8014ece:	e02a      	b.n	8014f26 <_dtoa_r+0x5be>
 8014ed0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014ed4:	e7d6      	b.n	8014e84 <_dtoa_r+0x51c>
 8014ed6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014eda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014ede:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014ee2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014ee6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014eea:	ee15 3a10 	vmov	r3, s10
 8014eee:	3330      	adds	r3, #48	; 0x30
 8014ef0:	f808 3b01 	strb.w	r3, [r8], #1
 8014ef4:	9b01      	ldr	r3, [sp, #4]
 8014ef6:	eba8 0303 	sub.w	r3, r8, r3
 8014efa:	4599      	cmp	r9, r3
 8014efc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014f00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014f04:	d133      	bne.n	8014f6e <_dtoa_r+0x606>
 8014f06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014f0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f12:	dc1a      	bgt.n	8014f4a <_dtoa_r+0x5e2>
 8014f14:	eeb4 7b46 	vcmp.f64	d7, d6
 8014f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f1c:	d103      	bne.n	8014f26 <_dtoa_r+0x5be>
 8014f1e:	ee15 3a10 	vmov	r3, s10
 8014f22:	07d9      	lsls	r1, r3, #31
 8014f24:	d411      	bmi.n	8014f4a <_dtoa_r+0x5e2>
 8014f26:	4629      	mov	r1, r5
 8014f28:	4630      	mov	r0, r6
 8014f2a:	f000 fe59 	bl	8015be0 <_Bfree>
 8014f2e:	2300      	movs	r3, #0
 8014f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f32:	f888 3000 	strb.w	r3, [r8]
 8014f36:	f10b 0301 	add.w	r3, fp, #1
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f43f ad61 	beq.w	8014a06 <_dtoa_r+0x9e>
 8014f44:	f8c3 8000 	str.w	r8, [r3]
 8014f48:	e55d      	b.n	8014a06 <_dtoa_r+0x9e>
 8014f4a:	465f      	mov	r7, fp
 8014f4c:	4643      	mov	r3, r8
 8014f4e:	4698      	mov	r8, r3
 8014f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f54:	2a39      	cmp	r2, #57	; 0x39
 8014f56:	d106      	bne.n	8014f66 <_dtoa_r+0x5fe>
 8014f58:	9a01      	ldr	r2, [sp, #4]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d1f7      	bne.n	8014f4e <_dtoa_r+0x5e6>
 8014f5e:	9901      	ldr	r1, [sp, #4]
 8014f60:	2230      	movs	r2, #48	; 0x30
 8014f62:	3701      	adds	r7, #1
 8014f64:	700a      	strb	r2, [r1, #0]
 8014f66:	781a      	ldrb	r2, [r3, #0]
 8014f68:	3201      	adds	r2, #1
 8014f6a:	701a      	strb	r2, [r3, #0]
 8014f6c:	e7ae      	b.n	8014ecc <_dtoa_r+0x564>
 8014f6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014f72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7a:	d1b2      	bne.n	8014ee2 <_dtoa_r+0x57a>
 8014f7c:	e7d3      	b.n	8014f26 <_dtoa_r+0x5be>
 8014f7e:	bf00      	nop
 8014f80:	08017ba8 	.word	0x08017ba8
 8014f84:	08017b80 	.word	0x08017b80
 8014f88:	9907      	ldr	r1, [sp, #28]
 8014f8a:	2900      	cmp	r1, #0
 8014f8c:	f000 80d0 	beq.w	8015130 <_dtoa_r+0x7c8>
 8014f90:	9906      	ldr	r1, [sp, #24]
 8014f92:	2901      	cmp	r1, #1
 8014f94:	f300 80b4 	bgt.w	8015100 <_dtoa_r+0x798>
 8014f98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f9a:	2900      	cmp	r1, #0
 8014f9c:	f000 80ac 	beq.w	80150f8 <_dtoa_r+0x790>
 8014fa0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014fa4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014fa8:	461c      	mov	r4, r3
 8014faa:	930a      	str	r3, [sp, #40]	; 0x28
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	4413      	add	r3, r2
 8014fb0:	9304      	str	r3, [sp, #16]
 8014fb2:	9b05      	ldr	r3, [sp, #20]
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	4630      	mov	r0, r6
 8014fba:	9305      	str	r3, [sp, #20]
 8014fbc:	f000 ff12 	bl	8015de4 <__i2b>
 8014fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fc2:	4607      	mov	r7, r0
 8014fc4:	f1b8 0f00 	cmp.w	r8, #0
 8014fc8:	dd0d      	ble.n	8014fe6 <_dtoa_r+0x67e>
 8014fca:	9a05      	ldr	r2, [sp, #20]
 8014fcc:	2a00      	cmp	r2, #0
 8014fce:	dd0a      	ble.n	8014fe6 <_dtoa_r+0x67e>
 8014fd0:	4542      	cmp	r2, r8
 8014fd2:	9904      	ldr	r1, [sp, #16]
 8014fd4:	bfa8      	it	ge
 8014fd6:	4642      	movge	r2, r8
 8014fd8:	1a89      	subs	r1, r1, r2
 8014fda:	9104      	str	r1, [sp, #16]
 8014fdc:	9905      	ldr	r1, [sp, #20]
 8014fde:	eba8 0802 	sub.w	r8, r8, r2
 8014fe2:	1a8a      	subs	r2, r1, r2
 8014fe4:	9205      	str	r2, [sp, #20]
 8014fe6:	b303      	cbz	r3, 801502a <_dtoa_r+0x6c2>
 8014fe8:	9a07      	ldr	r2, [sp, #28]
 8014fea:	2a00      	cmp	r2, #0
 8014fec:	f000 80a5 	beq.w	801513a <_dtoa_r+0x7d2>
 8014ff0:	2c00      	cmp	r4, #0
 8014ff2:	dd13      	ble.n	801501c <_dtoa_r+0x6b4>
 8014ff4:	4639      	mov	r1, r7
 8014ff6:	4622      	mov	r2, r4
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8014ffc:	f000 ffb2 	bl	8015f64 <__pow5mult>
 8015000:	462a      	mov	r2, r5
 8015002:	4601      	mov	r1, r0
 8015004:	4607      	mov	r7, r0
 8015006:	4630      	mov	r0, r6
 8015008:	f000 ff02 	bl	8015e10 <__multiply>
 801500c:	4629      	mov	r1, r5
 801500e:	900a      	str	r0, [sp, #40]	; 0x28
 8015010:	4630      	mov	r0, r6
 8015012:	f000 fde5 	bl	8015be0 <_Bfree>
 8015016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801501a:	4615      	mov	r5, r2
 801501c:	1b1a      	subs	r2, r3, r4
 801501e:	d004      	beq.n	801502a <_dtoa_r+0x6c2>
 8015020:	4629      	mov	r1, r5
 8015022:	4630      	mov	r0, r6
 8015024:	f000 ff9e 	bl	8015f64 <__pow5mult>
 8015028:	4605      	mov	r5, r0
 801502a:	2101      	movs	r1, #1
 801502c:	4630      	mov	r0, r6
 801502e:	f000 fed9 	bl	8015de4 <__i2b>
 8015032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015034:	2b00      	cmp	r3, #0
 8015036:	4604      	mov	r4, r0
 8015038:	f340 8081 	ble.w	801513e <_dtoa_r+0x7d6>
 801503c:	461a      	mov	r2, r3
 801503e:	4601      	mov	r1, r0
 8015040:	4630      	mov	r0, r6
 8015042:	f000 ff8f 	bl	8015f64 <__pow5mult>
 8015046:	9b06      	ldr	r3, [sp, #24]
 8015048:	2b01      	cmp	r3, #1
 801504a:	4604      	mov	r4, r0
 801504c:	dd7a      	ble.n	8015144 <_dtoa_r+0x7dc>
 801504e:	2300      	movs	r3, #0
 8015050:	930a      	str	r3, [sp, #40]	; 0x28
 8015052:	6922      	ldr	r2, [r4, #16]
 8015054:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015058:	6910      	ldr	r0, [r2, #16]
 801505a:	f000 fe73 	bl	8015d44 <__hi0bits>
 801505e:	f1c0 0020 	rsb	r0, r0, #32
 8015062:	9b05      	ldr	r3, [sp, #20]
 8015064:	4418      	add	r0, r3
 8015066:	f010 001f 	ands.w	r0, r0, #31
 801506a:	f000 808c 	beq.w	8015186 <_dtoa_r+0x81e>
 801506e:	f1c0 0220 	rsb	r2, r0, #32
 8015072:	2a04      	cmp	r2, #4
 8015074:	f340 8085 	ble.w	8015182 <_dtoa_r+0x81a>
 8015078:	f1c0 001c 	rsb	r0, r0, #28
 801507c:	9b04      	ldr	r3, [sp, #16]
 801507e:	4403      	add	r3, r0
 8015080:	9304      	str	r3, [sp, #16]
 8015082:	9b05      	ldr	r3, [sp, #20]
 8015084:	4403      	add	r3, r0
 8015086:	4480      	add	r8, r0
 8015088:	9305      	str	r3, [sp, #20]
 801508a:	9b04      	ldr	r3, [sp, #16]
 801508c:	2b00      	cmp	r3, #0
 801508e:	dd05      	ble.n	801509c <_dtoa_r+0x734>
 8015090:	4629      	mov	r1, r5
 8015092:	461a      	mov	r2, r3
 8015094:	4630      	mov	r0, r6
 8015096:	f000 ffbf 	bl	8016018 <__lshift>
 801509a:	4605      	mov	r5, r0
 801509c:	9b05      	ldr	r3, [sp, #20]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	dd05      	ble.n	80150ae <_dtoa_r+0x746>
 80150a2:	4621      	mov	r1, r4
 80150a4:	461a      	mov	r2, r3
 80150a6:	4630      	mov	r0, r6
 80150a8:	f000 ffb6 	bl	8016018 <__lshift>
 80150ac:	4604      	mov	r4, r0
 80150ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d06a      	beq.n	801518a <_dtoa_r+0x822>
 80150b4:	4621      	mov	r1, r4
 80150b6:	4628      	mov	r0, r5
 80150b8:	f001 f81e 	bl	80160f8 <__mcmp>
 80150bc:	2800      	cmp	r0, #0
 80150be:	da64      	bge.n	801518a <_dtoa_r+0x822>
 80150c0:	2300      	movs	r3, #0
 80150c2:	4629      	mov	r1, r5
 80150c4:	220a      	movs	r2, #10
 80150c6:	4630      	mov	r0, r6
 80150c8:	f000 fdac 	bl	8015c24 <__multadd>
 80150cc:	9b07      	ldr	r3, [sp, #28]
 80150ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80150d2:	4605      	mov	r5, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f000 8191 	beq.w	80153fc <_dtoa_r+0xa94>
 80150da:	4639      	mov	r1, r7
 80150dc:	2300      	movs	r3, #0
 80150de:	220a      	movs	r2, #10
 80150e0:	4630      	mov	r0, r6
 80150e2:	f000 fd9f 	bl	8015c24 <__multadd>
 80150e6:	f1ba 0f00 	cmp.w	sl, #0
 80150ea:	4607      	mov	r7, r0
 80150ec:	f300 808d 	bgt.w	801520a <_dtoa_r+0x8a2>
 80150f0:	9b06      	ldr	r3, [sp, #24]
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	dc50      	bgt.n	8015198 <_dtoa_r+0x830>
 80150f6:	e088      	b.n	801520a <_dtoa_r+0x8a2>
 80150f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80150fe:	e751      	b.n	8014fa4 <_dtoa_r+0x63c>
 8015100:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8015104:	42a3      	cmp	r3, r4
 8015106:	bfbf      	itttt	lt
 8015108:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801510a:	1ae3      	sublt	r3, r4, r3
 801510c:	18d2      	addlt	r2, r2, r3
 801510e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015110:	bfb6      	itet	lt
 8015112:	4623      	movlt	r3, r4
 8015114:	1b1c      	subge	r4, r3, r4
 8015116:	2400      	movlt	r4, #0
 8015118:	f1b9 0f00 	cmp.w	r9, #0
 801511c:	bfb5      	itete	lt
 801511e:	9a04      	ldrlt	r2, [sp, #16]
 8015120:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015124:	eba2 0809 	sublt.w	r8, r2, r9
 8015128:	464a      	movge	r2, r9
 801512a:	bfb8      	it	lt
 801512c:	2200      	movlt	r2, #0
 801512e:	e73c      	b.n	8014faa <_dtoa_r+0x642>
 8015130:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015134:	9f07      	ldr	r7, [sp, #28]
 8015136:	461c      	mov	r4, r3
 8015138:	e744      	b.n	8014fc4 <_dtoa_r+0x65c>
 801513a:	461a      	mov	r2, r3
 801513c:	e770      	b.n	8015020 <_dtoa_r+0x6b8>
 801513e:	9b06      	ldr	r3, [sp, #24]
 8015140:	2b01      	cmp	r3, #1
 8015142:	dc18      	bgt.n	8015176 <_dtoa_r+0x80e>
 8015144:	9b02      	ldr	r3, [sp, #8]
 8015146:	b9b3      	cbnz	r3, 8015176 <_dtoa_r+0x80e>
 8015148:	9b03      	ldr	r3, [sp, #12]
 801514a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801514e:	b9a2      	cbnz	r2, 801517a <_dtoa_r+0x812>
 8015150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015154:	0d12      	lsrs	r2, r2, #20
 8015156:	0512      	lsls	r2, r2, #20
 8015158:	b18a      	cbz	r2, 801517e <_dtoa_r+0x816>
 801515a:	9b04      	ldr	r3, [sp, #16]
 801515c:	3301      	adds	r3, #1
 801515e:	9304      	str	r3, [sp, #16]
 8015160:	9b05      	ldr	r3, [sp, #20]
 8015162:	3301      	adds	r3, #1
 8015164:	9305      	str	r3, [sp, #20]
 8015166:	2301      	movs	r3, #1
 8015168:	930a      	str	r3, [sp, #40]	; 0x28
 801516a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516c:	2b00      	cmp	r3, #0
 801516e:	f47f af70 	bne.w	8015052 <_dtoa_r+0x6ea>
 8015172:	2001      	movs	r0, #1
 8015174:	e775      	b.n	8015062 <_dtoa_r+0x6fa>
 8015176:	2300      	movs	r3, #0
 8015178:	e7f6      	b.n	8015168 <_dtoa_r+0x800>
 801517a:	9b02      	ldr	r3, [sp, #8]
 801517c:	e7f4      	b.n	8015168 <_dtoa_r+0x800>
 801517e:	920a      	str	r2, [sp, #40]	; 0x28
 8015180:	e7f3      	b.n	801516a <_dtoa_r+0x802>
 8015182:	d082      	beq.n	801508a <_dtoa_r+0x722>
 8015184:	4610      	mov	r0, r2
 8015186:	301c      	adds	r0, #28
 8015188:	e778      	b.n	801507c <_dtoa_r+0x714>
 801518a:	f1b9 0f00 	cmp.w	r9, #0
 801518e:	dc37      	bgt.n	8015200 <_dtoa_r+0x898>
 8015190:	9b06      	ldr	r3, [sp, #24]
 8015192:	2b02      	cmp	r3, #2
 8015194:	dd34      	ble.n	8015200 <_dtoa_r+0x898>
 8015196:	46ca      	mov	sl, r9
 8015198:	f1ba 0f00 	cmp.w	sl, #0
 801519c:	d10d      	bne.n	80151ba <_dtoa_r+0x852>
 801519e:	4621      	mov	r1, r4
 80151a0:	4653      	mov	r3, sl
 80151a2:	2205      	movs	r2, #5
 80151a4:	4630      	mov	r0, r6
 80151a6:	f000 fd3d 	bl	8015c24 <__multadd>
 80151aa:	4601      	mov	r1, r0
 80151ac:	4604      	mov	r4, r0
 80151ae:	4628      	mov	r0, r5
 80151b0:	f000 ffa2 	bl	80160f8 <__mcmp>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	f73f adeb 	bgt.w	8014d90 <_dtoa_r+0x428>
 80151ba:	9b08      	ldr	r3, [sp, #32]
 80151bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151c0:	ea6f 0b03 	mvn.w	fp, r3
 80151c4:	f04f 0900 	mov.w	r9, #0
 80151c8:	4621      	mov	r1, r4
 80151ca:	4630      	mov	r0, r6
 80151cc:	f000 fd08 	bl	8015be0 <_Bfree>
 80151d0:	2f00      	cmp	r7, #0
 80151d2:	f43f aea8 	beq.w	8014f26 <_dtoa_r+0x5be>
 80151d6:	f1b9 0f00 	cmp.w	r9, #0
 80151da:	d005      	beq.n	80151e8 <_dtoa_r+0x880>
 80151dc:	45b9      	cmp	r9, r7
 80151de:	d003      	beq.n	80151e8 <_dtoa_r+0x880>
 80151e0:	4649      	mov	r1, r9
 80151e2:	4630      	mov	r0, r6
 80151e4:	f000 fcfc 	bl	8015be0 <_Bfree>
 80151e8:	4639      	mov	r1, r7
 80151ea:	4630      	mov	r0, r6
 80151ec:	f000 fcf8 	bl	8015be0 <_Bfree>
 80151f0:	e699      	b.n	8014f26 <_dtoa_r+0x5be>
 80151f2:	2400      	movs	r4, #0
 80151f4:	4627      	mov	r7, r4
 80151f6:	e7e0      	b.n	80151ba <_dtoa_r+0x852>
 80151f8:	46bb      	mov	fp, r7
 80151fa:	4604      	mov	r4, r0
 80151fc:	4607      	mov	r7, r0
 80151fe:	e5c7      	b.n	8014d90 <_dtoa_r+0x428>
 8015200:	9b07      	ldr	r3, [sp, #28]
 8015202:	46ca      	mov	sl, r9
 8015204:	2b00      	cmp	r3, #0
 8015206:	f000 8100 	beq.w	801540a <_dtoa_r+0xaa2>
 801520a:	f1b8 0f00 	cmp.w	r8, #0
 801520e:	dd05      	ble.n	801521c <_dtoa_r+0x8b4>
 8015210:	4639      	mov	r1, r7
 8015212:	4642      	mov	r2, r8
 8015214:	4630      	mov	r0, r6
 8015216:	f000 feff 	bl	8016018 <__lshift>
 801521a:	4607      	mov	r7, r0
 801521c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801521e:	2b00      	cmp	r3, #0
 8015220:	d05d      	beq.n	80152de <_dtoa_r+0x976>
 8015222:	6879      	ldr	r1, [r7, #4]
 8015224:	4630      	mov	r0, r6
 8015226:	f000 fc9b 	bl	8015b60 <_Balloc>
 801522a:	4680      	mov	r8, r0
 801522c:	b928      	cbnz	r0, 801523a <_dtoa_r+0x8d2>
 801522e:	4b82      	ldr	r3, [pc, #520]	; (8015438 <_dtoa_r+0xad0>)
 8015230:	4602      	mov	r2, r0
 8015232:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015236:	f7ff bbaf 	b.w	8014998 <_dtoa_r+0x30>
 801523a:	693a      	ldr	r2, [r7, #16]
 801523c:	3202      	adds	r2, #2
 801523e:	0092      	lsls	r2, r2, #2
 8015240:	f107 010c 	add.w	r1, r7, #12
 8015244:	300c      	adds	r0, #12
 8015246:	f7fd fdf1 	bl	8012e2c <memcpy>
 801524a:	2201      	movs	r2, #1
 801524c:	4641      	mov	r1, r8
 801524e:	4630      	mov	r0, r6
 8015250:	f000 fee2 	bl	8016018 <__lshift>
 8015254:	9b01      	ldr	r3, [sp, #4]
 8015256:	3301      	adds	r3, #1
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	9b01      	ldr	r3, [sp, #4]
 801525c:	4453      	add	r3, sl
 801525e:	9308      	str	r3, [sp, #32]
 8015260:	9b02      	ldr	r3, [sp, #8]
 8015262:	f003 0301 	and.w	r3, r3, #1
 8015266:	46b9      	mov	r9, r7
 8015268:	9307      	str	r3, [sp, #28]
 801526a:	4607      	mov	r7, r0
 801526c:	9b04      	ldr	r3, [sp, #16]
 801526e:	4621      	mov	r1, r4
 8015270:	3b01      	subs	r3, #1
 8015272:	4628      	mov	r0, r5
 8015274:	9302      	str	r3, [sp, #8]
 8015276:	f7ff faeb 	bl	8014850 <quorem>
 801527a:	4603      	mov	r3, r0
 801527c:	3330      	adds	r3, #48	; 0x30
 801527e:	9005      	str	r0, [sp, #20]
 8015280:	4649      	mov	r1, r9
 8015282:	4628      	mov	r0, r5
 8015284:	9309      	str	r3, [sp, #36]	; 0x24
 8015286:	f000 ff37 	bl	80160f8 <__mcmp>
 801528a:	463a      	mov	r2, r7
 801528c:	4682      	mov	sl, r0
 801528e:	4621      	mov	r1, r4
 8015290:	4630      	mov	r0, r6
 8015292:	f000 ff4d 	bl	8016130 <__mdiff>
 8015296:	68c2      	ldr	r2, [r0, #12]
 8015298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801529a:	4680      	mov	r8, r0
 801529c:	bb0a      	cbnz	r2, 80152e2 <_dtoa_r+0x97a>
 801529e:	4601      	mov	r1, r0
 80152a0:	4628      	mov	r0, r5
 80152a2:	f000 ff29 	bl	80160f8 <__mcmp>
 80152a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a8:	4602      	mov	r2, r0
 80152aa:	4641      	mov	r1, r8
 80152ac:	4630      	mov	r0, r6
 80152ae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80152b2:	f000 fc95 	bl	8015be0 <_Bfree>
 80152b6:	9b06      	ldr	r3, [sp, #24]
 80152b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80152be:	ea43 0102 	orr.w	r1, r3, r2
 80152c2:	9b07      	ldr	r3, [sp, #28]
 80152c4:	430b      	orrs	r3, r1
 80152c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c8:	d10d      	bne.n	80152e6 <_dtoa_r+0x97e>
 80152ca:	2b39      	cmp	r3, #57	; 0x39
 80152cc:	d029      	beq.n	8015322 <_dtoa_r+0x9ba>
 80152ce:	f1ba 0f00 	cmp.w	sl, #0
 80152d2:	dd01      	ble.n	80152d8 <_dtoa_r+0x970>
 80152d4:	9b05      	ldr	r3, [sp, #20]
 80152d6:	3331      	adds	r3, #49	; 0x31
 80152d8:	9a02      	ldr	r2, [sp, #8]
 80152da:	7013      	strb	r3, [r2, #0]
 80152dc:	e774      	b.n	80151c8 <_dtoa_r+0x860>
 80152de:	4638      	mov	r0, r7
 80152e0:	e7b8      	b.n	8015254 <_dtoa_r+0x8ec>
 80152e2:	2201      	movs	r2, #1
 80152e4:	e7e1      	b.n	80152aa <_dtoa_r+0x942>
 80152e6:	f1ba 0f00 	cmp.w	sl, #0
 80152ea:	db06      	blt.n	80152fa <_dtoa_r+0x992>
 80152ec:	9906      	ldr	r1, [sp, #24]
 80152ee:	ea41 0a0a 	orr.w	sl, r1, sl
 80152f2:	9907      	ldr	r1, [sp, #28]
 80152f4:	ea5a 0101 	orrs.w	r1, sl, r1
 80152f8:	d120      	bne.n	801533c <_dtoa_r+0x9d4>
 80152fa:	2a00      	cmp	r2, #0
 80152fc:	ddec      	ble.n	80152d8 <_dtoa_r+0x970>
 80152fe:	4629      	mov	r1, r5
 8015300:	2201      	movs	r2, #1
 8015302:	4630      	mov	r0, r6
 8015304:	9304      	str	r3, [sp, #16]
 8015306:	f000 fe87 	bl	8016018 <__lshift>
 801530a:	4621      	mov	r1, r4
 801530c:	4605      	mov	r5, r0
 801530e:	f000 fef3 	bl	80160f8 <__mcmp>
 8015312:	2800      	cmp	r0, #0
 8015314:	9b04      	ldr	r3, [sp, #16]
 8015316:	dc02      	bgt.n	801531e <_dtoa_r+0x9b6>
 8015318:	d1de      	bne.n	80152d8 <_dtoa_r+0x970>
 801531a:	07da      	lsls	r2, r3, #31
 801531c:	d5dc      	bpl.n	80152d8 <_dtoa_r+0x970>
 801531e:	2b39      	cmp	r3, #57	; 0x39
 8015320:	d1d8      	bne.n	80152d4 <_dtoa_r+0x96c>
 8015322:	9a02      	ldr	r2, [sp, #8]
 8015324:	2339      	movs	r3, #57	; 0x39
 8015326:	7013      	strb	r3, [r2, #0]
 8015328:	4643      	mov	r3, r8
 801532a:	4698      	mov	r8, r3
 801532c:	3b01      	subs	r3, #1
 801532e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015332:	2a39      	cmp	r2, #57	; 0x39
 8015334:	d051      	beq.n	80153da <_dtoa_r+0xa72>
 8015336:	3201      	adds	r2, #1
 8015338:	701a      	strb	r2, [r3, #0]
 801533a:	e745      	b.n	80151c8 <_dtoa_r+0x860>
 801533c:	2a00      	cmp	r2, #0
 801533e:	dd03      	ble.n	8015348 <_dtoa_r+0x9e0>
 8015340:	2b39      	cmp	r3, #57	; 0x39
 8015342:	d0ee      	beq.n	8015322 <_dtoa_r+0x9ba>
 8015344:	3301      	adds	r3, #1
 8015346:	e7c7      	b.n	80152d8 <_dtoa_r+0x970>
 8015348:	9a04      	ldr	r2, [sp, #16]
 801534a:	9908      	ldr	r1, [sp, #32]
 801534c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015350:	428a      	cmp	r2, r1
 8015352:	d02b      	beq.n	80153ac <_dtoa_r+0xa44>
 8015354:	4629      	mov	r1, r5
 8015356:	2300      	movs	r3, #0
 8015358:	220a      	movs	r2, #10
 801535a:	4630      	mov	r0, r6
 801535c:	f000 fc62 	bl	8015c24 <__multadd>
 8015360:	45b9      	cmp	r9, r7
 8015362:	4605      	mov	r5, r0
 8015364:	f04f 0300 	mov.w	r3, #0
 8015368:	f04f 020a 	mov.w	r2, #10
 801536c:	4649      	mov	r1, r9
 801536e:	4630      	mov	r0, r6
 8015370:	d107      	bne.n	8015382 <_dtoa_r+0xa1a>
 8015372:	f000 fc57 	bl	8015c24 <__multadd>
 8015376:	4681      	mov	r9, r0
 8015378:	4607      	mov	r7, r0
 801537a:	9b04      	ldr	r3, [sp, #16]
 801537c:	3301      	adds	r3, #1
 801537e:	9304      	str	r3, [sp, #16]
 8015380:	e774      	b.n	801526c <_dtoa_r+0x904>
 8015382:	f000 fc4f 	bl	8015c24 <__multadd>
 8015386:	4639      	mov	r1, r7
 8015388:	4681      	mov	r9, r0
 801538a:	2300      	movs	r3, #0
 801538c:	220a      	movs	r2, #10
 801538e:	4630      	mov	r0, r6
 8015390:	f000 fc48 	bl	8015c24 <__multadd>
 8015394:	4607      	mov	r7, r0
 8015396:	e7f0      	b.n	801537a <_dtoa_r+0xa12>
 8015398:	f1ba 0f00 	cmp.w	sl, #0
 801539c:	9a01      	ldr	r2, [sp, #4]
 801539e:	bfcc      	ite	gt
 80153a0:	46d0      	movgt	r8, sl
 80153a2:	f04f 0801 	movle.w	r8, #1
 80153a6:	4490      	add	r8, r2
 80153a8:	f04f 0900 	mov.w	r9, #0
 80153ac:	4629      	mov	r1, r5
 80153ae:	2201      	movs	r2, #1
 80153b0:	4630      	mov	r0, r6
 80153b2:	9302      	str	r3, [sp, #8]
 80153b4:	f000 fe30 	bl	8016018 <__lshift>
 80153b8:	4621      	mov	r1, r4
 80153ba:	4605      	mov	r5, r0
 80153bc:	f000 fe9c 	bl	80160f8 <__mcmp>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	dcb1      	bgt.n	8015328 <_dtoa_r+0x9c0>
 80153c4:	d102      	bne.n	80153cc <_dtoa_r+0xa64>
 80153c6:	9b02      	ldr	r3, [sp, #8]
 80153c8:	07db      	lsls	r3, r3, #31
 80153ca:	d4ad      	bmi.n	8015328 <_dtoa_r+0x9c0>
 80153cc:	4643      	mov	r3, r8
 80153ce:	4698      	mov	r8, r3
 80153d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153d4:	2a30      	cmp	r2, #48	; 0x30
 80153d6:	d0fa      	beq.n	80153ce <_dtoa_r+0xa66>
 80153d8:	e6f6      	b.n	80151c8 <_dtoa_r+0x860>
 80153da:	9a01      	ldr	r2, [sp, #4]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d1a4      	bne.n	801532a <_dtoa_r+0x9c2>
 80153e0:	f10b 0b01 	add.w	fp, fp, #1
 80153e4:	2331      	movs	r3, #49	; 0x31
 80153e6:	e778      	b.n	80152da <_dtoa_r+0x972>
 80153e8:	4b14      	ldr	r3, [pc, #80]	; (801543c <_dtoa_r+0xad4>)
 80153ea:	f7ff bb27 	b.w	8014a3c <_dtoa_r+0xd4>
 80153ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f47f ab03 	bne.w	80149fc <_dtoa_r+0x94>
 80153f6:	4b12      	ldr	r3, [pc, #72]	; (8015440 <_dtoa_r+0xad8>)
 80153f8:	f7ff bb20 	b.w	8014a3c <_dtoa_r+0xd4>
 80153fc:	f1ba 0f00 	cmp.w	sl, #0
 8015400:	dc03      	bgt.n	801540a <_dtoa_r+0xaa2>
 8015402:	9b06      	ldr	r3, [sp, #24]
 8015404:	2b02      	cmp	r3, #2
 8015406:	f73f aec7 	bgt.w	8015198 <_dtoa_r+0x830>
 801540a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801540e:	4621      	mov	r1, r4
 8015410:	4628      	mov	r0, r5
 8015412:	f7ff fa1d 	bl	8014850 <quorem>
 8015416:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801541a:	f808 3b01 	strb.w	r3, [r8], #1
 801541e:	9a01      	ldr	r2, [sp, #4]
 8015420:	eba8 0202 	sub.w	r2, r8, r2
 8015424:	4592      	cmp	sl, r2
 8015426:	ddb7      	ble.n	8015398 <_dtoa_r+0xa30>
 8015428:	4629      	mov	r1, r5
 801542a:	2300      	movs	r3, #0
 801542c:	220a      	movs	r2, #10
 801542e:	4630      	mov	r0, r6
 8015430:	f000 fbf8 	bl	8015c24 <__multadd>
 8015434:	4605      	mov	r5, r0
 8015436:	e7ea      	b.n	801540e <_dtoa_r+0xaa6>
 8015438:	08017a98 	.word	0x08017a98
 801543c:	0801789c 	.word	0x0801789c
 8015440:	08017a19 	.word	0x08017a19

08015444 <rshift>:
 8015444:	6903      	ldr	r3, [r0, #16]
 8015446:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801544a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801544e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015452:	f100 0414 	add.w	r4, r0, #20
 8015456:	dd45      	ble.n	80154e4 <rshift+0xa0>
 8015458:	f011 011f 	ands.w	r1, r1, #31
 801545c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015460:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015464:	d10c      	bne.n	8015480 <rshift+0x3c>
 8015466:	f100 0710 	add.w	r7, r0, #16
 801546a:	4629      	mov	r1, r5
 801546c:	42b1      	cmp	r1, r6
 801546e:	d334      	bcc.n	80154da <rshift+0x96>
 8015470:	1a9b      	subs	r3, r3, r2
 8015472:	009b      	lsls	r3, r3, #2
 8015474:	1eea      	subs	r2, r5, #3
 8015476:	4296      	cmp	r6, r2
 8015478:	bf38      	it	cc
 801547a:	2300      	movcc	r3, #0
 801547c:	4423      	add	r3, r4
 801547e:	e015      	b.n	80154ac <rshift+0x68>
 8015480:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015484:	f1c1 0820 	rsb	r8, r1, #32
 8015488:	40cf      	lsrs	r7, r1
 801548a:	f105 0e04 	add.w	lr, r5, #4
 801548e:	46a1      	mov	r9, r4
 8015490:	4576      	cmp	r6, lr
 8015492:	46f4      	mov	ip, lr
 8015494:	d815      	bhi.n	80154c2 <rshift+0x7e>
 8015496:	1a9a      	subs	r2, r3, r2
 8015498:	0092      	lsls	r2, r2, #2
 801549a:	3a04      	subs	r2, #4
 801549c:	3501      	adds	r5, #1
 801549e:	42ae      	cmp	r6, r5
 80154a0:	bf38      	it	cc
 80154a2:	2200      	movcc	r2, #0
 80154a4:	18a3      	adds	r3, r4, r2
 80154a6:	50a7      	str	r7, [r4, r2]
 80154a8:	b107      	cbz	r7, 80154ac <rshift+0x68>
 80154aa:	3304      	adds	r3, #4
 80154ac:	1b1a      	subs	r2, r3, r4
 80154ae:	42a3      	cmp	r3, r4
 80154b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80154b4:	bf08      	it	eq
 80154b6:	2300      	moveq	r3, #0
 80154b8:	6102      	str	r2, [r0, #16]
 80154ba:	bf08      	it	eq
 80154bc:	6143      	streq	r3, [r0, #20]
 80154be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154c2:	f8dc c000 	ldr.w	ip, [ip]
 80154c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80154ca:	ea4c 0707 	orr.w	r7, ip, r7
 80154ce:	f849 7b04 	str.w	r7, [r9], #4
 80154d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80154d6:	40cf      	lsrs	r7, r1
 80154d8:	e7da      	b.n	8015490 <rshift+0x4c>
 80154da:	f851 cb04 	ldr.w	ip, [r1], #4
 80154de:	f847 cf04 	str.w	ip, [r7, #4]!
 80154e2:	e7c3      	b.n	801546c <rshift+0x28>
 80154e4:	4623      	mov	r3, r4
 80154e6:	e7e1      	b.n	80154ac <rshift+0x68>

080154e8 <__hexdig_fun>:
 80154e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80154ec:	2b09      	cmp	r3, #9
 80154ee:	d802      	bhi.n	80154f6 <__hexdig_fun+0xe>
 80154f0:	3820      	subs	r0, #32
 80154f2:	b2c0      	uxtb	r0, r0
 80154f4:	4770      	bx	lr
 80154f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80154fa:	2b05      	cmp	r3, #5
 80154fc:	d801      	bhi.n	8015502 <__hexdig_fun+0x1a>
 80154fe:	3847      	subs	r0, #71	; 0x47
 8015500:	e7f7      	b.n	80154f2 <__hexdig_fun+0xa>
 8015502:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015506:	2b05      	cmp	r3, #5
 8015508:	d801      	bhi.n	801550e <__hexdig_fun+0x26>
 801550a:	3827      	subs	r0, #39	; 0x27
 801550c:	e7f1      	b.n	80154f2 <__hexdig_fun+0xa>
 801550e:	2000      	movs	r0, #0
 8015510:	4770      	bx	lr
	...

08015514 <__gethex>:
 8015514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015518:	ed2d 8b02 	vpush	{d8}
 801551c:	b089      	sub	sp, #36	; 0x24
 801551e:	ee08 0a10 	vmov	s16, r0
 8015522:	9304      	str	r3, [sp, #16]
 8015524:	4bb4      	ldr	r3, [pc, #720]	; (80157f8 <__gethex+0x2e4>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	468b      	mov	fp, r1
 801552e:	4690      	mov	r8, r2
 8015530:	f7ea fede 	bl	80002f0 <strlen>
 8015534:	9b01      	ldr	r3, [sp, #4]
 8015536:	f8db 2000 	ldr.w	r2, [fp]
 801553a:	4403      	add	r3, r0
 801553c:	4682      	mov	sl, r0
 801553e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015542:	9305      	str	r3, [sp, #20]
 8015544:	1c93      	adds	r3, r2, #2
 8015546:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801554a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801554e:	32fe      	adds	r2, #254	; 0xfe
 8015550:	18d1      	adds	r1, r2, r3
 8015552:	461f      	mov	r7, r3
 8015554:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015558:	9100      	str	r1, [sp, #0]
 801555a:	2830      	cmp	r0, #48	; 0x30
 801555c:	d0f8      	beq.n	8015550 <__gethex+0x3c>
 801555e:	f7ff ffc3 	bl	80154e8 <__hexdig_fun>
 8015562:	4604      	mov	r4, r0
 8015564:	2800      	cmp	r0, #0
 8015566:	d13a      	bne.n	80155de <__gethex+0xca>
 8015568:	9901      	ldr	r1, [sp, #4]
 801556a:	4652      	mov	r2, sl
 801556c:	4638      	mov	r0, r7
 801556e:	f001 fa1f 	bl	80169b0 <strncmp>
 8015572:	4605      	mov	r5, r0
 8015574:	2800      	cmp	r0, #0
 8015576:	d168      	bne.n	801564a <__gethex+0x136>
 8015578:	f817 000a 	ldrb.w	r0, [r7, sl]
 801557c:	eb07 060a 	add.w	r6, r7, sl
 8015580:	f7ff ffb2 	bl	80154e8 <__hexdig_fun>
 8015584:	2800      	cmp	r0, #0
 8015586:	d062      	beq.n	801564e <__gethex+0x13a>
 8015588:	4633      	mov	r3, r6
 801558a:	7818      	ldrb	r0, [r3, #0]
 801558c:	2830      	cmp	r0, #48	; 0x30
 801558e:	461f      	mov	r7, r3
 8015590:	f103 0301 	add.w	r3, r3, #1
 8015594:	d0f9      	beq.n	801558a <__gethex+0x76>
 8015596:	f7ff ffa7 	bl	80154e8 <__hexdig_fun>
 801559a:	2301      	movs	r3, #1
 801559c:	fab0 f480 	clz	r4, r0
 80155a0:	0964      	lsrs	r4, r4, #5
 80155a2:	4635      	mov	r5, r6
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	463a      	mov	r2, r7
 80155a8:	4616      	mov	r6, r2
 80155aa:	3201      	adds	r2, #1
 80155ac:	7830      	ldrb	r0, [r6, #0]
 80155ae:	f7ff ff9b 	bl	80154e8 <__hexdig_fun>
 80155b2:	2800      	cmp	r0, #0
 80155b4:	d1f8      	bne.n	80155a8 <__gethex+0x94>
 80155b6:	9901      	ldr	r1, [sp, #4]
 80155b8:	4652      	mov	r2, sl
 80155ba:	4630      	mov	r0, r6
 80155bc:	f001 f9f8 	bl	80169b0 <strncmp>
 80155c0:	b980      	cbnz	r0, 80155e4 <__gethex+0xd0>
 80155c2:	b94d      	cbnz	r5, 80155d8 <__gethex+0xc4>
 80155c4:	eb06 050a 	add.w	r5, r6, sl
 80155c8:	462a      	mov	r2, r5
 80155ca:	4616      	mov	r6, r2
 80155cc:	3201      	adds	r2, #1
 80155ce:	7830      	ldrb	r0, [r6, #0]
 80155d0:	f7ff ff8a 	bl	80154e8 <__hexdig_fun>
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d1f8      	bne.n	80155ca <__gethex+0xb6>
 80155d8:	1bad      	subs	r5, r5, r6
 80155da:	00ad      	lsls	r5, r5, #2
 80155dc:	e004      	b.n	80155e8 <__gethex+0xd4>
 80155de:	2400      	movs	r4, #0
 80155e0:	4625      	mov	r5, r4
 80155e2:	e7e0      	b.n	80155a6 <__gethex+0x92>
 80155e4:	2d00      	cmp	r5, #0
 80155e6:	d1f7      	bne.n	80155d8 <__gethex+0xc4>
 80155e8:	7833      	ldrb	r3, [r6, #0]
 80155ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80155ee:	2b50      	cmp	r3, #80	; 0x50
 80155f0:	d13b      	bne.n	801566a <__gethex+0x156>
 80155f2:	7873      	ldrb	r3, [r6, #1]
 80155f4:	2b2b      	cmp	r3, #43	; 0x2b
 80155f6:	d02c      	beq.n	8015652 <__gethex+0x13e>
 80155f8:	2b2d      	cmp	r3, #45	; 0x2d
 80155fa:	d02e      	beq.n	801565a <__gethex+0x146>
 80155fc:	1c71      	adds	r1, r6, #1
 80155fe:	f04f 0900 	mov.w	r9, #0
 8015602:	7808      	ldrb	r0, [r1, #0]
 8015604:	f7ff ff70 	bl	80154e8 <__hexdig_fun>
 8015608:	1e43      	subs	r3, r0, #1
 801560a:	b2db      	uxtb	r3, r3
 801560c:	2b18      	cmp	r3, #24
 801560e:	d82c      	bhi.n	801566a <__gethex+0x156>
 8015610:	f1a0 0210 	sub.w	r2, r0, #16
 8015614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015618:	f7ff ff66 	bl	80154e8 <__hexdig_fun>
 801561c:	1e43      	subs	r3, r0, #1
 801561e:	b2db      	uxtb	r3, r3
 8015620:	2b18      	cmp	r3, #24
 8015622:	d91d      	bls.n	8015660 <__gethex+0x14c>
 8015624:	f1b9 0f00 	cmp.w	r9, #0
 8015628:	d000      	beq.n	801562c <__gethex+0x118>
 801562a:	4252      	negs	r2, r2
 801562c:	4415      	add	r5, r2
 801562e:	f8cb 1000 	str.w	r1, [fp]
 8015632:	b1e4      	cbz	r4, 801566e <__gethex+0x15a>
 8015634:	9b00      	ldr	r3, [sp, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	bf14      	ite	ne
 801563a:	2700      	movne	r7, #0
 801563c:	2706      	moveq	r7, #6
 801563e:	4638      	mov	r0, r7
 8015640:	b009      	add	sp, #36	; 0x24
 8015642:	ecbd 8b02 	vpop	{d8}
 8015646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801564a:	463e      	mov	r6, r7
 801564c:	4625      	mov	r5, r4
 801564e:	2401      	movs	r4, #1
 8015650:	e7ca      	b.n	80155e8 <__gethex+0xd4>
 8015652:	f04f 0900 	mov.w	r9, #0
 8015656:	1cb1      	adds	r1, r6, #2
 8015658:	e7d3      	b.n	8015602 <__gethex+0xee>
 801565a:	f04f 0901 	mov.w	r9, #1
 801565e:	e7fa      	b.n	8015656 <__gethex+0x142>
 8015660:	230a      	movs	r3, #10
 8015662:	fb03 0202 	mla	r2, r3, r2, r0
 8015666:	3a10      	subs	r2, #16
 8015668:	e7d4      	b.n	8015614 <__gethex+0x100>
 801566a:	4631      	mov	r1, r6
 801566c:	e7df      	b.n	801562e <__gethex+0x11a>
 801566e:	1bf3      	subs	r3, r6, r7
 8015670:	3b01      	subs	r3, #1
 8015672:	4621      	mov	r1, r4
 8015674:	2b07      	cmp	r3, #7
 8015676:	dc0b      	bgt.n	8015690 <__gethex+0x17c>
 8015678:	ee18 0a10 	vmov	r0, s16
 801567c:	f000 fa70 	bl	8015b60 <_Balloc>
 8015680:	4604      	mov	r4, r0
 8015682:	b940      	cbnz	r0, 8015696 <__gethex+0x182>
 8015684:	4b5d      	ldr	r3, [pc, #372]	; (80157fc <__gethex+0x2e8>)
 8015686:	4602      	mov	r2, r0
 8015688:	21de      	movs	r1, #222	; 0xde
 801568a:	485d      	ldr	r0, [pc, #372]	; (8015800 <__gethex+0x2ec>)
 801568c:	f001 f9b2 	bl	80169f4 <__assert_func>
 8015690:	3101      	adds	r1, #1
 8015692:	105b      	asrs	r3, r3, #1
 8015694:	e7ee      	b.n	8015674 <__gethex+0x160>
 8015696:	f100 0914 	add.w	r9, r0, #20
 801569a:	f04f 0b00 	mov.w	fp, #0
 801569e:	f1ca 0301 	rsb	r3, sl, #1
 80156a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80156a6:	f8cd b000 	str.w	fp, [sp]
 80156aa:	9306      	str	r3, [sp, #24]
 80156ac:	42b7      	cmp	r7, r6
 80156ae:	d340      	bcc.n	8015732 <__gethex+0x21e>
 80156b0:	9802      	ldr	r0, [sp, #8]
 80156b2:	9b00      	ldr	r3, [sp, #0]
 80156b4:	f840 3b04 	str.w	r3, [r0], #4
 80156b8:	eba0 0009 	sub.w	r0, r0, r9
 80156bc:	1080      	asrs	r0, r0, #2
 80156be:	0146      	lsls	r6, r0, #5
 80156c0:	6120      	str	r0, [r4, #16]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f000 fb3e 	bl	8015d44 <__hi0bits>
 80156c8:	1a30      	subs	r0, r6, r0
 80156ca:	f8d8 6000 	ldr.w	r6, [r8]
 80156ce:	42b0      	cmp	r0, r6
 80156d0:	dd63      	ble.n	801579a <__gethex+0x286>
 80156d2:	1b87      	subs	r7, r0, r6
 80156d4:	4639      	mov	r1, r7
 80156d6:	4620      	mov	r0, r4
 80156d8:	f000 fedf 	bl	801649a <__any_on>
 80156dc:	4682      	mov	sl, r0
 80156de:	b1a8      	cbz	r0, 801570c <__gethex+0x1f8>
 80156e0:	1e7b      	subs	r3, r7, #1
 80156e2:	1159      	asrs	r1, r3, #5
 80156e4:	f003 021f 	and.w	r2, r3, #31
 80156e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80156ec:	f04f 0a01 	mov.w	sl, #1
 80156f0:	fa0a f202 	lsl.w	r2, sl, r2
 80156f4:	420a      	tst	r2, r1
 80156f6:	d009      	beq.n	801570c <__gethex+0x1f8>
 80156f8:	4553      	cmp	r3, sl
 80156fa:	dd05      	ble.n	8015708 <__gethex+0x1f4>
 80156fc:	1eb9      	subs	r1, r7, #2
 80156fe:	4620      	mov	r0, r4
 8015700:	f000 fecb 	bl	801649a <__any_on>
 8015704:	2800      	cmp	r0, #0
 8015706:	d145      	bne.n	8015794 <__gethex+0x280>
 8015708:	f04f 0a02 	mov.w	sl, #2
 801570c:	4639      	mov	r1, r7
 801570e:	4620      	mov	r0, r4
 8015710:	f7ff fe98 	bl	8015444 <rshift>
 8015714:	443d      	add	r5, r7
 8015716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801571a:	42ab      	cmp	r3, r5
 801571c:	da4c      	bge.n	80157b8 <__gethex+0x2a4>
 801571e:	ee18 0a10 	vmov	r0, s16
 8015722:	4621      	mov	r1, r4
 8015724:	f000 fa5c 	bl	8015be0 <_Bfree>
 8015728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801572a:	2300      	movs	r3, #0
 801572c:	6013      	str	r3, [r2, #0]
 801572e:	27a3      	movs	r7, #163	; 0xa3
 8015730:	e785      	b.n	801563e <__gethex+0x12a>
 8015732:	1e73      	subs	r3, r6, #1
 8015734:	9a05      	ldr	r2, [sp, #20]
 8015736:	9303      	str	r3, [sp, #12]
 8015738:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801573c:	4293      	cmp	r3, r2
 801573e:	d019      	beq.n	8015774 <__gethex+0x260>
 8015740:	f1bb 0f20 	cmp.w	fp, #32
 8015744:	d107      	bne.n	8015756 <__gethex+0x242>
 8015746:	9b02      	ldr	r3, [sp, #8]
 8015748:	9a00      	ldr	r2, [sp, #0]
 801574a:	f843 2b04 	str.w	r2, [r3], #4
 801574e:	9302      	str	r3, [sp, #8]
 8015750:	2300      	movs	r3, #0
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	469b      	mov	fp, r3
 8015756:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801575a:	f7ff fec5 	bl	80154e8 <__hexdig_fun>
 801575e:	9b00      	ldr	r3, [sp, #0]
 8015760:	f000 000f 	and.w	r0, r0, #15
 8015764:	fa00 f00b 	lsl.w	r0, r0, fp
 8015768:	4303      	orrs	r3, r0
 801576a:	9300      	str	r3, [sp, #0]
 801576c:	f10b 0b04 	add.w	fp, fp, #4
 8015770:	9b03      	ldr	r3, [sp, #12]
 8015772:	e00d      	b.n	8015790 <__gethex+0x27c>
 8015774:	9b03      	ldr	r3, [sp, #12]
 8015776:	9a06      	ldr	r2, [sp, #24]
 8015778:	4413      	add	r3, r2
 801577a:	42bb      	cmp	r3, r7
 801577c:	d3e0      	bcc.n	8015740 <__gethex+0x22c>
 801577e:	4618      	mov	r0, r3
 8015780:	9901      	ldr	r1, [sp, #4]
 8015782:	9307      	str	r3, [sp, #28]
 8015784:	4652      	mov	r2, sl
 8015786:	f001 f913 	bl	80169b0 <strncmp>
 801578a:	9b07      	ldr	r3, [sp, #28]
 801578c:	2800      	cmp	r0, #0
 801578e:	d1d7      	bne.n	8015740 <__gethex+0x22c>
 8015790:	461e      	mov	r6, r3
 8015792:	e78b      	b.n	80156ac <__gethex+0x198>
 8015794:	f04f 0a03 	mov.w	sl, #3
 8015798:	e7b8      	b.n	801570c <__gethex+0x1f8>
 801579a:	da0a      	bge.n	80157b2 <__gethex+0x29e>
 801579c:	1a37      	subs	r7, r6, r0
 801579e:	4621      	mov	r1, r4
 80157a0:	ee18 0a10 	vmov	r0, s16
 80157a4:	463a      	mov	r2, r7
 80157a6:	f000 fc37 	bl	8016018 <__lshift>
 80157aa:	1bed      	subs	r5, r5, r7
 80157ac:	4604      	mov	r4, r0
 80157ae:	f100 0914 	add.w	r9, r0, #20
 80157b2:	f04f 0a00 	mov.w	sl, #0
 80157b6:	e7ae      	b.n	8015716 <__gethex+0x202>
 80157b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80157bc:	42a8      	cmp	r0, r5
 80157be:	dd72      	ble.n	80158a6 <__gethex+0x392>
 80157c0:	1b45      	subs	r5, r0, r5
 80157c2:	42ae      	cmp	r6, r5
 80157c4:	dc36      	bgt.n	8015834 <__gethex+0x320>
 80157c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d02a      	beq.n	8015824 <__gethex+0x310>
 80157ce:	2b03      	cmp	r3, #3
 80157d0:	d02c      	beq.n	801582c <__gethex+0x318>
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d11c      	bne.n	8015810 <__gethex+0x2fc>
 80157d6:	42ae      	cmp	r6, r5
 80157d8:	d11a      	bne.n	8015810 <__gethex+0x2fc>
 80157da:	2e01      	cmp	r6, #1
 80157dc:	d112      	bne.n	8015804 <__gethex+0x2f0>
 80157de:	9a04      	ldr	r2, [sp, #16]
 80157e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80157e4:	6013      	str	r3, [r2, #0]
 80157e6:	2301      	movs	r3, #1
 80157e8:	6123      	str	r3, [r4, #16]
 80157ea:	f8c9 3000 	str.w	r3, [r9]
 80157ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157f0:	2762      	movs	r7, #98	; 0x62
 80157f2:	601c      	str	r4, [r3, #0]
 80157f4:	e723      	b.n	801563e <__gethex+0x12a>
 80157f6:	bf00      	nop
 80157f8:	08017b10 	.word	0x08017b10
 80157fc:	08017a98 	.word	0x08017a98
 8015800:	08017aa9 	.word	0x08017aa9
 8015804:	1e71      	subs	r1, r6, #1
 8015806:	4620      	mov	r0, r4
 8015808:	f000 fe47 	bl	801649a <__any_on>
 801580c:	2800      	cmp	r0, #0
 801580e:	d1e6      	bne.n	80157de <__gethex+0x2ca>
 8015810:	ee18 0a10 	vmov	r0, s16
 8015814:	4621      	mov	r1, r4
 8015816:	f000 f9e3 	bl	8015be0 <_Bfree>
 801581a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801581c:	2300      	movs	r3, #0
 801581e:	6013      	str	r3, [r2, #0]
 8015820:	2750      	movs	r7, #80	; 0x50
 8015822:	e70c      	b.n	801563e <__gethex+0x12a>
 8015824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1f2      	bne.n	8015810 <__gethex+0x2fc>
 801582a:	e7d8      	b.n	80157de <__gethex+0x2ca>
 801582c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801582e:	2b00      	cmp	r3, #0
 8015830:	d1d5      	bne.n	80157de <__gethex+0x2ca>
 8015832:	e7ed      	b.n	8015810 <__gethex+0x2fc>
 8015834:	1e6f      	subs	r7, r5, #1
 8015836:	f1ba 0f00 	cmp.w	sl, #0
 801583a:	d131      	bne.n	80158a0 <__gethex+0x38c>
 801583c:	b127      	cbz	r7, 8015848 <__gethex+0x334>
 801583e:	4639      	mov	r1, r7
 8015840:	4620      	mov	r0, r4
 8015842:	f000 fe2a 	bl	801649a <__any_on>
 8015846:	4682      	mov	sl, r0
 8015848:	117b      	asrs	r3, r7, #5
 801584a:	2101      	movs	r1, #1
 801584c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015850:	f007 071f 	and.w	r7, r7, #31
 8015854:	fa01 f707 	lsl.w	r7, r1, r7
 8015858:	421f      	tst	r7, r3
 801585a:	4629      	mov	r1, r5
 801585c:	4620      	mov	r0, r4
 801585e:	bf18      	it	ne
 8015860:	f04a 0a02 	orrne.w	sl, sl, #2
 8015864:	1b76      	subs	r6, r6, r5
 8015866:	f7ff fded 	bl	8015444 <rshift>
 801586a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801586e:	2702      	movs	r7, #2
 8015870:	f1ba 0f00 	cmp.w	sl, #0
 8015874:	d048      	beq.n	8015908 <__gethex+0x3f4>
 8015876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801587a:	2b02      	cmp	r3, #2
 801587c:	d015      	beq.n	80158aa <__gethex+0x396>
 801587e:	2b03      	cmp	r3, #3
 8015880:	d017      	beq.n	80158b2 <__gethex+0x39e>
 8015882:	2b01      	cmp	r3, #1
 8015884:	d109      	bne.n	801589a <__gethex+0x386>
 8015886:	f01a 0f02 	tst.w	sl, #2
 801588a:	d006      	beq.n	801589a <__gethex+0x386>
 801588c:	f8d9 0000 	ldr.w	r0, [r9]
 8015890:	ea4a 0a00 	orr.w	sl, sl, r0
 8015894:	f01a 0f01 	tst.w	sl, #1
 8015898:	d10e      	bne.n	80158b8 <__gethex+0x3a4>
 801589a:	f047 0710 	orr.w	r7, r7, #16
 801589e:	e033      	b.n	8015908 <__gethex+0x3f4>
 80158a0:	f04f 0a01 	mov.w	sl, #1
 80158a4:	e7d0      	b.n	8015848 <__gethex+0x334>
 80158a6:	2701      	movs	r7, #1
 80158a8:	e7e2      	b.n	8015870 <__gethex+0x35c>
 80158aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158ac:	f1c3 0301 	rsb	r3, r3, #1
 80158b0:	9315      	str	r3, [sp, #84]	; 0x54
 80158b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d0f0      	beq.n	801589a <__gethex+0x386>
 80158b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80158bc:	f104 0314 	add.w	r3, r4, #20
 80158c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80158c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80158c8:	f04f 0c00 	mov.w	ip, #0
 80158cc:	4618      	mov	r0, r3
 80158ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80158d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80158d6:	d01c      	beq.n	8015912 <__gethex+0x3fe>
 80158d8:	3201      	adds	r2, #1
 80158da:	6002      	str	r2, [r0, #0]
 80158dc:	2f02      	cmp	r7, #2
 80158de:	f104 0314 	add.w	r3, r4, #20
 80158e2:	d13f      	bne.n	8015964 <__gethex+0x450>
 80158e4:	f8d8 2000 	ldr.w	r2, [r8]
 80158e8:	3a01      	subs	r2, #1
 80158ea:	42b2      	cmp	r2, r6
 80158ec:	d10a      	bne.n	8015904 <__gethex+0x3f0>
 80158ee:	1171      	asrs	r1, r6, #5
 80158f0:	2201      	movs	r2, #1
 80158f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80158f6:	f006 061f 	and.w	r6, r6, #31
 80158fa:	fa02 f606 	lsl.w	r6, r2, r6
 80158fe:	421e      	tst	r6, r3
 8015900:	bf18      	it	ne
 8015902:	4617      	movne	r7, r2
 8015904:	f047 0720 	orr.w	r7, r7, #32
 8015908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801590a:	601c      	str	r4, [r3, #0]
 801590c:	9b04      	ldr	r3, [sp, #16]
 801590e:	601d      	str	r5, [r3, #0]
 8015910:	e695      	b.n	801563e <__gethex+0x12a>
 8015912:	4299      	cmp	r1, r3
 8015914:	f843 cc04 	str.w	ip, [r3, #-4]
 8015918:	d8d8      	bhi.n	80158cc <__gethex+0x3b8>
 801591a:	68a3      	ldr	r3, [r4, #8]
 801591c:	459b      	cmp	fp, r3
 801591e:	db19      	blt.n	8015954 <__gethex+0x440>
 8015920:	6861      	ldr	r1, [r4, #4]
 8015922:	ee18 0a10 	vmov	r0, s16
 8015926:	3101      	adds	r1, #1
 8015928:	f000 f91a 	bl	8015b60 <_Balloc>
 801592c:	4681      	mov	r9, r0
 801592e:	b918      	cbnz	r0, 8015938 <__gethex+0x424>
 8015930:	4b1a      	ldr	r3, [pc, #104]	; (801599c <__gethex+0x488>)
 8015932:	4602      	mov	r2, r0
 8015934:	2184      	movs	r1, #132	; 0x84
 8015936:	e6a8      	b.n	801568a <__gethex+0x176>
 8015938:	6922      	ldr	r2, [r4, #16]
 801593a:	3202      	adds	r2, #2
 801593c:	f104 010c 	add.w	r1, r4, #12
 8015940:	0092      	lsls	r2, r2, #2
 8015942:	300c      	adds	r0, #12
 8015944:	f7fd fa72 	bl	8012e2c <memcpy>
 8015948:	4621      	mov	r1, r4
 801594a:	ee18 0a10 	vmov	r0, s16
 801594e:	f000 f947 	bl	8015be0 <_Bfree>
 8015952:	464c      	mov	r4, r9
 8015954:	6923      	ldr	r3, [r4, #16]
 8015956:	1c5a      	adds	r2, r3, #1
 8015958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801595c:	6122      	str	r2, [r4, #16]
 801595e:	2201      	movs	r2, #1
 8015960:	615a      	str	r2, [r3, #20]
 8015962:	e7bb      	b.n	80158dc <__gethex+0x3c8>
 8015964:	6922      	ldr	r2, [r4, #16]
 8015966:	455a      	cmp	r2, fp
 8015968:	dd0b      	ble.n	8015982 <__gethex+0x46e>
 801596a:	2101      	movs	r1, #1
 801596c:	4620      	mov	r0, r4
 801596e:	f7ff fd69 	bl	8015444 <rshift>
 8015972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015976:	3501      	adds	r5, #1
 8015978:	42ab      	cmp	r3, r5
 801597a:	f6ff aed0 	blt.w	801571e <__gethex+0x20a>
 801597e:	2701      	movs	r7, #1
 8015980:	e7c0      	b.n	8015904 <__gethex+0x3f0>
 8015982:	f016 061f 	ands.w	r6, r6, #31
 8015986:	d0fa      	beq.n	801597e <__gethex+0x46a>
 8015988:	4453      	add	r3, sl
 801598a:	f1c6 0620 	rsb	r6, r6, #32
 801598e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015992:	f000 f9d7 	bl	8015d44 <__hi0bits>
 8015996:	42b0      	cmp	r0, r6
 8015998:	dbe7      	blt.n	801596a <__gethex+0x456>
 801599a:	e7f0      	b.n	801597e <__gethex+0x46a>
 801599c:	08017a98 	.word	0x08017a98

080159a0 <L_shift>:
 80159a0:	f1c2 0208 	rsb	r2, r2, #8
 80159a4:	0092      	lsls	r2, r2, #2
 80159a6:	b570      	push	{r4, r5, r6, lr}
 80159a8:	f1c2 0620 	rsb	r6, r2, #32
 80159ac:	6843      	ldr	r3, [r0, #4]
 80159ae:	6804      	ldr	r4, [r0, #0]
 80159b0:	fa03 f506 	lsl.w	r5, r3, r6
 80159b4:	432c      	orrs	r4, r5
 80159b6:	40d3      	lsrs	r3, r2
 80159b8:	6004      	str	r4, [r0, #0]
 80159ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80159be:	4288      	cmp	r0, r1
 80159c0:	d3f4      	bcc.n	80159ac <L_shift+0xc>
 80159c2:	bd70      	pop	{r4, r5, r6, pc}

080159c4 <__match>:
 80159c4:	b530      	push	{r4, r5, lr}
 80159c6:	6803      	ldr	r3, [r0, #0]
 80159c8:	3301      	adds	r3, #1
 80159ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159ce:	b914      	cbnz	r4, 80159d6 <__match+0x12>
 80159d0:	6003      	str	r3, [r0, #0]
 80159d2:	2001      	movs	r0, #1
 80159d4:	bd30      	pop	{r4, r5, pc}
 80159d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80159de:	2d19      	cmp	r5, #25
 80159e0:	bf98      	it	ls
 80159e2:	3220      	addls	r2, #32
 80159e4:	42a2      	cmp	r2, r4
 80159e6:	d0f0      	beq.n	80159ca <__match+0x6>
 80159e8:	2000      	movs	r0, #0
 80159ea:	e7f3      	b.n	80159d4 <__match+0x10>

080159ec <__hexnan>:
 80159ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f0:	680b      	ldr	r3, [r1, #0]
 80159f2:	115e      	asrs	r6, r3, #5
 80159f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80159f8:	f013 031f 	ands.w	r3, r3, #31
 80159fc:	b087      	sub	sp, #28
 80159fe:	bf18      	it	ne
 8015a00:	3604      	addne	r6, #4
 8015a02:	2500      	movs	r5, #0
 8015a04:	1f37      	subs	r7, r6, #4
 8015a06:	4690      	mov	r8, r2
 8015a08:	6802      	ldr	r2, [r0, #0]
 8015a0a:	9301      	str	r3, [sp, #4]
 8015a0c:	4682      	mov	sl, r0
 8015a0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015a12:	46b9      	mov	r9, r7
 8015a14:	463c      	mov	r4, r7
 8015a16:	9502      	str	r5, [sp, #8]
 8015a18:	46ab      	mov	fp, r5
 8015a1a:	7851      	ldrb	r1, [r2, #1]
 8015a1c:	1c53      	adds	r3, r2, #1
 8015a1e:	9303      	str	r3, [sp, #12]
 8015a20:	b341      	cbz	r1, 8015a74 <__hexnan+0x88>
 8015a22:	4608      	mov	r0, r1
 8015a24:	9205      	str	r2, [sp, #20]
 8015a26:	9104      	str	r1, [sp, #16]
 8015a28:	f7ff fd5e 	bl	80154e8 <__hexdig_fun>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d14f      	bne.n	8015ad0 <__hexnan+0xe4>
 8015a30:	9904      	ldr	r1, [sp, #16]
 8015a32:	9a05      	ldr	r2, [sp, #20]
 8015a34:	2920      	cmp	r1, #32
 8015a36:	d818      	bhi.n	8015a6a <__hexnan+0x7e>
 8015a38:	9b02      	ldr	r3, [sp, #8]
 8015a3a:	459b      	cmp	fp, r3
 8015a3c:	dd13      	ble.n	8015a66 <__hexnan+0x7a>
 8015a3e:	454c      	cmp	r4, r9
 8015a40:	d206      	bcs.n	8015a50 <__hexnan+0x64>
 8015a42:	2d07      	cmp	r5, #7
 8015a44:	dc04      	bgt.n	8015a50 <__hexnan+0x64>
 8015a46:	462a      	mov	r2, r5
 8015a48:	4649      	mov	r1, r9
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f7ff ffa8 	bl	80159a0 <L_shift>
 8015a50:	4544      	cmp	r4, r8
 8015a52:	d950      	bls.n	8015af6 <__hexnan+0x10a>
 8015a54:	2300      	movs	r3, #0
 8015a56:	f1a4 0904 	sub.w	r9, r4, #4
 8015a5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8015a62:	464c      	mov	r4, r9
 8015a64:	461d      	mov	r5, r3
 8015a66:	9a03      	ldr	r2, [sp, #12]
 8015a68:	e7d7      	b.n	8015a1a <__hexnan+0x2e>
 8015a6a:	2929      	cmp	r1, #41	; 0x29
 8015a6c:	d156      	bne.n	8015b1c <__hexnan+0x130>
 8015a6e:	3202      	adds	r2, #2
 8015a70:	f8ca 2000 	str.w	r2, [sl]
 8015a74:	f1bb 0f00 	cmp.w	fp, #0
 8015a78:	d050      	beq.n	8015b1c <__hexnan+0x130>
 8015a7a:	454c      	cmp	r4, r9
 8015a7c:	d206      	bcs.n	8015a8c <__hexnan+0xa0>
 8015a7e:	2d07      	cmp	r5, #7
 8015a80:	dc04      	bgt.n	8015a8c <__hexnan+0xa0>
 8015a82:	462a      	mov	r2, r5
 8015a84:	4649      	mov	r1, r9
 8015a86:	4620      	mov	r0, r4
 8015a88:	f7ff ff8a 	bl	80159a0 <L_shift>
 8015a8c:	4544      	cmp	r4, r8
 8015a8e:	d934      	bls.n	8015afa <__hexnan+0x10e>
 8015a90:	f1a8 0204 	sub.w	r2, r8, #4
 8015a94:	4623      	mov	r3, r4
 8015a96:	f853 1b04 	ldr.w	r1, [r3], #4
 8015a9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8015a9e:	429f      	cmp	r7, r3
 8015aa0:	d2f9      	bcs.n	8015a96 <__hexnan+0xaa>
 8015aa2:	1b3b      	subs	r3, r7, r4
 8015aa4:	f023 0303 	bic.w	r3, r3, #3
 8015aa8:	3304      	adds	r3, #4
 8015aaa:	3401      	adds	r4, #1
 8015aac:	3e03      	subs	r6, #3
 8015aae:	42b4      	cmp	r4, r6
 8015ab0:	bf88      	it	hi
 8015ab2:	2304      	movhi	r3, #4
 8015ab4:	4443      	add	r3, r8
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	f843 2b04 	str.w	r2, [r3], #4
 8015abc:	429f      	cmp	r7, r3
 8015abe:	d2fb      	bcs.n	8015ab8 <__hexnan+0xcc>
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	b91b      	cbnz	r3, 8015acc <__hexnan+0xe0>
 8015ac4:	4547      	cmp	r7, r8
 8015ac6:	d127      	bne.n	8015b18 <__hexnan+0x12c>
 8015ac8:	2301      	movs	r3, #1
 8015aca:	603b      	str	r3, [r7, #0]
 8015acc:	2005      	movs	r0, #5
 8015ace:	e026      	b.n	8015b1e <__hexnan+0x132>
 8015ad0:	3501      	adds	r5, #1
 8015ad2:	2d08      	cmp	r5, #8
 8015ad4:	f10b 0b01 	add.w	fp, fp, #1
 8015ad8:	dd06      	ble.n	8015ae8 <__hexnan+0xfc>
 8015ada:	4544      	cmp	r4, r8
 8015adc:	d9c3      	bls.n	8015a66 <__hexnan+0x7a>
 8015ade:	2300      	movs	r3, #0
 8015ae0:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ae4:	2501      	movs	r5, #1
 8015ae6:	3c04      	subs	r4, #4
 8015ae8:	6822      	ldr	r2, [r4, #0]
 8015aea:	f000 000f 	and.w	r0, r0, #15
 8015aee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015af2:	6022      	str	r2, [r4, #0]
 8015af4:	e7b7      	b.n	8015a66 <__hexnan+0x7a>
 8015af6:	2508      	movs	r5, #8
 8015af8:	e7b5      	b.n	8015a66 <__hexnan+0x7a>
 8015afa:	9b01      	ldr	r3, [sp, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d0df      	beq.n	8015ac0 <__hexnan+0xd4>
 8015b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b04:	f1c3 0320 	rsb	r3, r3, #32
 8015b08:	fa22 f303 	lsr.w	r3, r2, r3
 8015b0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015b10:	401a      	ands	r2, r3
 8015b12:	f846 2c04 	str.w	r2, [r6, #-4]
 8015b16:	e7d3      	b.n	8015ac0 <__hexnan+0xd4>
 8015b18:	3f04      	subs	r7, #4
 8015b1a:	e7d1      	b.n	8015ac0 <__hexnan+0xd4>
 8015b1c:	2004      	movs	r0, #4
 8015b1e:	b007      	add	sp, #28
 8015b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b24 <_localeconv_r>:
 8015b24:	4800      	ldr	r0, [pc, #0]	; (8015b28 <_localeconv_r+0x4>)
 8015b26:	4770      	bx	lr
 8015b28:	24000180 	.word	0x24000180

08015b2c <malloc>:
 8015b2c:	4b02      	ldr	r3, [pc, #8]	; (8015b38 <malloc+0xc>)
 8015b2e:	4601      	mov	r1, r0
 8015b30:	6818      	ldr	r0, [r3, #0]
 8015b32:	f000 bd55 	b.w	80165e0 <_malloc_r>
 8015b36:	bf00      	nop
 8015b38:	24000028 	.word	0x24000028

08015b3c <__ascii_mbtowc>:
 8015b3c:	b082      	sub	sp, #8
 8015b3e:	b901      	cbnz	r1, 8015b42 <__ascii_mbtowc+0x6>
 8015b40:	a901      	add	r1, sp, #4
 8015b42:	b142      	cbz	r2, 8015b56 <__ascii_mbtowc+0x1a>
 8015b44:	b14b      	cbz	r3, 8015b5a <__ascii_mbtowc+0x1e>
 8015b46:	7813      	ldrb	r3, [r2, #0]
 8015b48:	600b      	str	r3, [r1, #0]
 8015b4a:	7812      	ldrb	r2, [r2, #0]
 8015b4c:	1e10      	subs	r0, r2, #0
 8015b4e:	bf18      	it	ne
 8015b50:	2001      	movne	r0, #1
 8015b52:	b002      	add	sp, #8
 8015b54:	4770      	bx	lr
 8015b56:	4610      	mov	r0, r2
 8015b58:	e7fb      	b.n	8015b52 <__ascii_mbtowc+0x16>
 8015b5a:	f06f 0001 	mvn.w	r0, #1
 8015b5e:	e7f8      	b.n	8015b52 <__ascii_mbtowc+0x16>

08015b60 <_Balloc>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b64:	4604      	mov	r4, r0
 8015b66:	460d      	mov	r5, r1
 8015b68:	b976      	cbnz	r6, 8015b88 <_Balloc+0x28>
 8015b6a:	2010      	movs	r0, #16
 8015b6c:	f7ff ffde 	bl	8015b2c <malloc>
 8015b70:	4602      	mov	r2, r0
 8015b72:	6260      	str	r0, [r4, #36]	; 0x24
 8015b74:	b920      	cbnz	r0, 8015b80 <_Balloc+0x20>
 8015b76:	4b18      	ldr	r3, [pc, #96]	; (8015bd8 <_Balloc+0x78>)
 8015b78:	4818      	ldr	r0, [pc, #96]	; (8015bdc <_Balloc+0x7c>)
 8015b7a:	2166      	movs	r1, #102	; 0x66
 8015b7c:	f000 ff3a 	bl	80169f4 <__assert_func>
 8015b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b84:	6006      	str	r6, [r0, #0]
 8015b86:	60c6      	str	r6, [r0, #12]
 8015b88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b8a:	68f3      	ldr	r3, [r6, #12]
 8015b8c:	b183      	cbz	r3, 8015bb0 <_Balloc+0x50>
 8015b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b96:	b9b8      	cbnz	r0, 8015bc8 <_Balloc+0x68>
 8015b98:	2101      	movs	r1, #1
 8015b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8015b9e:	1d72      	adds	r2, r6, #5
 8015ba0:	0092      	lsls	r2, r2, #2
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f000 fc9a 	bl	80164dc <_calloc_r>
 8015ba8:	b160      	cbz	r0, 8015bc4 <_Balloc+0x64>
 8015baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015bae:	e00e      	b.n	8015bce <_Balloc+0x6e>
 8015bb0:	2221      	movs	r2, #33	; 0x21
 8015bb2:	2104      	movs	r1, #4
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 fc91 	bl	80164dc <_calloc_r>
 8015bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bbc:	60f0      	str	r0, [r6, #12]
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d1e4      	bne.n	8015b8e <_Balloc+0x2e>
 8015bc4:	2000      	movs	r0, #0
 8015bc6:	bd70      	pop	{r4, r5, r6, pc}
 8015bc8:	6802      	ldr	r2, [r0, #0]
 8015bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015bce:	2300      	movs	r3, #0
 8015bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bd4:	e7f7      	b.n	8015bc6 <_Balloc+0x66>
 8015bd6:	bf00      	nop
 8015bd8:	08017a26 	.word	0x08017a26
 8015bdc:	08017b24 	.word	0x08017b24

08015be0 <_Bfree>:
 8015be0:	b570      	push	{r4, r5, r6, lr}
 8015be2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015be4:	4605      	mov	r5, r0
 8015be6:	460c      	mov	r4, r1
 8015be8:	b976      	cbnz	r6, 8015c08 <_Bfree+0x28>
 8015bea:	2010      	movs	r0, #16
 8015bec:	f7ff ff9e 	bl	8015b2c <malloc>
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	6268      	str	r0, [r5, #36]	; 0x24
 8015bf4:	b920      	cbnz	r0, 8015c00 <_Bfree+0x20>
 8015bf6:	4b09      	ldr	r3, [pc, #36]	; (8015c1c <_Bfree+0x3c>)
 8015bf8:	4809      	ldr	r0, [pc, #36]	; (8015c20 <_Bfree+0x40>)
 8015bfa:	218a      	movs	r1, #138	; 0x8a
 8015bfc:	f000 fefa 	bl	80169f4 <__assert_func>
 8015c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c04:	6006      	str	r6, [r0, #0]
 8015c06:	60c6      	str	r6, [r0, #12]
 8015c08:	b13c      	cbz	r4, 8015c1a <_Bfree+0x3a>
 8015c0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015c0c:	6862      	ldr	r2, [r4, #4]
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c14:	6021      	str	r1, [r4, #0]
 8015c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}
 8015c1c:	08017a26 	.word	0x08017a26
 8015c20:	08017b24 	.word	0x08017b24

08015c24 <__multadd>:
 8015c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c28:	690d      	ldr	r5, [r1, #16]
 8015c2a:	4607      	mov	r7, r0
 8015c2c:	460c      	mov	r4, r1
 8015c2e:	461e      	mov	r6, r3
 8015c30:	f101 0c14 	add.w	ip, r1, #20
 8015c34:	2000      	movs	r0, #0
 8015c36:	f8dc 3000 	ldr.w	r3, [ip]
 8015c3a:	b299      	uxth	r1, r3
 8015c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8015c40:	0c1e      	lsrs	r6, r3, #16
 8015c42:	0c0b      	lsrs	r3, r1, #16
 8015c44:	fb02 3306 	mla	r3, r2, r6, r3
 8015c48:	b289      	uxth	r1, r1
 8015c4a:	3001      	adds	r0, #1
 8015c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015c50:	4285      	cmp	r5, r0
 8015c52:	f84c 1b04 	str.w	r1, [ip], #4
 8015c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015c5a:	dcec      	bgt.n	8015c36 <__multadd+0x12>
 8015c5c:	b30e      	cbz	r6, 8015ca2 <__multadd+0x7e>
 8015c5e:	68a3      	ldr	r3, [r4, #8]
 8015c60:	42ab      	cmp	r3, r5
 8015c62:	dc19      	bgt.n	8015c98 <__multadd+0x74>
 8015c64:	6861      	ldr	r1, [r4, #4]
 8015c66:	4638      	mov	r0, r7
 8015c68:	3101      	adds	r1, #1
 8015c6a:	f7ff ff79 	bl	8015b60 <_Balloc>
 8015c6e:	4680      	mov	r8, r0
 8015c70:	b928      	cbnz	r0, 8015c7e <__multadd+0x5a>
 8015c72:	4602      	mov	r2, r0
 8015c74:	4b0c      	ldr	r3, [pc, #48]	; (8015ca8 <__multadd+0x84>)
 8015c76:	480d      	ldr	r0, [pc, #52]	; (8015cac <__multadd+0x88>)
 8015c78:	21b5      	movs	r1, #181	; 0xb5
 8015c7a:	f000 febb 	bl	80169f4 <__assert_func>
 8015c7e:	6922      	ldr	r2, [r4, #16]
 8015c80:	3202      	adds	r2, #2
 8015c82:	f104 010c 	add.w	r1, r4, #12
 8015c86:	0092      	lsls	r2, r2, #2
 8015c88:	300c      	adds	r0, #12
 8015c8a:	f7fd f8cf 	bl	8012e2c <memcpy>
 8015c8e:	4621      	mov	r1, r4
 8015c90:	4638      	mov	r0, r7
 8015c92:	f7ff ffa5 	bl	8015be0 <_Bfree>
 8015c96:	4644      	mov	r4, r8
 8015c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c9c:	3501      	adds	r5, #1
 8015c9e:	615e      	str	r6, [r3, #20]
 8015ca0:	6125      	str	r5, [r4, #16]
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca8:	08017a98 	.word	0x08017a98
 8015cac:	08017b24 	.word	0x08017b24

08015cb0 <__s2b>:
 8015cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	4615      	mov	r5, r2
 8015cb8:	461f      	mov	r7, r3
 8015cba:	2209      	movs	r2, #9
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	db09      	blt.n	8015ce0 <__s2b+0x30>
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f7ff ff47 	bl	8015b60 <_Balloc>
 8015cd2:	b940      	cbnz	r0, 8015ce6 <__s2b+0x36>
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	4b19      	ldr	r3, [pc, #100]	; (8015d3c <__s2b+0x8c>)
 8015cd8:	4819      	ldr	r0, [pc, #100]	; (8015d40 <__s2b+0x90>)
 8015cda:	21ce      	movs	r1, #206	; 0xce
 8015cdc:	f000 fe8a 	bl	80169f4 <__assert_func>
 8015ce0:	0052      	lsls	r2, r2, #1
 8015ce2:	3101      	adds	r1, #1
 8015ce4:	e7f0      	b.n	8015cc8 <__s2b+0x18>
 8015ce6:	9b08      	ldr	r3, [sp, #32]
 8015ce8:	6143      	str	r3, [r0, #20]
 8015cea:	2d09      	cmp	r5, #9
 8015cec:	f04f 0301 	mov.w	r3, #1
 8015cf0:	6103      	str	r3, [r0, #16]
 8015cf2:	dd16      	ble.n	8015d22 <__s2b+0x72>
 8015cf4:	f104 0909 	add.w	r9, r4, #9
 8015cf8:	46c8      	mov	r8, r9
 8015cfa:	442c      	add	r4, r5
 8015cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015d00:	4601      	mov	r1, r0
 8015d02:	3b30      	subs	r3, #48	; 0x30
 8015d04:	220a      	movs	r2, #10
 8015d06:	4630      	mov	r0, r6
 8015d08:	f7ff ff8c 	bl	8015c24 <__multadd>
 8015d0c:	45a0      	cmp	r8, r4
 8015d0e:	d1f5      	bne.n	8015cfc <__s2b+0x4c>
 8015d10:	f1a5 0408 	sub.w	r4, r5, #8
 8015d14:	444c      	add	r4, r9
 8015d16:	1b2d      	subs	r5, r5, r4
 8015d18:	1963      	adds	r3, r4, r5
 8015d1a:	42bb      	cmp	r3, r7
 8015d1c:	db04      	blt.n	8015d28 <__s2b+0x78>
 8015d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d22:	340a      	adds	r4, #10
 8015d24:	2509      	movs	r5, #9
 8015d26:	e7f6      	b.n	8015d16 <__s2b+0x66>
 8015d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015d2c:	4601      	mov	r1, r0
 8015d2e:	3b30      	subs	r3, #48	; 0x30
 8015d30:	220a      	movs	r2, #10
 8015d32:	4630      	mov	r0, r6
 8015d34:	f7ff ff76 	bl	8015c24 <__multadd>
 8015d38:	e7ee      	b.n	8015d18 <__s2b+0x68>
 8015d3a:	bf00      	nop
 8015d3c:	08017a98 	.word	0x08017a98
 8015d40:	08017b24 	.word	0x08017b24

08015d44 <__hi0bits>:
 8015d44:	0c03      	lsrs	r3, r0, #16
 8015d46:	041b      	lsls	r3, r3, #16
 8015d48:	b9d3      	cbnz	r3, 8015d80 <__hi0bits+0x3c>
 8015d4a:	0400      	lsls	r0, r0, #16
 8015d4c:	2310      	movs	r3, #16
 8015d4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015d52:	bf04      	itt	eq
 8015d54:	0200      	lsleq	r0, r0, #8
 8015d56:	3308      	addeq	r3, #8
 8015d58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015d5c:	bf04      	itt	eq
 8015d5e:	0100      	lsleq	r0, r0, #4
 8015d60:	3304      	addeq	r3, #4
 8015d62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015d66:	bf04      	itt	eq
 8015d68:	0080      	lsleq	r0, r0, #2
 8015d6a:	3302      	addeq	r3, #2
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	db05      	blt.n	8015d7c <__hi0bits+0x38>
 8015d70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015d74:	f103 0301 	add.w	r3, r3, #1
 8015d78:	bf08      	it	eq
 8015d7a:	2320      	moveq	r3, #32
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	4770      	bx	lr
 8015d80:	2300      	movs	r3, #0
 8015d82:	e7e4      	b.n	8015d4e <__hi0bits+0xa>

08015d84 <__lo0bits>:
 8015d84:	6803      	ldr	r3, [r0, #0]
 8015d86:	f013 0207 	ands.w	r2, r3, #7
 8015d8a:	4601      	mov	r1, r0
 8015d8c:	d00b      	beq.n	8015da6 <__lo0bits+0x22>
 8015d8e:	07da      	lsls	r2, r3, #31
 8015d90:	d423      	bmi.n	8015dda <__lo0bits+0x56>
 8015d92:	0798      	lsls	r0, r3, #30
 8015d94:	bf49      	itett	mi
 8015d96:	085b      	lsrmi	r3, r3, #1
 8015d98:	089b      	lsrpl	r3, r3, #2
 8015d9a:	2001      	movmi	r0, #1
 8015d9c:	600b      	strmi	r3, [r1, #0]
 8015d9e:	bf5c      	itt	pl
 8015da0:	600b      	strpl	r3, [r1, #0]
 8015da2:	2002      	movpl	r0, #2
 8015da4:	4770      	bx	lr
 8015da6:	b298      	uxth	r0, r3
 8015da8:	b9a8      	cbnz	r0, 8015dd6 <__lo0bits+0x52>
 8015daa:	0c1b      	lsrs	r3, r3, #16
 8015dac:	2010      	movs	r0, #16
 8015dae:	b2da      	uxtb	r2, r3
 8015db0:	b90a      	cbnz	r2, 8015db6 <__lo0bits+0x32>
 8015db2:	3008      	adds	r0, #8
 8015db4:	0a1b      	lsrs	r3, r3, #8
 8015db6:	071a      	lsls	r2, r3, #28
 8015db8:	bf04      	itt	eq
 8015dba:	091b      	lsreq	r3, r3, #4
 8015dbc:	3004      	addeq	r0, #4
 8015dbe:	079a      	lsls	r2, r3, #30
 8015dc0:	bf04      	itt	eq
 8015dc2:	089b      	lsreq	r3, r3, #2
 8015dc4:	3002      	addeq	r0, #2
 8015dc6:	07da      	lsls	r2, r3, #31
 8015dc8:	d403      	bmi.n	8015dd2 <__lo0bits+0x4e>
 8015dca:	085b      	lsrs	r3, r3, #1
 8015dcc:	f100 0001 	add.w	r0, r0, #1
 8015dd0:	d005      	beq.n	8015dde <__lo0bits+0x5a>
 8015dd2:	600b      	str	r3, [r1, #0]
 8015dd4:	4770      	bx	lr
 8015dd6:	4610      	mov	r0, r2
 8015dd8:	e7e9      	b.n	8015dae <__lo0bits+0x2a>
 8015dda:	2000      	movs	r0, #0
 8015ddc:	4770      	bx	lr
 8015dde:	2020      	movs	r0, #32
 8015de0:	4770      	bx	lr
	...

08015de4 <__i2b>:
 8015de4:	b510      	push	{r4, lr}
 8015de6:	460c      	mov	r4, r1
 8015de8:	2101      	movs	r1, #1
 8015dea:	f7ff feb9 	bl	8015b60 <_Balloc>
 8015dee:	4602      	mov	r2, r0
 8015df0:	b928      	cbnz	r0, 8015dfe <__i2b+0x1a>
 8015df2:	4b05      	ldr	r3, [pc, #20]	; (8015e08 <__i2b+0x24>)
 8015df4:	4805      	ldr	r0, [pc, #20]	; (8015e0c <__i2b+0x28>)
 8015df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015dfa:	f000 fdfb 	bl	80169f4 <__assert_func>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	6144      	str	r4, [r0, #20]
 8015e02:	6103      	str	r3, [r0, #16]
 8015e04:	bd10      	pop	{r4, pc}
 8015e06:	bf00      	nop
 8015e08:	08017a98 	.word	0x08017a98
 8015e0c:	08017b24 	.word	0x08017b24

08015e10 <__multiply>:
 8015e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e14:	4691      	mov	r9, r2
 8015e16:	690a      	ldr	r2, [r1, #16]
 8015e18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	bfb8      	it	lt
 8015e20:	460b      	movlt	r3, r1
 8015e22:	460c      	mov	r4, r1
 8015e24:	bfbc      	itt	lt
 8015e26:	464c      	movlt	r4, r9
 8015e28:	4699      	movlt	r9, r3
 8015e2a:	6927      	ldr	r7, [r4, #16]
 8015e2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015e30:	68a3      	ldr	r3, [r4, #8]
 8015e32:	6861      	ldr	r1, [r4, #4]
 8015e34:	eb07 060a 	add.w	r6, r7, sl
 8015e38:	42b3      	cmp	r3, r6
 8015e3a:	b085      	sub	sp, #20
 8015e3c:	bfb8      	it	lt
 8015e3e:	3101      	addlt	r1, #1
 8015e40:	f7ff fe8e 	bl	8015b60 <_Balloc>
 8015e44:	b930      	cbnz	r0, 8015e54 <__multiply+0x44>
 8015e46:	4602      	mov	r2, r0
 8015e48:	4b44      	ldr	r3, [pc, #272]	; (8015f5c <__multiply+0x14c>)
 8015e4a:	4845      	ldr	r0, [pc, #276]	; (8015f60 <__multiply+0x150>)
 8015e4c:	f240 115d 	movw	r1, #349	; 0x15d
 8015e50:	f000 fdd0 	bl	80169f4 <__assert_func>
 8015e54:	f100 0514 	add.w	r5, r0, #20
 8015e58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015e5c:	462b      	mov	r3, r5
 8015e5e:	2200      	movs	r2, #0
 8015e60:	4543      	cmp	r3, r8
 8015e62:	d321      	bcc.n	8015ea8 <__multiply+0x98>
 8015e64:	f104 0314 	add.w	r3, r4, #20
 8015e68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015e6c:	f109 0314 	add.w	r3, r9, #20
 8015e70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015e74:	9202      	str	r2, [sp, #8]
 8015e76:	1b3a      	subs	r2, r7, r4
 8015e78:	3a15      	subs	r2, #21
 8015e7a:	f022 0203 	bic.w	r2, r2, #3
 8015e7e:	3204      	adds	r2, #4
 8015e80:	f104 0115 	add.w	r1, r4, #21
 8015e84:	428f      	cmp	r7, r1
 8015e86:	bf38      	it	cc
 8015e88:	2204      	movcc	r2, #4
 8015e8a:	9201      	str	r2, [sp, #4]
 8015e8c:	9a02      	ldr	r2, [sp, #8]
 8015e8e:	9303      	str	r3, [sp, #12]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d80c      	bhi.n	8015eae <__multiply+0x9e>
 8015e94:	2e00      	cmp	r6, #0
 8015e96:	dd03      	ble.n	8015ea0 <__multiply+0x90>
 8015e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d05a      	beq.n	8015f56 <__multiply+0x146>
 8015ea0:	6106      	str	r6, [r0, #16]
 8015ea2:	b005      	add	sp, #20
 8015ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea8:	f843 2b04 	str.w	r2, [r3], #4
 8015eac:	e7d8      	b.n	8015e60 <__multiply+0x50>
 8015eae:	f8b3 a000 	ldrh.w	sl, [r3]
 8015eb2:	f1ba 0f00 	cmp.w	sl, #0
 8015eb6:	d024      	beq.n	8015f02 <__multiply+0xf2>
 8015eb8:	f104 0e14 	add.w	lr, r4, #20
 8015ebc:	46a9      	mov	r9, r5
 8015ebe:	f04f 0c00 	mov.w	ip, #0
 8015ec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015ec6:	f8d9 1000 	ldr.w	r1, [r9]
 8015eca:	fa1f fb82 	uxth.w	fp, r2
 8015ece:	b289      	uxth	r1, r1
 8015ed0:	fb0a 110b 	mla	r1, sl, fp, r1
 8015ed4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8015edc:	4461      	add	r1, ip
 8015ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015ee2:	fb0a c20b 	mla	r2, sl, fp, ip
 8015ee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015eea:	b289      	uxth	r1, r1
 8015eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015ef0:	4577      	cmp	r7, lr
 8015ef2:	f849 1b04 	str.w	r1, [r9], #4
 8015ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015efa:	d8e2      	bhi.n	8015ec2 <__multiply+0xb2>
 8015efc:	9a01      	ldr	r2, [sp, #4]
 8015efe:	f845 c002 	str.w	ip, [r5, r2]
 8015f02:	9a03      	ldr	r2, [sp, #12]
 8015f04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015f08:	3304      	adds	r3, #4
 8015f0a:	f1b9 0f00 	cmp.w	r9, #0
 8015f0e:	d020      	beq.n	8015f52 <__multiply+0x142>
 8015f10:	6829      	ldr	r1, [r5, #0]
 8015f12:	f104 0c14 	add.w	ip, r4, #20
 8015f16:	46ae      	mov	lr, r5
 8015f18:	f04f 0a00 	mov.w	sl, #0
 8015f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8015f20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015f24:	fb09 220b 	mla	r2, r9, fp, r2
 8015f28:	4492      	add	sl, r2
 8015f2a:	b289      	uxth	r1, r1
 8015f2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015f30:	f84e 1b04 	str.w	r1, [lr], #4
 8015f34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015f38:	f8be 1000 	ldrh.w	r1, [lr]
 8015f3c:	0c12      	lsrs	r2, r2, #16
 8015f3e:	fb09 1102 	mla	r1, r9, r2, r1
 8015f42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015f46:	4567      	cmp	r7, ip
 8015f48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015f4c:	d8e6      	bhi.n	8015f1c <__multiply+0x10c>
 8015f4e:	9a01      	ldr	r2, [sp, #4]
 8015f50:	50a9      	str	r1, [r5, r2]
 8015f52:	3504      	adds	r5, #4
 8015f54:	e79a      	b.n	8015e8c <__multiply+0x7c>
 8015f56:	3e01      	subs	r6, #1
 8015f58:	e79c      	b.n	8015e94 <__multiply+0x84>
 8015f5a:	bf00      	nop
 8015f5c:	08017a98 	.word	0x08017a98
 8015f60:	08017b24 	.word	0x08017b24

08015f64 <__pow5mult>:
 8015f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f68:	4615      	mov	r5, r2
 8015f6a:	f012 0203 	ands.w	r2, r2, #3
 8015f6e:	4606      	mov	r6, r0
 8015f70:	460f      	mov	r7, r1
 8015f72:	d007      	beq.n	8015f84 <__pow5mult+0x20>
 8015f74:	4c25      	ldr	r4, [pc, #148]	; (801600c <__pow5mult+0xa8>)
 8015f76:	3a01      	subs	r2, #1
 8015f78:	2300      	movs	r3, #0
 8015f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f7e:	f7ff fe51 	bl	8015c24 <__multadd>
 8015f82:	4607      	mov	r7, r0
 8015f84:	10ad      	asrs	r5, r5, #2
 8015f86:	d03d      	beq.n	8016004 <__pow5mult+0xa0>
 8015f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015f8a:	b97c      	cbnz	r4, 8015fac <__pow5mult+0x48>
 8015f8c:	2010      	movs	r0, #16
 8015f8e:	f7ff fdcd 	bl	8015b2c <malloc>
 8015f92:	4602      	mov	r2, r0
 8015f94:	6270      	str	r0, [r6, #36]	; 0x24
 8015f96:	b928      	cbnz	r0, 8015fa4 <__pow5mult+0x40>
 8015f98:	4b1d      	ldr	r3, [pc, #116]	; (8016010 <__pow5mult+0xac>)
 8015f9a:	481e      	ldr	r0, [pc, #120]	; (8016014 <__pow5mult+0xb0>)
 8015f9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015fa0:	f000 fd28 	bl	80169f4 <__assert_func>
 8015fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015fa8:	6004      	str	r4, [r0, #0]
 8015faa:	60c4      	str	r4, [r0, #12]
 8015fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015fb4:	b94c      	cbnz	r4, 8015fca <__pow5mult+0x66>
 8015fb6:	f240 2171 	movw	r1, #625	; 0x271
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f7ff ff12 	bl	8015de4 <__i2b>
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	6003      	str	r3, [r0, #0]
 8015fca:	f04f 0900 	mov.w	r9, #0
 8015fce:	07eb      	lsls	r3, r5, #31
 8015fd0:	d50a      	bpl.n	8015fe8 <__pow5mult+0x84>
 8015fd2:	4639      	mov	r1, r7
 8015fd4:	4622      	mov	r2, r4
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f7ff ff1a 	bl	8015e10 <__multiply>
 8015fdc:	4639      	mov	r1, r7
 8015fde:	4680      	mov	r8, r0
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f7ff fdfd 	bl	8015be0 <_Bfree>
 8015fe6:	4647      	mov	r7, r8
 8015fe8:	106d      	asrs	r5, r5, #1
 8015fea:	d00b      	beq.n	8016004 <__pow5mult+0xa0>
 8015fec:	6820      	ldr	r0, [r4, #0]
 8015fee:	b938      	cbnz	r0, 8016000 <__pow5mult+0x9c>
 8015ff0:	4622      	mov	r2, r4
 8015ff2:	4621      	mov	r1, r4
 8015ff4:	4630      	mov	r0, r6
 8015ff6:	f7ff ff0b 	bl	8015e10 <__multiply>
 8015ffa:	6020      	str	r0, [r4, #0]
 8015ffc:	f8c0 9000 	str.w	r9, [r0]
 8016000:	4604      	mov	r4, r0
 8016002:	e7e4      	b.n	8015fce <__pow5mult+0x6a>
 8016004:	4638      	mov	r0, r7
 8016006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801600a:	bf00      	nop
 801600c:	08017c70 	.word	0x08017c70
 8016010:	08017a26 	.word	0x08017a26
 8016014:	08017b24 	.word	0x08017b24

08016018 <__lshift>:
 8016018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801601c:	460c      	mov	r4, r1
 801601e:	6849      	ldr	r1, [r1, #4]
 8016020:	6923      	ldr	r3, [r4, #16]
 8016022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016026:	68a3      	ldr	r3, [r4, #8]
 8016028:	4607      	mov	r7, r0
 801602a:	4691      	mov	r9, r2
 801602c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016030:	f108 0601 	add.w	r6, r8, #1
 8016034:	42b3      	cmp	r3, r6
 8016036:	db0b      	blt.n	8016050 <__lshift+0x38>
 8016038:	4638      	mov	r0, r7
 801603a:	f7ff fd91 	bl	8015b60 <_Balloc>
 801603e:	4605      	mov	r5, r0
 8016040:	b948      	cbnz	r0, 8016056 <__lshift+0x3e>
 8016042:	4602      	mov	r2, r0
 8016044:	4b2a      	ldr	r3, [pc, #168]	; (80160f0 <__lshift+0xd8>)
 8016046:	482b      	ldr	r0, [pc, #172]	; (80160f4 <__lshift+0xdc>)
 8016048:	f240 11d9 	movw	r1, #473	; 0x1d9
 801604c:	f000 fcd2 	bl	80169f4 <__assert_func>
 8016050:	3101      	adds	r1, #1
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	e7ee      	b.n	8016034 <__lshift+0x1c>
 8016056:	2300      	movs	r3, #0
 8016058:	f100 0114 	add.w	r1, r0, #20
 801605c:	f100 0210 	add.w	r2, r0, #16
 8016060:	4618      	mov	r0, r3
 8016062:	4553      	cmp	r3, sl
 8016064:	db37      	blt.n	80160d6 <__lshift+0xbe>
 8016066:	6920      	ldr	r0, [r4, #16]
 8016068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801606c:	f104 0314 	add.w	r3, r4, #20
 8016070:	f019 091f 	ands.w	r9, r9, #31
 8016074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801607c:	d02f      	beq.n	80160de <__lshift+0xc6>
 801607e:	f1c9 0e20 	rsb	lr, r9, #32
 8016082:	468a      	mov	sl, r1
 8016084:	f04f 0c00 	mov.w	ip, #0
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	fa02 f209 	lsl.w	r2, r2, r9
 801608e:	ea42 020c 	orr.w	r2, r2, ip
 8016092:	f84a 2b04 	str.w	r2, [sl], #4
 8016096:	f853 2b04 	ldr.w	r2, [r3], #4
 801609a:	4298      	cmp	r0, r3
 801609c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80160a0:	d8f2      	bhi.n	8016088 <__lshift+0x70>
 80160a2:	1b03      	subs	r3, r0, r4
 80160a4:	3b15      	subs	r3, #21
 80160a6:	f023 0303 	bic.w	r3, r3, #3
 80160aa:	3304      	adds	r3, #4
 80160ac:	f104 0215 	add.w	r2, r4, #21
 80160b0:	4290      	cmp	r0, r2
 80160b2:	bf38      	it	cc
 80160b4:	2304      	movcc	r3, #4
 80160b6:	f841 c003 	str.w	ip, [r1, r3]
 80160ba:	f1bc 0f00 	cmp.w	ip, #0
 80160be:	d001      	beq.n	80160c4 <__lshift+0xac>
 80160c0:	f108 0602 	add.w	r6, r8, #2
 80160c4:	3e01      	subs	r6, #1
 80160c6:	4638      	mov	r0, r7
 80160c8:	612e      	str	r6, [r5, #16]
 80160ca:	4621      	mov	r1, r4
 80160cc:	f7ff fd88 	bl	8015be0 <_Bfree>
 80160d0:	4628      	mov	r0, r5
 80160d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80160da:	3301      	adds	r3, #1
 80160dc:	e7c1      	b.n	8016062 <__lshift+0x4a>
 80160de:	3904      	subs	r1, #4
 80160e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80160e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80160e8:	4298      	cmp	r0, r3
 80160ea:	d8f9      	bhi.n	80160e0 <__lshift+0xc8>
 80160ec:	e7ea      	b.n	80160c4 <__lshift+0xac>
 80160ee:	bf00      	nop
 80160f0:	08017a98 	.word	0x08017a98
 80160f4:	08017b24 	.word	0x08017b24

080160f8 <__mcmp>:
 80160f8:	b530      	push	{r4, r5, lr}
 80160fa:	6902      	ldr	r2, [r0, #16]
 80160fc:	690c      	ldr	r4, [r1, #16]
 80160fe:	1b12      	subs	r2, r2, r4
 8016100:	d10e      	bne.n	8016120 <__mcmp+0x28>
 8016102:	f100 0314 	add.w	r3, r0, #20
 8016106:	3114      	adds	r1, #20
 8016108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801610c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016118:	42a5      	cmp	r5, r4
 801611a:	d003      	beq.n	8016124 <__mcmp+0x2c>
 801611c:	d305      	bcc.n	801612a <__mcmp+0x32>
 801611e:	2201      	movs	r2, #1
 8016120:	4610      	mov	r0, r2
 8016122:	bd30      	pop	{r4, r5, pc}
 8016124:	4283      	cmp	r3, r0
 8016126:	d3f3      	bcc.n	8016110 <__mcmp+0x18>
 8016128:	e7fa      	b.n	8016120 <__mcmp+0x28>
 801612a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801612e:	e7f7      	b.n	8016120 <__mcmp+0x28>

08016130 <__mdiff>:
 8016130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	460c      	mov	r4, r1
 8016136:	4606      	mov	r6, r0
 8016138:	4611      	mov	r1, r2
 801613a:	4620      	mov	r0, r4
 801613c:	4690      	mov	r8, r2
 801613e:	f7ff ffdb 	bl	80160f8 <__mcmp>
 8016142:	1e05      	subs	r5, r0, #0
 8016144:	d110      	bne.n	8016168 <__mdiff+0x38>
 8016146:	4629      	mov	r1, r5
 8016148:	4630      	mov	r0, r6
 801614a:	f7ff fd09 	bl	8015b60 <_Balloc>
 801614e:	b930      	cbnz	r0, 801615e <__mdiff+0x2e>
 8016150:	4b3a      	ldr	r3, [pc, #232]	; (801623c <__mdiff+0x10c>)
 8016152:	4602      	mov	r2, r0
 8016154:	f240 2132 	movw	r1, #562	; 0x232
 8016158:	4839      	ldr	r0, [pc, #228]	; (8016240 <__mdiff+0x110>)
 801615a:	f000 fc4b 	bl	80169f4 <__assert_func>
 801615e:	2301      	movs	r3, #1
 8016160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016168:	bfa4      	itt	ge
 801616a:	4643      	movge	r3, r8
 801616c:	46a0      	movge	r8, r4
 801616e:	4630      	mov	r0, r6
 8016170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016174:	bfa6      	itte	ge
 8016176:	461c      	movge	r4, r3
 8016178:	2500      	movge	r5, #0
 801617a:	2501      	movlt	r5, #1
 801617c:	f7ff fcf0 	bl	8015b60 <_Balloc>
 8016180:	b920      	cbnz	r0, 801618c <__mdiff+0x5c>
 8016182:	4b2e      	ldr	r3, [pc, #184]	; (801623c <__mdiff+0x10c>)
 8016184:	4602      	mov	r2, r0
 8016186:	f44f 7110 	mov.w	r1, #576	; 0x240
 801618a:	e7e5      	b.n	8016158 <__mdiff+0x28>
 801618c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016190:	6926      	ldr	r6, [r4, #16]
 8016192:	60c5      	str	r5, [r0, #12]
 8016194:	f104 0914 	add.w	r9, r4, #20
 8016198:	f108 0514 	add.w	r5, r8, #20
 801619c:	f100 0e14 	add.w	lr, r0, #20
 80161a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80161a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80161a8:	f108 0210 	add.w	r2, r8, #16
 80161ac:	46f2      	mov	sl, lr
 80161ae:	2100      	movs	r1, #0
 80161b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80161b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80161b8:	fa1f f883 	uxth.w	r8, r3
 80161bc:	fa11 f18b 	uxtah	r1, r1, fp
 80161c0:	0c1b      	lsrs	r3, r3, #16
 80161c2:	eba1 0808 	sub.w	r8, r1, r8
 80161c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80161ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80161ce:	fa1f f888 	uxth.w	r8, r8
 80161d2:	1419      	asrs	r1, r3, #16
 80161d4:	454e      	cmp	r6, r9
 80161d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80161da:	f84a 3b04 	str.w	r3, [sl], #4
 80161de:	d8e7      	bhi.n	80161b0 <__mdiff+0x80>
 80161e0:	1b33      	subs	r3, r6, r4
 80161e2:	3b15      	subs	r3, #21
 80161e4:	f023 0303 	bic.w	r3, r3, #3
 80161e8:	3304      	adds	r3, #4
 80161ea:	3415      	adds	r4, #21
 80161ec:	42a6      	cmp	r6, r4
 80161ee:	bf38      	it	cc
 80161f0:	2304      	movcc	r3, #4
 80161f2:	441d      	add	r5, r3
 80161f4:	4473      	add	r3, lr
 80161f6:	469e      	mov	lr, r3
 80161f8:	462e      	mov	r6, r5
 80161fa:	4566      	cmp	r6, ip
 80161fc:	d30e      	bcc.n	801621c <__mdiff+0xec>
 80161fe:	f10c 0203 	add.w	r2, ip, #3
 8016202:	1b52      	subs	r2, r2, r5
 8016204:	f022 0203 	bic.w	r2, r2, #3
 8016208:	3d03      	subs	r5, #3
 801620a:	45ac      	cmp	ip, r5
 801620c:	bf38      	it	cc
 801620e:	2200      	movcc	r2, #0
 8016210:	441a      	add	r2, r3
 8016212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016216:	b17b      	cbz	r3, 8016238 <__mdiff+0x108>
 8016218:	6107      	str	r7, [r0, #16]
 801621a:	e7a3      	b.n	8016164 <__mdiff+0x34>
 801621c:	f856 8b04 	ldr.w	r8, [r6], #4
 8016220:	fa11 f288 	uxtah	r2, r1, r8
 8016224:	1414      	asrs	r4, r2, #16
 8016226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801622a:	b292      	uxth	r2, r2
 801622c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016230:	f84e 2b04 	str.w	r2, [lr], #4
 8016234:	1421      	asrs	r1, r4, #16
 8016236:	e7e0      	b.n	80161fa <__mdiff+0xca>
 8016238:	3f01      	subs	r7, #1
 801623a:	e7ea      	b.n	8016212 <__mdiff+0xe2>
 801623c:	08017a98 	.word	0x08017a98
 8016240:	08017b24 	.word	0x08017b24

08016244 <__ulp>:
 8016244:	b082      	sub	sp, #8
 8016246:	ed8d 0b00 	vstr	d0, [sp]
 801624a:	9b01      	ldr	r3, [sp, #4]
 801624c:	4912      	ldr	r1, [pc, #72]	; (8016298 <__ulp+0x54>)
 801624e:	4019      	ands	r1, r3
 8016250:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016254:	2900      	cmp	r1, #0
 8016256:	dd05      	ble.n	8016264 <__ulp+0x20>
 8016258:	2200      	movs	r2, #0
 801625a:	460b      	mov	r3, r1
 801625c:	ec43 2b10 	vmov	d0, r2, r3
 8016260:	b002      	add	sp, #8
 8016262:	4770      	bx	lr
 8016264:	4249      	negs	r1, r1
 8016266:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801626a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801626e:	f04f 0200 	mov.w	r2, #0
 8016272:	f04f 0300 	mov.w	r3, #0
 8016276:	da04      	bge.n	8016282 <__ulp+0x3e>
 8016278:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801627c:	fa41 f300 	asr.w	r3, r1, r0
 8016280:	e7ec      	b.n	801625c <__ulp+0x18>
 8016282:	f1a0 0114 	sub.w	r1, r0, #20
 8016286:	291e      	cmp	r1, #30
 8016288:	bfda      	itte	le
 801628a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801628e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016292:	2101      	movgt	r1, #1
 8016294:	460a      	mov	r2, r1
 8016296:	e7e1      	b.n	801625c <__ulp+0x18>
 8016298:	7ff00000 	.word	0x7ff00000

0801629c <__b2d>:
 801629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801629e:	6905      	ldr	r5, [r0, #16]
 80162a0:	f100 0714 	add.w	r7, r0, #20
 80162a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80162a8:	1f2e      	subs	r6, r5, #4
 80162aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80162ae:	4620      	mov	r0, r4
 80162b0:	f7ff fd48 	bl	8015d44 <__hi0bits>
 80162b4:	f1c0 0320 	rsb	r3, r0, #32
 80162b8:	280a      	cmp	r0, #10
 80162ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016338 <__b2d+0x9c>
 80162be:	600b      	str	r3, [r1, #0]
 80162c0:	dc14      	bgt.n	80162ec <__b2d+0x50>
 80162c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80162c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80162ca:	42b7      	cmp	r7, r6
 80162cc:	ea41 030c 	orr.w	r3, r1, ip
 80162d0:	bf34      	ite	cc
 80162d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80162d6:	2100      	movcs	r1, #0
 80162d8:	3015      	adds	r0, #21
 80162da:	fa04 f000 	lsl.w	r0, r4, r0
 80162de:	fa21 f10e 	lsr.w	r1, r1, lr
 80162e2:	ea40 0201 	orr.w	r2, r0, r1
 80162e6:	ec43 2b10 	vmov	d0, r2, r3
 80162ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162ec:	42b7      	cmp	r7, r6
 80162ee:	bf3a      	itte	cc
 80162f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80162f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80162f8:	2100      	movcs	r1, #0
 80162fa:	380b      	subs	r0, #11
 80162fc:	d017      	beq.n	801632e <__b2d+0x92>
 80162fe:	f1c0 0c20 	rsb	ip, r0, #32
 8016302:	fa04 f500 	lsl.w	r5, r4, r0
 8016306:	42be      	cmp	r6, r7
 8016308:	fa21 f40c 	lsr.w	r4, r1, ip
 801630c:	ea45 0504 	orr.w	r5, r5, r4
 8016310:	bf8c      	ite	hi
 8016312:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016316:	2400      	movls	r4, #0
 8016318:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801631c:	fa01 f000 	lsl.w	r0, r1, r0
 8016320:	fa24 f40c 	lsr.w	r4, r4, ip
 8016324:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016328:	ea40 0204 	orr.w	r2, r0, r4
 801632c:	e7db      	b.n	80162e6 <__b2d+0x4a>
 801632e:	ea44 030c 	orr.w	r3, r4, ip
 8016332:	460a      	mov	r2, r1
 8016334:	e7d7      	b.n	80162e6 <__b2d+0x4a>
 8016336:	bf00      	nop
 8016338:	3ff00000 	.word	0x3ff00000

0801633c <__d2b>:
 801633c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016340:	4689      	mov	r9, r1
 8016342:	2101      	movs	r1, #1
 8016344:	ec57 6b10 	vmov	r6, r7, d0
 8016348:	4690      	mov	r8, r2
 801634a:	f7ff fc09 	bl	8015b60 <_Balloc>
 801634e:	4604      	mov	r4, r0
 8016350:	b930      	cbnz	r0, 8016360 <__d2b+0x24>
 8016352:	4602      	mov	r2, r0
 8016354:	4b25      	ldr	r3, [pc, #148]	; (80163ec <__d2b+0xb0>)
 8016356:	4826      	ldr	r0, [pc, #152]	; (80163f0 <__d2b+0xb4>)
 8016358:	f240 310a 	movw	r1, #778	; 0x30a
 801635c:	f000 fb4a 	bl	80169f4 <__assert_func>
 8016360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016368:	bb35      	cbnz	r5, 80163b8 <__d2b+0x7c>
 801636a:	2e00      	cmp	r6, #0
 801636c:	9301      	str	r3, [sp, #4]
 801636e:	d028      	beq.n	80163c2 <__d2b+0x86>
 8016370:	4668      	mov	r0, sp
 8016372:	9600      	str	r6, [sp, #0]
 8016374:	f7ff fd06 	bl	8015d84 <__lo0bits>
 8016378:	9900      	ldr	r1, [sp, #0]
 801637a:	b300      	cbz	r0, 80163be <__d2b+0x82>
 801637c:	9a01      	ldr	r2, [sp, #4]
 801637e:	f1c0 0320 	rsb	r3, r0, #32
 8016382:	fa02 f303 	lsl.w	r3, r2, r3
 8016386:	430b      	orrs	r3, r1
 8016388:	40c2      	lsrs	r2, r0
 801638a:	6163      	str	r3, [r4, #20]
 801638c:	9201      	str	r2, [sp, #4]
 801638e:	9b01      	ldr	r3, [sp, #4]
 8016390:	61a3      	str	r3, [r4, #24]
 8016392:	2b00      	cmp	r3, #0
 8016394:	bf14      	ite	ne
 8016396:	2202      	movne	r2, #2
 8016398:	2201      	moveq	r2, #1
 801639a:	6122      	str	r2, [r4, #16]
 801639c:	b1d5      	cbz	r5, 80163d4 <__d2b+0x98>
 801639e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80163a2:	4405      	add	r5, r0
 80163a4:	f8c9 5000 	str.w	r5, [r9]
 80163a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80163ac:	f8c8 0000 	str.w	r0, [r8]
 80163b0:	4620      	mov	r0, r4
 80163b2:	b003      	add	sp, #12
 80163b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80163bc:	e7d5      	b.n	801636a <__d2b+0x2e>
 80163be:	6161      	str	r1, [r4, #20]
 80163c0:	e7e5      	b.n	801638e <__d2b+0x52>
 80163c2:	a801      	add	r0, sp, #4
 80163c4:	f7ff fcde 	bl	8015d84 <__lo0bits>
 80163c8:	9b01      	ldr	r3, [sp, #4]
 80163ca:	6163      	str	r3, [r4, #20]
 80163cc:	2201      	movs	r2, #1
 80163ce:	6122      	str	r2, [r4, #16]
 80163d0:	3020      	adds	r0, #32
 80163d2:	e7e3      	b.n	801639c <__d2b+0x60>
 80163d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80163d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80163dc:	f8c9 0000 	str.w	r0, [r9]
 80163e0:	6918      	ldr	r0, [r3, #16]
 80163e2:	f7ff fcaf 	bl	8015d44 <__hi0bits>
 80163e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80163ea:	e7df      	b.n	80163ac <__d2b+0x70>
 80163ec:	08017a98 	.word	0x08017a98
 80163f0:	08017b24 	.word	0x08017b24

080163f4 <__ratio>:
 80163f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	4688      	mov	r8, r1
 80163fa:	4669      	mov	r1, sp
 80163fc:	4681      	mov	r9, r0
 80163fe:	f7ff ff4d 	bl	801629c <__b2d>
 8016402:	a901      	add	r1, sp, #4
 8016404:	4640      	mov	r0, r8
 8016406:	ec55 4b10 	vmov	r4, r5, d0
 801640a:	ee10 aa10 	vmov	sl, s0
 801640e:	f7ff ff45 	bl	801629c <__b2d>
 8016412:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016416:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801641a:	1a59      	subs	r1, r3, r1
 801641c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016420:	1ad3      	subs	r3, r2, r3
 8016422:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016426:	ec57 6b10 	vmov	r6, r7, d0
 801642a:	2b00      	cmp	r3, #0
 801642c:	bfd6      	itet	le
 801642e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016432:	462a      	movgt	r2, r5
 8016434:	463a      	movle	r2, r7
 8016436:	46ab      	mov	fp, r5
 8016438:	bfd6      	itet	le
 801643a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801643e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016442:	ee00 3a90 	vmovle	s1, r3
 8016446:	ec4b ab17 	vmov	d7, sl, fp
 801644a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801644e:	b003      	add	sp, #12
 8016450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016454 <__copybits>:
 8016454:	3901      	subs	r1, #1
 8016456:	b570      	push	{r4, r5, r6, lr}
 8016458:	1149      	asrs	r1, r1, #5
 801645a:	6914      	ldr	r4, [r2, #16]
 801645c:	3101      	adds	r1, #1
 801645e:	f102 0314 	add.w	r3, r2, #20
 8016462:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016466:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801646a:	1f05      	subs	r5, r0, #4
 801646c:	42a3      	cmp	r3, r4
 801646e:	d30c      	bcc.n	801648a <__copybits+0x36>
 8016470:	1aa3      	subs	r3, r4, r2
 8016472:	3b11      	subs	r3, #17
 8016474:	f023 0303 	bic.w	r3, r3, #3
 8016478:	3211      	adds	r2, #17
 801647a:	42a2      	cmp	r2, r4
 801647c:	bf88      	it	hi
 801647e:	2300      	movhi	r3, #0
 8016480:	4418      	add	r0, r3
 8016482:	2300      	movs	r3, #0
 8016484:	4288      	cmp	r0, r1
 8016486:	d305      	bcc.n	8016494 <__copybits+0x40>
 8016488:	bd70      	pop	{r4, r5, r6, pc}
 801648a:	f853 6b04 	ldr.w	r6, [r3], #4
 801648e:	f845 6f04 	str.w	r6, [r5, #4]!
 8016492:	e7eb      	b.n	801646c <__copybits+0x18>
 8016494:	f840 3b04 	str.w	r3, [r0], #4
 8016498:	e7f4      	b.n	8016484 <__copybits+0x30>

0801649a <__any_on>:
 801649a:	f100 0214 	add.w	r2, r0, #20
 801649e:	6900      	ldr	r0, [r0, #16]
 80164a0:	114b      	asrs	r3, r1, #5
 80164a2:	4298      	cmp	r0, r3
 80164a4:	b510      	push	{r4, lr}
 80164a6:	db11      	blt.n	80164cc <__any_on+0x32>
 80164a8:	dd0a      	ble.n	80164c0 <__any_on+0x26>
 80164aa:	f011 011f 	ands.w	r1, r1, #31
 80164ae:	d007      	beq.n	80164c0 <__any_on+0x26>
 80164b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80164b4:	fa24 f001 	lsr.w	r0, r4, r1
 80164b8:	fa00 f101 	lsl.w	r1, r0, r1
 80164bc:	428c      	cmp	r4, r1
 80164be:	d10b      	bne.n	80164d8 <__any_on+0x3e>
 80164c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80164c4:	4293      	cmp	r3, r2
 80164c6:	d803      	bhi.n	80164d0 <__any_on+0x36>
 80164c8:	2000      	movs	r0, #0
 80164ca:	bd10      	pop	{r4, pc}
 80164cc:	4603      	mov	r3, r0
 80164ce:	e7f7      	b.n	80164c0 <__any_on+0x26>
 80164d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80164d4:	2900      	cmp	r1, #0
 80164d6:	d0f5      	beq.n	80164c4 <__any_on+0x2a>
 80164d8:	2001      	movs	r0, #1
 80164da:	e7f6      	b.n	80164ca <__any_on+0x30>

080164dc <_calloc_r>:
 80164dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164de:	fba1 2402 	umull	r2, r4, r1, r2
 80164e2:	b94c      	cbnz	r4, 80164f8 <_calloc_r+0x1c>
 80164e4:	4611      	mov	r1, r2
 80164e6:	9201      	str	r2, [sp, #4]
 80164e8:	f000 f87a 	bl	80165e0 <_malloc_r>
 80164ec:	9a01      	ldr	r2, [sp, #4]
 80164ee:	4605      	mov	r5, r0
 80164f0:	b930      	cbnz	r0, 8016500 <_calloc_r+0x24>
 80164f2:	4628      	mov	r0, r5
 80164f4:	b003      	add	sp, #12
 80164f6:	bd30      	pop	{r4, r5, pc}
 80164f8:	220c      	movs	r2, #12
 80164fa:	6002      	str	r2, [r0, #0]
 80164fc:	2500      	movs	r5, #0
 80164fe:	e7f8      	b.n	80164f2 <_calloc_r+0x16>
 8016500:	4621      	mov	r1, r4
 8016502:	f7fc fca1 	bl	8012e48 <memset>
 8016506:	e7f4      	b.n	80164f2 <_calloc_r+0x16>

08016508 <_free_r>:
 8016508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801650a:	2900      	cmp	r1, #0
 801650c:	d044      	beq.n	8016598 <_free_r+0x90>
 801650e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016512:	9001      	str	r0, [sp, #4]
 8016514:	2b00      	cmp	r3, #0
 8016516:	f1a1 0404 	sub.w	r4, r1, #4
 801651a:	bfb8      	it	lt
 801651c:	18e4      	addlt	r4, r4, r3
 801651e:	f000 fab3 	bl	8016a88 <__malloc_lock>
 8016522:	4a1e      	ldr	r2, [pc, #120]	; (801659c <_free_r+0x94>)
 8016524:	9801      	ldr	r0, [sp, #4]
 8016526:	6813      	ldr	r3, [r2, #0]
 8016528:	b933      	cbnz	r3, 8016538 <_free_r+0x30>
 801652a:	6063      	str	r3, [r4, #4]
 801652c:	6014      	str	r4, [r2, #0]
 801652e:	b003      	add	sp, #12
 8016530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016534:	f000 baae 	b.w	8016a94 <__malloc_unlock>
 8016538:	42a3      	cmp	r3, r4
 801653a:	d908      	bls.n	801654e <_free_r+0x46>
 801653c:	6825      	ldr	r5, [r4, #0]
 801653e:	1961      	adds	r1, r4, r5
 8016540:	428b      	cmp	r3, r1
 8016542:	bf01      	itttt	eq
 8016544:	6819      	ldreq	r1, [r3, #0]
 8016546:	685b      	ldreq	r3, [r3, #4]
 8016548:	1949      	addeq	r1, r1, r5
 801654a:	6021      	streq	r1, [r4, #0]
 801654c:	e7ed      	b.n	801652a <_free_r+0x22>
 801654e:	461a      	mov	r2, r3
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	b10b      	cbz	r3, 8016558 <_free_r+0x50>
 8016554:	42a3      	cmp	r3, r4
 8016556:	d9fa      	bls.n	801654e <_free_r+0x46>
 8016558:	6811      	ldr	r1, [r2, #0]
 801655a:	1855      	adds	r5, r2, r1
 801655c:	42a5      	cmp	r5, r4
 801655e:	d10b      	bne.n	8016578 <_free_r+0x70>
 8016560:	6824      	ldr	r4, [r4, #0]
 8016562:	4421      	add	r1, r4
 8016564:	1854      	adds	r4, r2, r1
 8016566:	42a3      	cmp	r3, r4
 8016568:	6011      	str	r1, [r2, #0]
 801656a:	d1e0      	bne.n	801652e <_free_r+0x26>
 801656c:	681c      	ldr	r4, [r3, #0]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	6053      	str	r3, [r2, #4]
 8016572:	4421      	add	r1, r4
 8016574:	6011      	str	r1, [r2, #0]
 8016576:	e7da      	b.n	801652e <_free_r+0x26>
 8016578:	d902      	bls.n	8016580 <_free_r+0x78>
 801657a:	230c      	movs	r3, #12
 801657c:	6003      	str	r3, [r0, #0]
 801657e:	e7d6      	b.n	801652e <_free_r+0x26>
 8016580:	6825      	ldr	r5, [r4, #0]
 8016582:	1961      	adds	r1, r4, r5
 8016584:	428b      	cmp	r3, r1
 8016586:	bf04      	itt	eq
 8016588:	6819      	ldreq	r1, [r3, #0]
 801658a:	685b      	ldreq	r3, [r3, #4]
 801658c:	6063      	str	r3, [r4, #4]
 801658e:	bf04      	itt	eq
 8016590:	1949      	addeq	r1, r1, r5
 8016592:	6021      	streq	r1, [r4, #0]
 8016594:	6054      	str	r4, [r2, #4]
 8016596:	e7ca      	b.n	801652e <_free_r+0x26>
 8016598:	b003      	add	sp, #12
 801659a:	bd30      	pop	{r4, r5, pc}
 801659c:	24002d04 	.word	0x24002d04

080165a0 <sbrk_aligned>:
 80165a0:	b570      	push	{r4, r5, r6, lr}
 80165a2:	4e0e      	ldr	r6, [pc, #56]	; (80165dc <sbrk_aligned+0x3c>)
 80165a4:	460c      	mov	r4, r1
 80165a6:	6831      	ldr	r1, [r6, #0]
 80165a8:	4605      	mov	r5, r0
 80165aa:	b911      	cbnz	r1, 80165b2 <sbrk_aligned+0x12>
 80165ac:	f000 f9f0 	bl	8016990 <_sbrk_r>
 80165b0:	6030      	str	r0, [r6, #0]
 80165b2:	4621      	mov	r1, r4
 80165b4:	4628      	mov	r0, r5
 80165b6:	f000 f9eb 	bl	8016990 <_sbrk_r>
 80165ba:	1c43      	adds	r3, r0, #1
 80165bc:	d00a      	beq.n	80165d4 <sbrk_aligned+0x34>
 80165be:	1cc4      	adds	r4, r0, #3
 80165c0:	f024 0403 	bic.w	r4, r4, #3
 80165c4:	42a0      	cmp	r0, r4
 80165c6:	d007      	beq.n	80165d8 <sbrk_aligned+0x38>
 80165c8:	1a21      	subs	r1, r4, r0
 80165ca:	4628      	mov	r0, r5
 80165cc:	f000 f9e0 	bl	8016990 <_sbrk_r>
 80165d0:	3001      	adds	r0, #1
 80165d2:	d101      	bne.n	80165d8 <sbrk_aligned+0x38>
 80165d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80165d8:	4620      	mov	r0, r4
 80165da:	bd70      	pop	{r4, r5, r6, pc}
 80165dc:	24002d08 	.word	0x24002d08

080165e0 <_malloc_r>:
 80165e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165e4:	1ccd      	adds	r5, r1, #3
 80165e6:	f025 0503 	bic.w	r5, r5, #3
 80165ea:	3508      	adds	r5, #8
 80165ec:	2d0c      	cmp	r5, #12
 80165ee:	bf38      	it	cc
 80165f0:	250c      	movcc	r5, #12
 80165f2:	2d00      	cmp	r5, #0
 80165f4:	4607      	mov	r7, r0
 80165f6:	db01      	blt.n	80165fc <_malloc_r+0x1c>
 80165f8:	42a9      	cmp	r1, r5
 80165fa:	d905      	bls.n	8016608 <_malloc_r+0x28>
 80165fc:	230c      	movs	r3, #12
 80165fe:	603b      	str	r3, [r7, #0]
 8016600:	2600      	movs	r6, #0
 8016602:	4630      	mov	r0, r6
 8016604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016608:	4e2e      	ldr	r6, [pc, #184]	; (80166c4 <_malloc_r+0xe4>)
 801660a:	f000 fa3d 	bl	8016a88 <__malloc_lock>
 801660e:	6833      	ldr	r3, [r6, #0]
 8016610:	461c      	mov	r4, r3
 8016612:	bb34      	cbnz	r4, 8016662 <_malloc_r+0x82>
 8016614:	4629      	mov	r1, r5
 8016616:	4638      	mov	r0, r7
 8016618:	f7ff ffc2 	bl	80165a0 <sbrk_aligned>
 801661c:	1c43      	adds	r3, r0, #1
 801661e:	4604      	mov	r4, r0
 8016620:	d14d      	bne.n	80166be <_malloc_r+0xde>
 8016622:	6834      	ldr	r4, [r6, #0]
 8016624:	4626      	mov	r6, r4
 8016626:	2e00      	cmp	r6, #0
 8016628:	d140      	bne.n	80166ac <_malloc_r+0xcc>
 801662a:	6823      	ldr	r3, [r4, #0]
 801662c:	4631      	mov	r1, r6
 801662e:	4638      	mov	r0, r7
 8016630:	eb04 0803 	add.w	r8, r4, r3
 8016634:	f000 f9ac 	bl	8016990 <_sbrk_r>
 8016638:	4580      	cmp	r8, r0
 801663a:	d13a      	bne.n	80166b2 <_malloc_r+0xd2>
 801663c:	6821      	ldr	r1, [r4, #0]
 801663e:	3503      	adds	r5, #3
 8016640:	1a6d      	subs	r5, r5, r1
 8016642:	f025 0503 	bic.w	r5, r5, #3
 8016646:	3508      	adds	r5, #8
 8016648:	2d0c      	cmp	r5, #12
 801664a:	bf38      	it	cc
 801664c:	250c      	movcc	r5, #12
 801664e:	4629      	mov	r1, r5
 8016650:	4638      	mov	r0, r7
 8016652:	f7ff ffa5 	bl	80165a0 <sbrk_aligned>
 8016656:	3001      	adds	r0, #1
 8016658:	d02b      	beq.n	80166b2 <_malloc_r+0xd2>
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	442b      	add	r3, r5
 801665e:	6023      	str	r3, [r4, #0]
 8016660:	e00e      	b.n	8016680 <_malloc_r+0xa0>
 8016662:	6822      	ldr	r2, [r4, #0]
 8016664:	1b52      	subs	r2, r2, r5
 8016666:	d41e      	bmi.n	80166a6 <_malloc_r+0xc6>
 8016668:	2a0b      	cmp	r2, #11
 801666a:	d916      	bls.n	801669a <_malloc_r+0xba>
 801666c:	1961      	adds	r1, r4, r5
 801666e:	42a3      	cmp	r3, r4
 8016670:	6025      	str	r5, [r4, #0]
 8016672:	bf18      	it	ne
 8016674:	6059      	strne	r1, [r3, #4]
 8016676:	6863      	ldr	r3, [r4, #4]
 8016678:	bf08      	it	eq
 801667a:	6031      	streq	r1, [r6, #0]
 801667c:	5162      	str	r2, [r4, r5]
 801667e:	604b      	str	r3, [r1, #4]
 8016680:	4638      	mov	r0, r7
 8016682:	f104 060b 	add.w	r6, r4, #11
 8016686:	f000 fa05 	bl	8016a94 <__malloc_unlock>
 801668a:	f026 0607 	bic.w	r6, r6, #7
 801668e:	1d23      	adds	r3, r4, #4
 8016690:	1af2      	subs	r2, r6, r3
 8016692:	d0b6      	beq.n	8016602 <_malloc_r+0x22>
 8016694:	1b9b      	subs	r3, r3, r6
 8016696:	50a3      	str	r3, [r4, r2]
 8016698:	e7b3      	b.n	8016602 <_malloc_r+0x22>
 801669a:	6862      	ldr	r2, [r4, #4]
 801669c:	42a3      	cmp	r3, r4
 801669e:	bf0c      	ite	eq
 80166a0:	6032      	streq	r2, [r6, #0]
 80166a2:	605a      	strne	r2, [r3, #4]
 80166a4:	e7ec      	b.n	8016680 <_malloc_r+0xa0>
 80166a6:	4623      	mov	r3, r4
 80166a8:	6864      	ldr	r4, [r4, #4]
 80166aa:	e7b2      	b.n	8016612 <_malloc_r+0x32>
 80166ac:	4634      	mov	r4, r6
 80166ae:	6876      	ldr	r6, [r6, #4]
 80166b0:	e7b9      	b.n	8016626 <_malloc_r+0x46>
 80166b2:	230c      	movs	r3, #12
 80166b4:	603b      	str	r3, [r7, #0]
 80166b6:	4638      	mov	r0, r7
 80166b8:	f000 f9ec 	bl	8016a94 <__malloc_unlock>
 80166bc:	e7a1      	b.n	8016602 <_malloc_r+0x22>
 80166be:	6025      	str	r5, [r4, #0]
 80166c0:	e7de      	b.n	8016680 <_malloc_r+0xa0>
 80166c2:	bf00      	nop
 80166c4:	24002d04 	.word	0x24002d04

080166c8 <__ssputs_r>:
 80166c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166cc:	688e      	ldr	r6, [r1, #8]
 80166ce:	429e      	cmp	r6, r3
 80166d0:	4682      	mov	sl, r0
 80166d2:	460c      	mov	r4, r1
 80166d4:	4690      	mov	r8, r2
 80166d6:	461f      	mov	r7, r3
 80166d8:	d838      	bhi.n	801674c <__ssputs_r+0x84>
 80166da:	898a      	ldrh	r2, [r1, #12]
 80166dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80166e0:	d032      	beq.n	8016748 <__ssputs_r+0x80>
 80166e2:	6825      	ldr	r5, [r4, #0]
 80166e4:	6909      	ldr	r1, [r1, #16]
 80166e6:	eba5 0901 	sub.w	r9, r5, r1
 80166ea:	6965      	ldr	r5, [r4, #20]
 80166ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80166f4:	3301      	adds	r3, #1
 80166f6:	444b      	add	r3, r9
 80166f8:	106d      	asrs	r5, r5, #1
 80166fa:	429d      	cmp	r5, r3
 80166fc:	bf38      	it	cc
 80166fe:	461d      	movcc	r5, r3
 8016700:	0553      	lsls	r3, r2, #21
 8016702:	d531      	bpl.n	8016768 <__ssputs_r+0xa0>
 8016704:	4629      	mov	r1, r5
 8016706:	f7ff ff6b 	bl	80165e0 <_malloc_r>
 801670a:	4606      	mov	r6, r0
 801670c:	b950      	cbnz	r0, 8016724 <__ssputs_r+0x5c>
 801670e:	230c      	movs	r3, #12
 8016710:	f8ca 3000 	str.w	r3, [sl]
 8016714:	89a3      	ldrh	r3, [r4, #12]
 8016716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801671a:	81a3      	strh	r3, [r4, #12]
 801671c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016724:	6921      	ldr	r1, [r4, #16]
 8016726:	464a      	mov	r2, r9
 8016728:	f7fc fb80 	bl	8012e2c <memcpy>
 801672c:	89a3      	ldrh	r3, [r4, #12]
 801672e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016736:	81a3      	strh	r3, [r4, #12]
 8016738:	6126      	str	r6, [r4, #16]
 801673a:	6165      	str	r5, [r4, #20]
 801673c:	444e      	add	r6, r9
 801673e:	eba5 0509 	sub.w	r5, r5, r9
 8016742:	6026      	str	r6, [r4, #0]
 8016744:	60a5      	str	r5, [r4, #8]
 8016746:	463e      	mov	r6, r7
 8016748:	42be      	cmp	r6, r7
 801674a:	d900      	bls.n	801674e <__ssputs_r+0x86>
 801674c:	463e      	mov	r6, r7
 801674e:	6820      	ldr	r0, [r4, #0]
 8016750:	4632      	mov	r2, r6
 8016752:	4641      	mov	r1, r8
 8016754:	f000 f97e 	bl	8016a54 <memmove>
 8016758:	68a3      	ldr	r3, [r4, #8]
 801675a:	1b9b      	subs	r3, r3, r6
 801675c:	60a3      	str	r3, [r4, #8]
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	4433      	add	r3, r6
 8016762:	6023      	str	r3, [r4, #0]
 8016764:	2000      	movs	r0, #0
 8016766:	e7db      	b.n	8016720 <__ssputs_r+0x58>
 8016768:	462a      	mov	r2, r5
 801676a:	f000 f999 	bl	8016aa0 <_realloc_r>
 801676e:	4606      	mov	r6, r0
 8016770:	2800      	cmp	r0, #0
 8016772:	d1e1      	bne.n	8016738 <__ssputs_r+0x70>
 8016774:	6921      	ldr	r1, [r4, #16]
 8016776:	4650      	mov	r0, sl
 8016778:	f7ff fec6 	bl	8016508 <_free_r>
 801677c:	e7c7      	b.n	801670e <__ssputs_r+0x46>
	...

08016780 <_svfiprintf_r>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	4698      	mov	r8, r3
 8016786:	898b      	ldrh	r3, [r1, #12]
 8016788:	061b      	lsls	r3, r3, #24
 801678a:	b09d      	sub	sp, #116	; 0x74
 801678c:	4607      	mov	r7, r0
 801678e:	460d      	mov	r5, r1
 8016790:	4614      	mov	r4, r2
 8016792:	d50e      	bpl.n	80167b2 <_svfiprintf_r+0x32>
 8016794:	690b      	ldr	r3, [r1, #16]
 8016796:	b963      	cbnz	r3, 80167b2 <_svfiprintf_r+0x32>
 8016798:	2140      	movs	r1, #64	; 0x40
 801679a:	f7ff ff21 	bl	80165e0 <_malloc_r>
 801679e:	6028      	str	r0, [r5, #0]
 80167a0:	6128      	str	r0, [r5, #16]
 80167a2:	b920      	cbnz	r0, 80167ae <_svfiprintf_r+0x2e>
 80167a4:	230c      	movs	r3, #12
 80167a6:	603b      	str	r3, [r7, #0]
 80167a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167ac:	e0d1      	b.n	8016952 <_svfiprintf_r+0x1d2>
 80167ae:	2340      	movs	r3, #64	; 0x40
 80167b0:	616b      	str	r3, [r5, #20]
 80167b2:	2300      	movs	r3, #0
 80167b4:	9309      	str	r3, [sp, #36]	; 0x24
 80167b6:	2320      	movs	r3, #32
 80167b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80167c0:	2330      	movs	r3, #48	; 0x30
 80167c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801696c <_svfiprintf_r+0x1ec>
 80167c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167ca:	f04f 0901 	mov.w	r9, #1
 80167ce:	4623      	mov	r3, r4
 80167d0:	469a      	mov	sl, r3
 80167d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167d6:	b10a      	cbz	r2, 80167dc <_svfiprintf_r+0x5c>
 80167d8:	2a25      	cmp	r2, #37	; 0x25
 80167da:	d1f9      	bne.n	80167d0 <_svfiprintf_r+0x50>
 80167dc:	ebba 0b04 	subs.w	fp, sl, r4
 80167e0:	d00b      	beq.n	80167fa <_svfiprintf_r+0x7a>
 80167e2:	465b      	mov	r3, fp
 80167e4:	4622      	mov	r2, r4
 80167e6:	4629      	mov	r1, r5
 80167e8:	4638      	mov	r0, r7
 80167ea:	f7ff ff6d 	bl	80166c8 <__ssputs_r>
 80167ee:	3001      	adds	r0, #1
 80167f0:	f000 80aa 	beq.w	8016948 <_svfiprintf_r+0x1c8>
 80167f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167f6:	445a      	add	r2, fp
 80167f8:	9209      	str	r2, [sp, #36]	; 0x24
 80167fa:	f89a 3000 	ldrb.w	r3, [sl]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	f000 80a2 	beq.w	8016948 <_svfiprintf_r+0x1c8>
 8016804:	2300      	movs	r3, #0
 8016806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801680a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801680e:	f10a 0a01 	add.w	sl, sl, #1
 8016812:	9304      	str	r3, [sp, #16]
 8016814:	9307      	str	r3, [sp, #28]
 8016816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801681a:	931a      	str	r3, [sp, #104]	; 0x68
 801681c:	4654      	mov	r4, sl
 801681e:	2205      	movs	r2, #5
 8016820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016824:	4851      	ldr	r0, [pc, #324]	; (801696c <_svfiprintf_r+0x1ec>)
 8016826:	f7e9 fd6b 	bl	8000300 <memchr>
 801682a:	9a04      	ldr	r2, [sp, #16]
 801682c:	b9d8      	cbnz	r0, 8016866 <_svfiprintf_r+0xe6>
 801682e:	06d0      	lsls	r0, r2, #27
 8016830:	bf44      	itt	mi
 8016832:	2320      	movmi	r3, #32
 8016834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016838:	0711      	lsls	r1, r2, #28
 801683a:	bf44      	itt	mi
 801683c:	232b      	movmi	r3, #43	; 0x2b
 801683e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016842:	f89a 3000 	ldrb.w	r3, [sl]
 8016846:	2b2a      	cmp	r3, #42	; 0x2a
 8016848:	d015      	beq.n	8016876 <_svfiprintf_r+0xf6>
 801684a:	9a07      	ldr	r2, [sp, #28]
 801684c:	4654      	mov	r4, sl
 801684e:	2000      	movs	r0, #0
 8016850:	f04f 0c0a 	mov.w	ip, #10
 8016854:	4621      	mov	r1, r4
 8016856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801685a:	3b30      	subs	r3, #48	; 0x30
 801685c:	2b09      	cmp	r3, #9
 801685e:	d94e      	bls.n	80168fe <_svfiprintf_r+0x17e>
 8016860:	b1b0      	cbz	r0, 8016890 <_svfiprintf_r+0x110>
 8016862:	9207      	str	r2, [sp, #28]
 8016864:	e014      	b.n	8016890 <_svfiprintf_r+0x110>
 8016866:	eba0 0308 	sub.w	r3, r0, r8
 801686a:	fa09 f303 	lsl.w	r3, r9, r3
 801686e:	4313      	orrs	r3, r2
 8016870:	9304      	str	r3, [sp, #16]
 8016872:	46a2      	mov	sl, r4
 8016874:	e7d2      	b.n	801681c <_svfiprintf_r+0x9c>
 8016876:	9b03      	ldr	r3, [sp, #12]
 8016878:	1d19      	adds	r1, r3, #4
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	9103      	str	r1, [sp, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	bfbb      	ittet	lt
 8016882:	425b      	neglt	r3, r3
 8016884:	f042 0202 	orrlt.w	r2, r2, #2
 8016888:	9307      	strge	r3, [sp, #28]
 801688a:	9307      	strlt	r3, [sp, #28]
 801688c:	bfb8      	it	lt
 801688e:	9204      	strlt	r2, [sp, #16]
 8016890:	7823      	ldrb	r3, [r4, #0]
 8016892:	2b2e      	cmp	r3, #46	; 0x2e
 8016894:	d10c      	bne.n	80168b0 <_svfiprintf_r+0x130>
 8016896:	7863      	ldrb	r3, [r4, #1]
 8016898:	2b2a      	cmp	r3, #42	; 0x2a
 801689a:	d135      	bne.n	8016908 <_svfiprintf_r+0x188>
 801689c:	9b03      	ldr	r3, [sp, #12]
 801689e:	1d1a      	adds	r2, r3, #4
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	9203      	str	r2, [sp, #12]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	bfb8      	it	lt
 80168a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80168ac:	3402      	adds	r4, #2
 80168ae:	9305      	str	r3, [sp, #20]
 80168b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801697c <_svfiprintf_r+0x1fc>
 80168b4:	7821      	ldrb	r1, [r4, #0]
 80168b6:	2203      	movs	r2, #3
 80168b8:	4650      	mov	r0, sl
 80168ba:	f7e9 fd21 	bl	8000300 <memchr>
 80168be:	b140      	cbz	r0, 80168d2 <_svfiprintf_r+0x152>
 80168c0:	2340      	movs	r3, #64	; 0x40
 80168c2:	eba0 000a 	sub.w	r0, r0, sl
 80168c6:	fa03 f000 	lsl.w	r0, r3, r0
 80168ca:	9b04      	ldr	r3, [sp, #16]
 80168cc:	4303      	orrs	r3, r0
 80168ce:	3401      	adds	r4, #1
 80168d0:	9304      	str	r3, [sp, #16]
 80168d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168d6:	4826      	ldr	r0, [pc, #152]	; (8016970 <_svfiprintf_r+0x1f0>)
 80168d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168dc:	2206      	movs	r2, #6
 80168de:	f7e9 fd0f 	bl	8000300 <memchr>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d038      	beq.n	8016958 <_svfiprintf_r+0x1d8>
 80168e6:	4b23      	ldr	r3, [pc, #140]	; (8016974 <_svfiprintf_r+0x1f4>)
 80168e8:	bb1b      	cbnz	r3, 8016932 <_svfiprintf_r+0x1b2>
 80168ea:	9b03      	ldr	r3, [sp, #12]
 80168ec:	3307      	adds	r3, #7
 80168ee:	f023 0307 	bic.w	r3, r3, #7
 80168f2:	3308      	adds	r3, #8
 80168f4:	9303      	str	r3, [sp, #12]
 80168f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168f8:	4433      	add	r3, r6
 80168fa:	9309      	str	r3, [sp, #36]	; 0x24
 80168fc:	e767      	b.n	80167ce <_svfiprintf_r+0x4e>
 80168fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016902:	460c      	mov	r4, r1
 8016904:	2001      	movs	r0, #1
 8016906:	e7a5      	b.n	8016854 <_svfiprintf_r+0xd4>
 8016908:	2300      	movs	r3, #0
 801690a:	3401      	adds	r4, #1
 801690c:	9305      	str	r3, [sp, #20]
 801690e:	4619      	mov	r1, r3
 8016910:	f04f 0c0a 	mov.w	ip, #10
 8016914:	4620      	mov	r0, r4
 8016916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801691a:	3a30      	subs	r2, #48	; 0x30
 801691c:	2a09      	cmp	r2, #9
 801691e:	d903      	bls.n	8016928 <_svfiprintf_r+0x1a8>
 8016920:	2b00      	cmp	r3, #0
 8016922:	d0c5      	beq.n	80168b0 <_svfiprintf_r+0x130>
 8016924:	9105      	str	r1, [sp, #20]
 8016926:	e7c3      	b.n	80168b0 <_svfiprintf_r+0x130>
 8016928:	fb0c 2101 	mla	r1, ip, r1, r2
 801692c:	4604      	mov	r4, r0
 801692e:	2301      	movs	r3, #1
 8016930:	e7f0      	b.n	8016914 <_svfiprintf_r+0x194>
 8016932:	ab03      	add	r3, sp, #12
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	462a      	mov	r2, r5
 8016938:	4b0f      	ldr	r3, [pc, #60]	; (8016978 <_svfiprintf_r+0x1f8>)
 801693a:	a904      	add	r1, sp, #16
 801693c:	4638      	mov	r0, r7
 801693e:	f7fc fb1b 	bl	8012f78 <_printf_float>
 8016942:	1c42      	adds	r2, r0, #1
 8016944:	4606      	mov	r6, r0
 8016946:	d1d6      	bne.n	80168f6 <_svfiprintf_r+0x176>
 8016948:	89ab      	ldrh	r3, [r5, #12]
 801694a:	065b      	lsls	r3, r3, #25
 801694c:	f53f af2c 	bmi.w	80167a8 <_svfiprintf_r+0x28>
 8016950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016952:	b01d      	add	sp, #116	; 0x74
 8016954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016958:	ab03      	add	r3, sp, #12
 801695a:	9300      	str	r3, [sp, #0]
 801695c:	462a      	mov	r2, r5
 801695e:	4b06      	ldr	r3, [pc, #24]	; (8016978 <_svfiprintf_r+0x1f8>)
 8016960:	a904      	add	r1, sp, #16
 8016962:	4638      	mov	r0, r7
 8016964:	f7fc fd94 	bl	8013490 <_printf_i>
 8016968:	e7eb      	b.n	8016942 <_svfiprintf_r+0x1c2>
 801696a:	bf00      	nop
 801696c:	08017c7c 	.word	0x08017c7c
 8016970:	08017c86 	.word	0x08017c86
 8016974:	08012f79 	.word	0x08012f79
 8016978:	080166c9 	.word	0x080166c9
 801697c:	08017c82 	.word	0x08017c82

08016980 <nan>:
 8016980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016988 <nan+0x8>
 8016984:	4770      	bx	lr
 8016986:	bf00      	nop
 8016988:	00000000 	.word	0x00000000
 801698c:	7ff80000 	.word	0x7ff80000

08016990 <_sbrk_r>:
 8016990:	b538      	push	{r3, r4, r5, lr}
 8016992:	4d06      	ldr	r5, [pc, #24]	; (80169ac <_sbrk_r+0x1c>)
 8016994:	2300      	movs	r3, #0
 8016996:	4604      	mov	r4, r0
 8016998:	4608      	mov	r0, r1
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	f7ed f9d4 	bl	8003d48 <_sbrk>
 80169a0:	1c43      	adds	r3, r0, #1
 80169a2:	d102      	bne.n	80169aa <_sbrk_r+0x1a>
 80169a4:	682b      	ldr	r3, [r5, #0]
 80169a6:	b103      	cbz	r3, 80169aa <_sbrk_r+0x1a>
 80169a8:	6023      	str	r3, [r4, #0]
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	24002d0c 	.word	0x24002d0c

080169b0 <strncmp>:
 80169b0:	b510      	push	{r4, lr}
 80169b2:	b17a      	cbz	r2, 80169d4 <strncmp+0x24>
 80169b4:	4603      	mov	r3, r0
 80169b6:	3901      	subs	r1, #1
 80169b8:	1884      	adds	r4, r0, r2
 80169ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80169be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80169c2:	4290      	cmp	r0, r2
 80169c4:	d101      	bne.n	80169ca <strncmp+0x1a>
 80169c6:	42a3      	cmp	r3, r4
 80169c8:	d101      	bne.n	80169ce <strncmp+0x1e>
 80169ca:	1a80      	subs	r0, r0, r2
 80169cc:	bd10      	pop	{r4, pc}
 80169ce:	2800      	cmp	r0, #0
 80169d0:	d1f3      	bne.n	80169ba <strncmp+0xa>
 80169d2:	e7fa      	b.n	80169ca <strncmp+0x1a>
 80169d4:	4610      	mov	r0, r2
 80169d6:	e7f9      	b.n	80169cc <strncmp+0x1c>

080169d8 <__ascii_wctomb>:
 80169d8:	b149      	cbz	r1, 80169ee <__ascii_wctomb+0x16>
 80169da:	2aff      	cmp	r2, #255	; 0xff
 80169dc:	bf85      	ittet	hi
 80169de:	238a      	movhi	r3, #138	; 0x8a
 80169e0:	6003      	strhi	r3, [r0, #0]
 80169e2:	700a      	strbls	r2, [r1, #0]
 80169e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80169e8:	bf98      	it	ls
 80169ea:	2001      	movls	r0, #1
 80169ec:	4770      	bx	lr
 80169ee:	4608      	mov	r0, r1
 80169f0:	4770      	bx	lr
	...

080169f4 <__assert_func>:
 80169f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169f6:	4614      	mov	r4, r2
 80169f8:	461a      	mov	r2, r3
 80169fa:	4b09      	ldr	r3, [pc, #36]	; (8016a20 <__assert_func+0x2c>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4605      	mov	r5, r0
 8016a00:	68d8      	ldr	r0, [r3, #12]
 8016a02:	b14c      	cbz	r4, 8016a18 <__assert_func+0x24>
 8016a04:	4b07      	ldr	r3, [pc, #28]	; (8016a24 <__assert_func+0x30>)
 8016a06:	9100      	str	r1, [sp, #0]
 8016a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a0c:	4906      	ldr	r1, [pc, #24]	; (8016a28 <__assert_func+0x34>)
 8016a0e:	462b      	mov	r3, r5
 8016a10:	f000 f80e 	bl	8016a30 <fiprintf>
 8016a14:	f000 fa8c 	bl	8016f30 <abort>
 8016a18:	4b04      	ldr	r3, [pc, #16]	; (8016a2c <__assert_func+0x38>)
 8016a1a:	461c      	mov	r4, r3
 8016a1c:	e7f3      	b.n	8016a06 <__assert_func+0x12>
 8016a1e:	bf00      	nop
 8016a20:	24000028 	.word	0x24000028
 8016a24:	08017c8d 	.word	0x08017c8d
 8016a28:	08017c9a 	.word	0x08017c9a
 8016a2c:	08017cc8 	.word	0x08017cc8

08016a30 <fiprintf>:
 8016a30:	b40e      	push	{r1, r2, r3}
 8016a32:	b503      	push	{r0, r1, lr}
 8016a34:	4601      	mov	r1, r0
 8016a36:	ab03      	add	r3, sp, #12
 8016a38:	4805      	ldr	r0, [pc, #20]	; (8016a50 <fiprintf+0x20>)
 8016a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a3e:	6800      	ldr	r0, [r0, #0]
 8016a40:	9301      	str	r3, [sp, #4]
 8016a42:	f000 f885 	bl	8016b50 <_vfiprintf_r>
 8016a46:	b002      	add	sp, #8
 8016a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a4c:	b003      	add	sp, #12
 8016a4e:	4770      	bx	lr
 8016a50:	24000028 	.word	0x24000028

08016a54 <memmove>:
 8016a54:	4288      	cmp	r0, r1
 8016a56:	b510      	push	{r4, lr}
 8016a58:	eb01 0402 	add.w	r4, r1, r2
 8016a5c:	d902      	bls.n	8016a64 <memmove+0x10>
 8016a5e:	4284      	cmp	r4, r0
 8016a60:	4623      	mov	r3, r4
 8016a62:	d807      	bhi.n	8016a74 <memmove+0x20>
 8016a64:	1e43      	subs	r3, r0, #1
 8016a66:	42a1      	cmp	r1, r4
 8016a68:	d008      	beq.n	8016a7c <memmove+0x28>
 8016a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a72:	e7f8      	b.n	8016a66 <memmove+0x12>
 8016a74:	4402      	add	r2, r0
 8016a76:	4601      	mov	r1, r0
 8016a78:	428a      	cmp	r2, r1
 8016a7a:	d100      	bne.n	8016a7e <memmove+0x2a>
 8016a7c:	bd10      	pop	{r4, pc}
 8016a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a86:	e7f7      	b.n	8016a78 <memmove+0x24>

08016a88 <__malloc_lock>:
 8016a88:	4801      	ldr	r0, [pc, #4]	; (8016a90 <__malloc_lock+0x8>)
 8016a8a:	f000 bc11 	b.w	80172b0 <__retarget_lock_acquire_recursive>
 8016a8e:	bf00      	nop
 8016a90:	24002d10 	.word	0x24002d10

08016a94 <__malloc_unlock>:
 8016a94:	4801      	ldr	r0, [pc, #4]	; (8016a9c <__malloc_unlock+0x8>)
 8016a96:	f000 bc0c 	b.w	80172b2 <__retarget_lock_release_recursive>
 8016a9a:	bf00      	nop
 8016a9c:	24002d10 	.word	0x24002d10

08016aa0 <_realloc_r>:
 8016aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa4:	4680      	mov	r8, r0
 8016aa6:	4614      	mov	r4, r2
 8016aa8:	460e      	mov	r6, r1
 8016aaa:	b921      	cbnz	r1, 8016ab6 <_realloc_r+0x16>
 8016aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab0:	4611      	mov	r1, r2
 8016ab2:	f7ff bd95 	b.w	80165e0 <_malloc_r>
 8016ab6:	b92a      	cbnz	r2, 8016ac4 <_realloc_r+0x24>
 8016ab8:	f7ff fd26 	bl	8016508 <_free_r>
 8016abc:	4625      	mov	r5, r4
 8016abe:	4628      	mov	r0, r5
 8016ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac4:	f000 fc5c 	bl	8017380 <_malloc_usable_size_r>
 8016ac8:	4284      	cmp	r4, r0
 8016aca:	4607      	mov	r7, r0
 8016acc:	d802      	bhi.n	8016ad4 <_realloc_r+0x34>
 8016ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ad2:	d812      	bhi.n	8016afa <_realloc_r+0x5a>
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4640      	mov	r0, r8
 8016ad8:	f7ff fd82 	bl	80165e0 <_malloc_r>
 8016adc:	4605      	mov	r5, r0
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	d0ed      	beq.n	8016abe <_realloc_r+0x1e>
 8016ae2:	42bc      	cmp	r4, r7
 8016ae4:	4622      	mov	r2, r4
 8016ae6:	4631      	mov	r1, r6
 8016ae8:	bf28      	it	cs
 8016aea:	463a      	movcs	r2, r7
 8016aec:	f7fc f99e 	bl	8012e2c <memcpy>
 8016af0:	4631      	mov	r1, r6
 8016af2:	4640      	mov	r0, r8
 8016af4:	f7ff fd08 	bl	8016508 <_free_r>
 8016af8:	e7e1      	b.n	8016abe <_realloc_r+0x1e>
 8016afa:	4635      	mov	r5, r6
 8016afc:	e7df      	b.n	8016abe <_realloc_r+0x1e>

08016afe <__sfputc_r>:
 8016afe:	6893      	ldr	r3, [r2, #8]
 8016b00:	3b01      	subs	r3, #1
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	b410      	push	{r4}
 8016b06:	6093      	str	r3, [r2, #8]
 8016b08:	da08      	bge.n	8016b1c <__sfputc_r+0x1e>
 8016b0a:	6994      	ldr	r4, [r2, #24]
 8016b0c:	42a3      	cmp	r3, r4
 8016b0e:	db01      	blt.n	8016b14 <__sfputc_r+0x16>
 8016b10:	290a      	cmp	r1, #10
 8016b12:	d103      	bne.n	8016b1c <__sfputc_r+0x1e>
 8016b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b18:	f000 b94a 	b.w	8016db0 <__swbuf_r>
 8016b1c:	6813      	ldr	r3, [r2, #0]
 8016b1e:	1c58      	adds	r0, r3, #1
 8016b20:	6010      	str	r0, [r2, #0]
 8016b22:	7019      	strb	r1, [r3, #0]
 8016b24:	4608      	mov	r0, r1
 8016b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b2a:	4770      	bx	lr

08016b2c <__sfputs_r>:
 8016b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2e:	4606      	mov	r6, r0
 8016b30:	460f      	mov	r7, r1
 8016b32:	4614      	mov	r4, r2
 8016b34:	18d5      	adds	r5, r2, r3
 8016b36:	42ac      	cmp	r4, r5
 8016b38:	d101      	bne.n	8016b3e <__sfputs_r+0x12>
 8016b3a:	2000      	movs	r0, #0
 8016b3c:	e007      	b.n	8016b4e <__sfputs_r+0x22>
 8016b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b42:	463a      	mov	r2, r7
 8016b44:	4630      	mov	r0, r6
 8016b46:	f7ff ffda 	bl	8016afe <__sfputc_r>
 8016b4a:	1c43      	adds	r3, r0, #1
 8016b4c:	d1f3      	bne.n	8016b36 <__sfputs_r+0xa>
 8016b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b50 <_vfiprintf_r>:
 8016b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b54:	460d      	mov	r5, r1
 8016b56:	b09d      	sub	sp, #116	; 0x74
 8016b58:	4614      	mov	r4, r2
 8016b5a:	4698      	mov	r8, r3
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	b118      	cbz	r0, 8016b68 <_vfiprintf_r+0x18>
 8016b60:	6983      	ldr	r3, [r0, #24]
 8016b62:	b90b      	cbnz	r3, 8016b68 <_vfiprintf_r+0x18>
 8016b64:	f000 fb06 	bl	8017174 <__sinit>
 8016b68:	4b89      	ldr	r3, [pc, #548]	; (8016d90 <_vfiprintf_r+0x240>)
 8016b6a:	429d      	cmp	r5, r3
 8016b6c:	d11b      	bne.n	8016ba6 <_vfiprintf_r+0x56>
 8016b6e:	6875      	ldr	r5, [r6, #4]
 8016b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b72:	07d9      	lsls	r1, r3, #31
 8016b74:	d405      	bmi.n	8016b82 <_vfiprintf_r+0x32>
 8016b76:	89ab      	ldrh	r3, [r5, #12]
 8016b78:	059a      	lsls	r2, r3, #22
 8016b7a:	d402      	bmi.n	8016b82 <_vfiprintf_r+0x32>
 8016b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b7e:	f000 fb97 	bl	80172b0 <__retarget_lock_acquire_recursive>
 8016b82:	89ab      	ldrh	r3, [r5, #12]
 8016b84:	071b      	lsls	r3, r3, #28
 8016b86:	d501      	bpl.n	8016b8c <_vfiprintf_r+0x3c>
 8016b88:	692b      	ldr	r3, [r5, #16]
 8016b8a:	b9eb      	cbnz	r3, 8016bc8 <_vfiprintf_r+0x78>
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f000 f960 	bl	8016e54 <__swsetup_r>
 8016b94:	b1c0      	cbz	r0, 8016bc8 <_vfiprintf_r+0x78>
 8016b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b98:	07dc      	lsls	r4, r3, #31
 8016b9a:	d50e      	bpl.n	8016bba <_vfiprintf_r+0x6a>
 8016b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ba0:	b01d      	add	sp, #116	; 0x74
 8016ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba6:	4b7b      	ldr	r3, [pc, #492]	; (8016d94 <_vfiprintf_r+0x244>)
 8016ba8:	429d      	cmp	r5, r3
 8016baa:	d101      	bne.n	8016bb0 <_vfiprintf_r+0x60>
 8016bac:	68b5      	ldr	r5, [r6, #8]
 8016bae:	e7df      	b.n	8016b70 <_vfiprintf_r+0x20>
 8016bb0:	4b79      	ldr	r3, [pc, #484]	; (8016d98 <_vfiprintf_r+0x248>)
 8016bb2:	429d      	cmp	r5, r3
 8016bb4:	bf08      	it	eq
 8016bb6:	68f5      	ldreq	r5, [r6, #12]
 8016bb8:	e7da      	b.n	8016b70 <_vfiprintf_r+0x20>
 8016bba:	89ab      	ldrh	r3, [r5, #12]
 8016bbc:	0598      	lsls	r0, r3, #22
 8016bbe:	d4ed      	bmi.n	8016b9c <_vfiprintf_r+0x4c>
 8016bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bc2:	f000 fb76 	bl	80172b2 <__retarget_lock_release_recursive>
 8016bc6:	e7e9      	b.n	8016b9c <_vfiprintf_r+0x4c>
 8016bc8:	2300      	movs	r3, #0
 8016bca:	9309      	str	r3, [sp, #36]	; 0x24
 8016bcc:	2320      	movs	r3, #32
 8016bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bd6:	2330      	movs	r3, #48	; 0x30
 8016bd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016d9c <_vfiprintf_r+0x24c>
 8016bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016be0:	f04f 0901 	mov.w	r9, #1
 8016be4:	4623      	mov	r3, r4
 8016be6:	469a      	mov	sl, r3
 8016be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bec:	b10a      	cbz	r2, 8016bf2 <_vfiprintf_r+0xa2>
 8016bee:	2a25      	cmp	r2, #37	; 0x25
 8016bf0:	d1f9      	bne.n	8016be6 <_vfiprintf_r+0x96>
 8016bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8016bf6:	d00b      	beq.n	8016c10 <_vfiprintf_r+0xc0>
 8016bf8:	465b      	mov	r3, fp
 8016bfa:	4622      	mov	r2, r4
 8016bfc:	4629      	mov	r1, r5
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f7ff ff94 	bl	8016b2c <__sfputs_r>
 8016c04:	3001      	adds	r0, #1
 8016c06:	f000 80aa 	beq.w	8016d5e <_vfiprintf_r+0x20e>
 8016c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c0c:	445a      	add	r2, fp
 8016c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8016c10:	f89a 3000 	ldrb.w	r3, [sl]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f000 80a2 	beq.w	8016d5e <_vfiprintf_r+0x20e>
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c24:	f10a 0a01 	add.w	sl, sl, #1
 8016c28:	9304      	str	r3, [sp, #16]
 8016c2a:	9307      	str	r3, [sp, #28]
 8016c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c30:	931a      	str	r3, [sp, #104]	; 0x68
 8016c32:	4654      	mov	r4, sl
 8016c34:	2205      	movs	r2, #5
 8016c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c3a:	4858      	ldr	r0, [pc, #352]	; (8016d9c <_vfiprintf_r+0x24c>)
 8016c3c:	f7e9 fb60 	bl	8000300 <memchr>
 8016c40:	9a04      	ldr	r2, [sp, #16]
 8016c42:	b9d8      	cbnz	r0, 8016c7c <_vfiprintf_r+0x12c>
 8016c44:	06d1      	lsls	r1, r2, #27
 8016c46:	bf44      	itt	mi
 8016c48:	2320      	movmi	r3, #32
 8016c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c4e:	0713      	lsls	r3, r2, #28
 8016c50:	bf44      	itt	mi
 8016c52:	232b      	movmi	r3, #43	; 0x2b
 8016c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c58:	f89a 3000 	ldrb.w	r3, [sl]
 8016c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016c5e:	d015      	beq.n	8016c8c <_vfiprintf_r+0x13c>
 8016c60:	9a07      	ldr	r2, [sp, #28]
 8016c62:	4654      	mov	r4, sl
 8016c64:	2000      	movs	r0, #0
 8016c66:	f04f 0c0a 	mov.w	ip, #10
 8016c6a:	4621      	mov	r1, r4
 8016c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c70:	3b30      	subs	r3, #48	; 0x30
 8016c72:	2b09      	cmp	r3, #9
 8016c74:	d94e      	bls.n	8016d14 <_vfiprintf_r+0x1c4>
 8016c76:	b1b0      	cbz	r0, 8016ca6 <_vfiprintf_r+0x156>
 8016c78:	9207      	str	r2, [sp, #28]
 8016c7a:	e014      	b.n	8016ca6 <_vfiprintf_r+0x156>
 8016c7c:	eba0 0308 	sub.w	r3, r0, r8
 8016c80:	fa09 f303 	lsl.w	r3, r9, r3
 8016c84:	4313      	orrs	r3, r2
 8016c86:	9304      	str	r3, [sp, #16]
 8016c88:	46a2      	mov	sl, r4
 8016c8a:	e7d2      	b.n	8016c32 <_vfiprintf_r+0xe2>
 8016c8c:	9b03      	ldr	r3, [sp, #12]
 8016c8e:	1d19      	adds	r1, r3, #4
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	9103      	str	r1, [sp, #12]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	bfbb      	ittet	lt
 8016c98:	425b      	neglt	r3, r3
 8016c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8016c9e:	9307      	strge	r3, [sp, #28]
 8016ca0:	9307      	strlt	r3, [sp, #28]
 8016ca2:	bfb8      	it	lt
 8016ca4:	9204      	strlt	r2, [sp, #16]
 8016ca6:	7823      	ldrb	r3, [r4, #0]
 8016ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8016caa:	d10c      	bne.n	8016cc6 <_vfiprintf_r+0x176>
 8016cac:	7863      	ldrb	r3, [r4, #1]
 8016cae:	2b2a      	cmp	r3, #42	; 0x2a
 8016cb0:	d135      	bne.n	8016d1e <_vfiprintf_r+0x1ce>
 8016cb2:	9b03      	ldr	r3, [sp, #12]
 8016cb4:	1d1a      	adds	r2, r3, #4
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	9203      	str	r2, [sp, #12]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	bfb8      	it	lt
 8016cbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016cc2:	3402      	adds	r4, #2
 8016cc4:	9305      	str	r3, [sp, #20]
 8016cc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016dac <_vfiprintf_r+0x25c>
 8016cca:	7821      	ldrb	r1, [r4, #0]
 8016ccc:	2203      	movs	r2, #3
 8016cce:	4650      	mov	r0, sl
 8016cd0:	f7e9 fb16 	bl	8000300 <memchr>
 8016cd4:	b140      	cbz	r0, 8016ce8 <_vfiprintf_r+0x198>
 8016cd6:	2340      	movs	r3, #64	; 0x40
 8016cd8:	eba0 000a 	sub.w	r0, r0, sl
 8016cdc:	fa03 f000 	lsl.w	r0, r3, r0
 8016ce0:	9b04      	ldr	r3, [sp, #16]
 8016ce2:	4303      	orrs	r3, r0
 8016ce4:	3401      	adds	r4, #1
 8016ce6:	9304      	str	r3, [sp, #16]
 8016ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cec:	482c      	ldr	r0, [pc, #176]	; (8016da0 <_vfiprintf_r+0x250>)
 8016cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016cf2:	2206      	movs	r2, #6
 8016cf4:	f7e9 fb04 	bl	8000300 <memchr>
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d03f      	beq.n	8016d7c <_vfiprintf_r+0x22c>
 8016cfc:	4b29      	ldr	r3, [pc, #164]	; (8016da4 <_vfiprintf_r+0x254>)
 8016cfe:	bb1b      	cbnz	r3, 8016d48 <_vfiprintf_r+0x1f8>
 8016d00:	9b03      	ldr	r3, [sp, #12]
 8016d02:	3307      	adds	r3, #7
 8016d04:	f023 0307 	bic.w	r3, r3, #7
 8016d08:	3308      	adds	r3, #8
 8016d0a:	9303      	str	r3, [sp, #12]
 8016d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d0e:	443b      	add	r3, r7
 8016d10:	9309      	str	r3, [sp, #36]	; 0x24
 8016d12:	e767      	b.n	8016be4 <_vfiprintf_r+0x94>
 8016d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d18:	460c      	mov	r4, r1
 8016d1a:	2001      	movs	r0, #1
 8016d1c:	e7a5      	b.n	8016c6a <_vfiprintf_r+0x11a>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	3401      	adds	r4, #1
 8016d22:	9305      	str	r3, [sp, #20]
 8016d24:	4619      	mov	r1, r3
 8016d26:	f04f 0c0a 	mov.w	ip, #10
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d30:	3a30      	subs	r2, #48	; 0x30
 8016d32:	2a09      	cmp	r2, #9
 8016d34:	d903      	bls.n	8016d3e <_vfiprintf_r+0x1ee>
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d0c5      	beq.n	8016cc6 <_vfiprintf_r+0x176>
 8016d3a:	9105      	str	r1, [sp, #20]
 8016d3c:	e7c3      	b.n	8016cc6 <_vfiprintf_r+0x176>
 8016d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d42:	4604      	mov	r4, r0
 8016d44:	2301      	movs	r3, #1
 8016d46:	e7f0      	b.n	8016d2a <_vfiprintf_r+0x1da>
 8016d48:	ab03      	add	r3, sp, #12
 8016d4a:	9300      	str	r3, [sp, #0]
 8016d4c:	462a      	mov	r2, r5
 8016d4e:	4b16      	ldr	r3, [pc, #88]	; (8016da8 <_vfiprintf_r+0x258>)
 8016d50:	a904      	add	r1, sp, #16
 8016d52:	4630      	mov	r0, r6
 8016d54:	f7fc f910 	bl	8012f78 <_printf_float>
 8016d58:	4607      	mov	r7, r0
 8016d5a:	1c78      	adds	r0, r7, #1
 8016d5c:	d1d6      	bne.n	8016d0c <_vfiprintf_r+0x1bc>
 8016d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d60:	07d9      	lsls	r1, r3, #31
 8016d62:	d405      	bmi.n	8016d70 <_vfiprintf_r+0x220>
 8016d64:	89ab      	ldrh	r3, [r5, #12]
 8016d66:	059a      	lsls	r2, r3, #22
 8016d68:	d402      	bmi.n	8016d70 <_vfiprintf_r+0x220>
 8016d6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d6c:	f000 faa1 	bl	80172b2 <__retarget_lock_release_recursive>
 8016d70:	89ab      	ldrh	r3, [r5, #12]
 8016d72:	065b      	lsls	r3, r3, #25
 8016d74:	f53f af12 	bmi.w	8016b9c <_vfiprintf_r+0x4c>
 8016d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d7a:	e711      	b.n	8016ba0 <_vfiprintf_r+0x50>
 8016d7c:	ab03      	add	r3, sp, #12
 8016d7e:	9300      	str	r3, [sp, #0]
 8016d80:	462a      	mov	r2, r5
 8016d82:	4b09      	ldr	r3, [pc, #36]	; (8016da8 <_vfiprintf_r+0x258>)
 8016d84:	a904      	add	r1, sp, #16
 8016d86:	4630      	mov	r0, r6
 8016d88:	f7fc fb82 	bl	8013490 <_printf_i>
 8016d8c:	e7e4      	b.n	8016d58 <_vfiprintf_r+0x208>
 8016d8e:	bf00      	nop
 8016d90:	08017cec 	.word	0x08017cec
 8016d94:	08017d0c 	.word	0x08017d0c
 8016d98:	08017ccc 	.word	0x08017ccc
 8016d9c:	08017c7c 	.word	0x08017c7c
 8016da0:	08017c86 	.word	0x08017c86
 8016da4:	08012f79 	.word	0x08012f79
 8016da8:	08016b2d 	.word	0x08016b2d
 8016dac:	08017c82 	.word	0x08017c82

08016db0 <__swbuf_r>:
 8016db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db2:	460e      	mov	r6, r1
 8016db4:	4614      	mov	r4, r2
 8016db6:	4605      	mov	r5, r0
 8016db8:	b118      	cbz	r0, 8016dc2 <__swbuf_r+0x12>
 8016dba:	6983      	ldr	r3, [r0, #24]
 8016dbc:	b90b      	cbnz	r3, 8016dc2 <__swbuf_r+0x12>
 8016dbe:	f000 f9d9 	bl	8017174 <__sinit>
 8016dc2:	4b21      	ldr	r3, [pc, #132]	; (8016e48 <__swbuf_r+0x98>)
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	d12b      	bne.n	8016e20 <__swbuf_r+0x70>
 8016dc8:	686c      	ldr	r4, [r5, #4]
 8016dca:	69a3      	ldr	r3, [r4, #24]
 8016dcc:	60a3      	str	r3, [r4, #8]
 8016dce:	89a3      	ldrh	r3, [r4, #12]
 8016dd0:	071a      	lsls	r2, r3, #28
 8016dd2:	d52f      	bpl.n	8016e34 <__swbuf_r+0x84>
 8016dd4:	6923      	ldr	r3, [r4, #16]
 8016dd6:	b36b      	cbz	r3, 8016e34 <__swbuf_r+0x84>
 8016dd8:	6923      	ldr	r3, [r4, #16]
 8016dda:	6820      	ldr	r0, [r4, #0]
 8016ddc:	1ac0      	subs	r0, r0, r3
 8016dde:	6963      	ldr	r3, [r4, #20]
 8016de0:	b2f6      	uxtb	r6, r6
 8016de2:	4283      	cmp	r3, r0
 8016de4:	4637      	mov	r7, r6
 8016de6:	dc04      	bgt.n	8016df2 <__swbuf_r+0x42>
 8016de8:	4621      	mov	r1, r4
 8016dea:	4628      	mov	r0, r5
 8016dec:	f000 f92e 	bl	801704c <_fflush_r>
 8016df0:	bb30      	cbnz	r0, 8016e40 <__swbuf_r+0x90>
 8016df2:	68a3      	ldr	r3, [r4, #8]
 8016df4:	3b01      	subs	r3, #1
 8016df6:	60a3      	str	r3, [r4, #8]
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	1c5a      	adds	r2, r3, #1
 8016dfc:	6022      	str	r2, [r4, #0]
 8016dfe:	701e      	strb	r6, [r3, #0]
 8016e00:	6963      	ldr	r3, [r4, #20]
 8016e02:	3001      	adds	r0, #1
 8016e04:	4283      	cmp	r3, r0
 8016e06:	d004      	beq.n	8016e12 <__swbuf_r+0x62>
 8016e08:	89a3      	ldrh	r3, [r4, #12]
 8016e0a:	07db      	lsls	r3, r3, #31
 8016e0c:	d506      	bpl.n	8016e1c <__swbuf_r+0x6c>
 8016e0e:	2e0a      	cmp	r6, #10
 8016e10:	d104      	bne.n	8016e1c <__swbuf_r+0x6c>
 8016e12:	4621      	mov	r1, r4
 8016e14:	4628      	mov	r0, r5
 8016e16:	f000 f919 	bl	801704c <_fflush_r>
 8016e1a:	b988      	cbnz	r0, 8016e40 <__swbuf_r+0x90>
 8016e1c:	4638      	mov	r0, r7
 8016e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e20:	4b0a      	ldr	r3, [pc, #40]	; (8016e4c <__swbuf_r+0x9c>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d101      	bne.n	8016e2a <__swbuf_r+0x7a>
 8016e26:	68ac      	ldr	r4, [r5, #8]
 8016e28:	e7cf      	b.n	8016dca <__swbuf_r+0x1a>
 8016e2a:	4b09      	ldr	r3, [pc, #36]	; (8016e50 <__swbuf_r+0xa0>)
 8016e2c:	429c      	cmp	r4, r3
 8016e2e:	bf08      	it	eq
 8016e30:	68ec      	ldreq	r4, [r5, #12]
 8016e32:	e7ca      	b.n	8016dca <__swbuf_r+0x1a>
 8016e34:	4621      	mov	r1, r4
 8016e36:	4628      	mov	r0, r5
 8016e38:	f000 f80c 	bl	8016e54 <__swsetup_r>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d0cb      	beq.n	8016dd8 <__swbuf_r+0x28>
 8016e40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016e44:	e7ea      	b.n	8016e1c <__swbuf_r+0x6c>
 8016e46:	bf00      	nop
 8016e48:	08017cec 	.word	0x08017cec
 8016e4c:	08017d0c 	.word	0x08017d0c
 8016e50:	08017ccc 	.word	0x08017ccc

08016e54 <__swsetup_r>:
 8016e54:	4b32      	ldr	r3, [pc, #200]	; (8016f20 <__swsetup_r+0xcc>)
 8016e56:	b570      	push	{r4, r5, r6, lr}
 8016e58:	681d      	ldr	r5, [r3, #0]
 8016e5a:	4606      	mov	r6, r0
 8016e5c:	460c      	mov	r4, r1
 8016e5e:	b125      	cbz	r5, 8016e6a <__swsetup_r+0x16>
 8016e60:	69ab      	ldr	r3, [r5, #24]
 8016e62:	b913      	cbnz	r3, 8016e6a <__swsetup_r+0x16>
 8016e64:	4628      	mov	r0, r5
 8016e66:	f000 f985 	bl	8017174 <__sinit>
 8016e6a:	4b2e      	ldr	r3, [pc, #184]	; (8016f24 <__swsetup_r+0xd0>)
 8016e6c:	429c      	cmp	r4, r3
 8016e6e:	d10f      	bne.n	8016e90 <__swsetup_r+0x3c>
 8016e70:	686c      	ldr	r4, [r5, #4]
 8016e72:	89a3      	ldrh	r3, [r4, #12]
 8016e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e78:	0719      	lsls	r1, r3, #28
 8016e7a:	d42c      	bmi.n	8016ed6 <__swsetup_r+0x82>
 8016e7c:	06dd      	lsls	r5, r3, #27
 8016e7e:	d411      	bmi.n	8016ea4 <__swsetup_r+0x50>
 8016e80:	2309      	movs	r3, #9
 8016e82:	6033      	str	r3, [r6, #0]
 8016e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e88:	81a3      	strh	r3, [r4, #12]
 8016e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e8e:	e03e      	b.n	8016f0e <__swsetup_r+0xba>
 8016e90:	4b25      	ldr	r3, [pc, #148]	; (8016f28 <__swsetup_r+0xd4>)
 8016e92:	429c      	cmp	r4, r3
 8016e94:	d101      	bne.n	8016e9a <__swsetup_r+0x46>
 8016e96:	68ac      	ldr	r4, [r5, #8]
 8016e98:	e7eb      	b.n	8016e72 <__swsetup_r+0x1e>
 8016e9a:	4b24      	ldr	r3, [pc, #144]	; (8016f2c <__swsetup_r+0xd8>)
 8016e9c:	429c      	cmp	r4, r3
 8016e9e:	bf08      	it	eq
 8016ea0:	68ec      	ldreq	r4, [r5, #12]
 8016ea2:	e7e6      	b.n	8016e72 <__swsetup_r+0x1e>
 8016ea4:	0758      	lsls	r0, r3, #29
 8016ea6:	d512      	bpl.n	8016ece <__swsetup_r+0x7a>
 8016ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016eaa:	b141      	cbz	r1, 8016ebe <__swsetup_r+0x6a>
 8016eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eb0:	4299      	cmp	r1, r3
 8016eb2:	d002      	beq.n	8016eba <__swsetup_r+0x66>
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	f7ff fb27 	bl	8016508 <_free_r>
 8016eba:	2300      	movs	r3, #0
 8016ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8016ebe:	89a3      	ldrh	r3, [r4, #12]
 8016ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016ec4:	81a3      	strh	r3, [r4, #12]
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	6063      	str	r3, [r4, #4]
 8016eca:	6923      	ldr	r3, [r4, #16]
 8016ecc:	6023      	str	r3, [r4, #0]
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	f043 0308 	orr.w	r3, r3, #8
 8016ed4:	81a3      	strh	r3, [r4, #12]
 8016ed6:	6923      	ldr	r3, [r4, #16]
 8016ed8:	b94b      	cbnz	r3, 8016eee <__swsetup_r+0x9a>
 8016eda:	89a3      	ldrh	r3, [r4, #12]
 8016edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ee4:	d003      	beq.n	8016eee <__swsetup_r+0x9a>
 8016ee6:	4621      	mov	r1, r4
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f000 fa09 	bl	8017300 <__smakebuf_r>
 8016eee:	89a0      	ldrh	r0, [r4, #12]
 8016ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ef4:	f010 0301 	ands.w	r3, r0, #1
 8016ef8:	d00a      	beq.n	8016f10 <__swsetup_r+0xbc>
 8016efa:	2300      	movs	r3, #0
 8016efc:	60a3      	str	r3, [r4, #8]
 8016efe:	6963      	ldr	r3, [r4, #20]
 8016f00:	425b      	negs	r3, r3
 8016f02:	61a3      	str	r3, [r4, #24]
 8016f04:	6923      	ldr	r3, [r4, #16]
 8016f06:	b943      	cbnz	r3, 8016f1a <__swsetup_r+0xc6>
 8016f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016f0c:	d1ba      	bne.n	8016e84 <__swsetup_r+0x30>
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
 8016f10:	0781      	lsls	r1, r0, #30
 8016f12:	bf58      	it	pl
 8016f14:	6963      	ldrpl	r3, [r4, #20]
 8016f16:	60a3      	str	r3, [r4, #8]
 8016f18:	e7f4      	b.n	8016f04 <__swsetup_r+0xb0>
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	e7f7      	b.n	8016f0e <__swsetup_r+0xba>
 8016f1e:	bf00      	nop
 8016f20:	24000028 	.word	0x24000028
 8016f24:	08017cec 	.word	0x08017cec
 8016f28:	08017d0c 	.word	0x08017d0c
 8016f2c:	08017ccc 	.word	0x08017ccc

08016f30 <abort>:
 8016f30:	b508      	push	{r3, lr}
 8016f32:	2006      	movs	r0, #6
 8016f34:	f000 fa54 	bl	80173e0 <raise>
 8016f38:	2001      	movs	r0, #1
 8016f3a:	f7ec fe8d 	bl	8003c58 <_exit>
	...

08016f40 <__sflush_r>:
 8016f40:	898a      	ldrh	r2, [r1, #12]
 8016f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f46:	4605      	mov	r5, r0
 8016f48:	0710      	lsls	r0, r2, #28
 8016f4a:	460c      	mov	r4, r1
 8016f4c:	d458      	bmi.n	8017000 <__sflush_r+0xc0>
 8016f4e:	684b      	ldr	r3, [r1, #4]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	dc05      	bgt.n	8016f60 <__sflush_r+0x20>
 8016f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	dc02      	bgt.n	8016f60 <__sflush_r+0x20>
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f62:	2e00      	cmp	r6, #0
 8016f64:	d0f9      	beq.n	8016f5a <__sflush_r+0x1a>
 8016f66:	2300      	movs	r3, #0
 8016f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f6c:	682f      	ldr	r7, [r5, #0]
 8016f6e:	602b      	str	r3, [r5, #0]
 8016f70:	d032      	beq.n	8016fd8 <__sflush_r+0x98>
 8016f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f74:	89a3      	ldrh	r3, [r4, #12]
 8016f76:	075a      	lsls	r2, r3, #29
 8016f78:	d505      	bpl.n	8016f86 <__sflush_r+0x46>
 8016f7a:	6863      	ldr	r3, [r4, #4]
 8016f7c:	1ac0      	subs	r0, r0, r3
 8016f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f80:	b10b      	cbz	r3, 8016f86 <__sflush_r+0x46>
 8016f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f84:	1ac0      	subs	r0, r0, r3
 8016f86:	2300      	movs	r3, #0
 8016f88:	4602      	mov	r2, r0
 8016f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f8c:	6a21      	ldr	r1, [r4, #32]
 8016f8e:	4628      	mov	r0, r5
 8016f90:	47b0      	blx	r6
 8016f92:	1c43      	adds	r3, r0, #1
 8016f94:	89a3      	ldrh	r3, [r4, #12]
 8016f96:	d106      	bne.n	8016fa6 <__sflush_r+0x66>
 8016f98:	6829      	ldr	r1, [r5, #0]
 8016f9a:	291d      	cmp	r1, #29
 8016f9c:	d82c      	bhi.n	8016ff8 <__sflush_r+0xb8>
 8016f9e:	4a2a      	ldr	r2, [pc, #168]	; (8017048 <__sflush_r+0x108>)
 8016fa0:	40ca      	lsrs	r2, r1
 8016fa2:	07d6      	lsls	r6, r2, #31
 8016fa4:	d528      	bpl.n	8016ff8 <__sflush_r+0xb8>
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	6062      	str	r2, [r4, #4]
 8016faa:	04d9      	lsls	r1, r3, #19
 8016fac:	6922      	ldr	r2, [r4, #16]
 8016fae:	6022      	str	r2, [r4, #0]
 8016fb0:	d504      	bpl.n	8016fbc <__sflush_r+0x7c>
 8016fb2:	1c42      	adds	r2, r0, #1
 8016fb4:	d101      	bne.n	8016fba <__sflush_r+0x7a>
 8016fb6:	682b      	ldr	r3, [r5, #0]
 8016fb8:	b903      	cbnz	r3, 8016fbc <__sflush_r+0x7c>
 8016fba:	6560      	str	r0, [r4, #84]	; 0x54
 8016fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fbe:	602f      	str	r7, [r5, #0]
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	d0ca      	beq.n	8016f5a <__sflush_r+0x1a>
 8016fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fc8:	4299      	cmp	r1, r3
 8016fca:	d002      	beq.n	8016fd2 <__sflush_r+0x92>
 8016fcc:	4628      	mov	r0, r5
 8016fce:	f7ff fa9b 	bl	8016508 <_free_r>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8016fd6:	e7c1      	b.n	8016f5c <__sflush_r+0x1c>
 8016fd8:	6a21      	ldr	r1, [r4, #32]
 8016fda:	2301      	movs	r3, #1
 8016fdc:	4628      	mov	r0, r5
 8016fde:	47b0      	blx	r6
 8016fe0:	1c41      	adds	r1, r0, #1
 8016fe2:	d1c7      	bne.n	8016f74 <__sflush_r+0x34>
 8016fe4:	682b      	ldr	r3, [r5, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d0c4      	beq.n	8016f74 <__sflush_r+0x34>
 8016fea:	2b1d      	cmp	r3, #29
 8016fec:	d001      	beq.n	8016ff2 <__sflush_r+0xb2>
 8016fee:	2b16      	cmp	r3, #22
 8016ff0:	d101      	bne.n	8016ff6 <__sflush_r+0xb6>
 8016ff2:	602f      	str	r7, [r5, #0]
 8016ff4:	e7b1      	b.n	8016f5a <__sflush_r+0x1a>
 8016ff6:	89a3      	ldrh	r3, [r4, #12]
 8016ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ffc:	81a3      	strh	r3, [r4, #12]
 8016ffe:	e7ad      	b.n	8016f5c <__sflush_r+0x1c>
 8017000:	690f      	ldr	r7, [r1, #16]
 8017002:	2f00      	cmp	r7, #0
 8017004:	d0a9      	beq.n	8016f5a <__sflush_r+0x1a>
 8017006:	0793      	lsls	r3, r2, #30
 8017008:	680e      	ldr	r6, [r1, #0]
 801700a:	bf08      	it	eq
 801700c:	694b      	ldreq	r3, [r1, #20]
 801700e:	600f      	str	r7, [r1, #0]
 8017010:	bf18      	it	ne
 8017012:	2300      	movne	r3, #0
 8017014:	eba6 0807 	sub.w	r8, r6, r7
 8017018:	608b      	str	r3, [r1, #8]
 801701a:	f1b8 0f00 	cmp.w	r8, #0
 801701e:	dd9c      	ble.n	8016f5a <__sflush_r+0x1a>
 8017020:	6a21      	ldr	r1, [r4, #32]
 8017022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017024:	4643      	mov	r3, r8
 8017026:	463a      	mov	r2, r7
 8017028:	4628      	mov	r0, r5
 801702a:	47b0      	blx	r6
 801702c:	2800      	cmp	r0, #0
 801702e:	dc06      	bgt.n	801703e <__sflush_r+0xfe>
 8017030:	89a3      	ldrh	r3, [r4, #12]
 8017032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017036:	81a3      	strh	r3, [r4, #12]
 8017038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801703c:	e78e      	b.n	8016f5c <__sflush_r+0x1c>
 801703e:	4407      	add	r7, r0
 8017040:	eba8 0800 	sub.w	r8, r8, r0
 8017044:	e7e9      	b.n	801701a <__sflush_r+0xda>
 8017046:	bf00      	nop
 8017048:	20400001 	.word	0x20400001

0801704c <_fflush_r>:
 801704c:	b538      	push	{r3, r4, r5, lr}
 801704e:	690b      	ldr	r3, [r1, #16]
 8017050:	4605      	mov	r5, r0
 8017052:	460c      	mov	r4, r1
 8017054:	b913      	cbnz	r3, 801705c <_fflush_r+0x10>
 8017056:	2500      	movs	r5, #0
 8017058:	4628      	mov	r0, r5
 801705a:	bd38      	pop	{r3, r4, r5, pc}
 801705c:	b118      	cbz	r0, 8017066 <_fflush_r+0x1a>
 801705e:	6983      	ldr	r3, [r0, #24]
 8017060:	b90b      	cbnz	r3, 8017066 <_fflush_r+0x1a>
 8017062:	f000 f887 	bl	8017174 <__sinit>
 8017066:	4b14      	ldr	r3, [pc, #80]	; (80170b8 <_fflush_r+0x6c>)
 8017068:	429c      	cmp	r4, r3
 801706a:	d11b      	bne.n	80170a4 <_fflush_r+0x58>
 801706c:	686c      	ldr	r4, [r5, #4]
 801706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d0ef      	beq.n	8017056 <_fflush_r+0xa>
 8017076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017078:	07d0      	lsls	r0, r2, #31
 801707a:	d404      	bmi.n	8017086 <_fflush_r+0x3a>
 801707c:	0599      	lsls	r1, r3, #22
 801707e:	d402      	bmi.n	8017086 <_fflush_r+0x3a>
 8017080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017082:	f000 f915 	bl	80172b0 <__retarget_lock_acquire_recursive>
 8017086:	4628      	mov	r0, r5
 8017088:	4621      	mov	r1, r4
 801708a:	f7ff ff59 	bl	8016f40 <__sflush_r>
 801708e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017090:	07da      	lsls	r2, r3, #31
 8017092:	4605      	mov	r5, r0
 8017094:	d4e0      	bmi.n	8017058 <_fflush_r+0xc>
 8017096:	89a3      	ldrh	r3, [r4, #12]
 8017098:	059b      	lsls	r3, r3, #22
 801709a:	d4dd      	bmi.n	8017058 <_fflush_r+0xc>
 801709c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801709e:	f000 f908 	bl	80172b2 <__retarget_lock_release_recursive>
 80170a2:	e7d9      	b.n	8017058 <_fflush_r+0xc>
 80170a4:	4b05      	ldr	r3, [pc, #20]	; (80170bc <_fflush_r+0x70>)
 80170a6:	429c      	cmp	r4, r3
 80170a8:	d101      	bne.n	80170ae <_fflush_r+0x62>
 80170aa:	68ac      	ldr	r4, [r5, #8]
 80170ac:	e7df      	b.n	801706e <_fflush_r+0x22>
 80170ae:	4b04      	ldr	r3, [pc, #16]	; (80170c0 <_fflush_r+0x74>)
 80170b0:	429c      	cmp	r4, r3
 80170b2:	bf08      	it	eq
 80170b4:	68ec      	ldreq	r4, [r5, #12]
 80170b6:	e7da      	b.n	801706e <_fflush_r+0x22>
 80170b8:	08017cec 	.word	0x08017cec
 80170bc:	08017d0c 	.word	0x08017d0c
 80170c0:	08017ccc 	.word	0x08017ccc

080170c4 <std>:
 80170c4:	2300      	movs	r3, #0
 80170c6:	b510      	push	{r4, lr}
 80170c8:	4604      	mov	r4, r0
 80170ca:	e9c0 3300 	strd	r3, r3, [r0]
 80170ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80170d2:	6083      	str	r3, [r0, #8]
 80170d4:	8181      	strh	r1, [r0, #12]
 80170d6:	6643      	str	r3, [r0, #100]	; 0x64
 80170d8:	81c2      	strh	r2, [r0, #14]
 80170da:	6183      	str	r3, [r0, #24]
 80170dc:	4619      	mov	r1, r3
 80170de:	2208      	movs	r2, #8
 80170e0:	305c      	adds	r0, #92	; 0x5c
 80170e2:	f7fb feb1 	bl	8012e48 <memset>
 80170e6:	4b05      	ldr	r3, [pc, #20]	; (80170fc <std+0x38>)
 80170e8:	6263      	str	r3, [r4, #36]	; 0x24
 80170ea:	4b05      	ldr	r3, [pc, #20]	; (8017100 <std+0x3c>)
 80170ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80170ee:	4b05      	ldr	r3, [pc, #20]	; (8017104 <std+0x40>)
 80170f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80170f2:	4b05      	ldr	r3, [pc, #20]	; (8017108 <std+0x44>)
 80170f4:	6224      	str	r4, [r4, #32]
 80170f6:	6323      	str	r3, [r4, #48]	; 0x30
 80170f8:	bd10      	pop	{r4, pc}
 80170fa:	bf00      	nop
 80170fc:	08017419 	.word	0x08017419
 8017100:	0801743b 	.word	0x0801743b
 8017104:	08017473 	.word	0x08017473
 8017108:	08017497 	.word	0x08017497

0801710c <_cleanup_r>:
 801710c:	4901      	ldr	r1, [pc, #4]	; (8017114 <_cleanup_r+0x8>)
 801710e:	f000 b8af 	b.w	8017270 <_fwalk_reent>
 8017112:	bf00      	nop
 8017114:	0801704d 	.word	0x0801704d

08017118 <__sfmoreglue>:
 8017118:	b570      	push	{r4, r5, r6, lr}
 801711a:	2268      	movs	r2, #104	; 0x68
 801711c:	1e4d      	subs	r5, r1, #1
 801711e:	4355      	muls	r5, r2
 8017120:	460e      	mov	r6, r1
 8017122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017126:	f7ff fa5b 	bl	80165e0 <_malloc_r>
 801712a:	4604      	mov	r4, r0
 801712c:	b140      	cbz	r0, 8017140 <__sfmoreglue+0x28>
 801712e:	2100      	movs	r1, #0
 8017130:	e9c0 1600 	strd	r1, r6, [r0]
 8017134:	300c      	adds	r0, #12
 8017136:	60a0      	str	r0, [r4, #8]
 8017138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801713c:	f7fb fe84 	bl	8012e48 <memset>
 8017140:	4620      	mov	r0, r4
 8017142:	bd70      	pop	{r4, r5, r6, pc}

08017144 <__sfp_lock_acquire>:
 8017144:	4801      	ldr	r0, [pc, #4]	; (801714c <__sfp_lock_acquire+0x8>)
 8017146:	f000 b8b3 	b.w	80172b0 <__retarget_lock_acquire_recursive>
 801714a:	bf00      	nop
 801714c:	24002d11 	.word	0x24002d11

08017150 <__sfp_lock_release>:
 8017150:	4801      	ldr	r0, [pc, #4]	; (8017158 <__sfp_lock_release+0x8>)
 8017152:	f000 b8ae 	b.w	80172b2 <__retarget_lock_release_recursive>
 8017156:	bf00      	nop
 8017158:	24002d11 	.word	0x24002d11

0801715c <__sinit_lock_acquire>:
 801715c:	4801      	ldr	r0, [pc, #4]	; (8017164 <__sinit_lock_acquire+0x8>)
 801715e:	f000 b8a7 	b.w	80172b0 <__retarget_lock_acquire_recursive>
 8017162:	bf00      	nop
 8017164:	24002d12 	.word	0x24002d12

08017168 <__sinit_lock_release>:
 8017168:	4801      	ldr	r0, [pc, #4]	; (8017170 <__sinit_lock_release+0x8>)
 801716a:	f000 b8a2 	b.w	80172b2 <__retarget_lock_release_recursive>
 801716e:	bf00      	nop
 8017170:	24002d12 	.word	0x24002d12

08017174 <__sinit>:
 8017174:	b510      	push	{r4, lr}
 8017176:	4604      	mov	r4, r0
 8017178:	f7ff fff0 	bl	801715c <__sinit_lock_acquire>
 801717c:	69a3      	ldr	r3, [r4, #24]
 801717e:	b11b      	cbz	r3, 8017188 <__sinit+0x14>
 8017180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017184:	f7ff bff0 	b.w	8017168 <__sinit_lock_release>
 8017188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801718c:	6523      	str	r3, [r4, #80]	; 0x50
 801718e:	4b13      	ldr	r3, [pc, #76]	; (80171dc <__sinit+0x68>)
 8017190:	4a13      	ldr	r2, [pc, #76]	; (80171e0 <__sinit+0x6c>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	62a2      	str	r2, [r4, #40]	; 0x28
 8017196:	42a3      	cmp	r3, r4
 8017198:	bf04      	itt	eq
 801719a:	2301      	moveq	r3, #1
 801719c:	61a3      	streq	r3, [r4, #24]
 801719e:	4620      	mov	r0, r4
 80171a0:	f000 f820 	bl	80171e4 <__sfp>
 80171a4:	6060      	str	r0, [r4, #4]
 80171a6:	4620      	mov	r0, r4
 80171a8:	f000 f81c 	bl	80171e4 <__sfp>
 80171ac:	60a0      	str	r0, [r4, #8]
 80171ae:	4620      	mov	r0, r4
 80171b0:	f000 f818 	bl	80171e4 <__sfp>
 80171b4:	2200      	movs	r2, #0
 80171b6:	60e0      	str	r0, [r4, #12]
 80171b8:	2104      	movs	r1, #4
 80171ba:	6860      	ldr	r0, [r4, #4]
 80171bc:	f7ff ff82 	bl	80170c4 <std>
 80171c0:	68a0      	ldr	r0, [r4, #8]
 80171c2:	2201      	movs	r2, #1
 80171c4:	2109      	movs	r1, #9
 80171c6:	f7ff ff7d 	bl	80170c4 <std>
 80171ca:	68e0      	ldr	r0, [r4, #12]
 80171cc:	2202      	movs	r2, #2
 80171ce:	2112      	movs	r1, #18
 80171d0:	f7ff ff78 	bl	80170c4 <std>
 80171d4:	2301      	movs	r3, #1
 80171d6:	61a3      	str	r3, [r4, #24]
 80171d8:	e7d2      	b.n	8017180 <__sinit+0xc>
 80171da:	bf00      	nop
 80171dc:	08017888 	.word	0x08017888
 80171e0:	0801710d 	.word	0x0801710d

080171e4 <__sfp>:
 80171e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e6:	4607      	mov	r7, r0
 80171e8:	f7ff ffac 	bl	8017144 <__sfp_lock_acquire>
 80171ec:	4b1e      	ldr	r3, [pc, #120]	; (8017268 <__sfp+0x84>)
 80171ee:	681e      	ldr	r6, [r3, #0]
 80171f0:	69b3      	ldr	r3, [r6, #24]
 80171f2:	b913      	cbnz	r3, 80171fa <__sfp+0x16>
 80171f4:	4630      	mov	r0, r6
 80171f6:	f7ff ffbd 	bl	8017174 <__sinit>
 80171fa:	3648      	adds	r6, #72	; 0x48
 80171fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017200:	3b01      	subs	r3, #1
 8017202:	d503      	bpl.n	801720c <__sfp+0x28>
 8017204:	6833      	ldr	r3, [r6, #0]
 8017206:	b30b      	cbz	r3, 801724c <__sfp+0x68>
 8017208:	6836      	ldr	r6, [r6, #0]
 801720a:	e7f7      	b.n	80171fc <__sfp+0x18>
 801720c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017210:	b9d5      	cbnz	r5, 8017248 <__sfp+0x64>
 8017212:	4b16      	ldr	r3, [pc, #88]	; (801726c <__sfp+0x88>)
 8017214:	60e3      	str	r3, [r4, #12]
 8017216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801721a:	6665      	str	r5, [r4, #100]	; 0x64
 801721c:	f000 f847 	bl	80172ae <__retarget_lock_init_recursive>
 8017220:	f7ff ff96 	bl	8017150 <__sfp_lock_release>
 8017224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801722c:	6025      	str	r5, [r4, #0]
 801722e:	61a5      	str	r5, [r4, #24]
 8017230:	2208      	movs	r2, #8
 8017232:	4629      	mov	r1, r5
 8017234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017238:	f7fb fe06 	bl	8012e48 <memset>
 801723c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017244:	4620      	mov	r0, r4
 8017246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017248:	3468      	adds	r4, #104	; 0x68
 801724a:	e7d9      	b.n	8017200 <__sfp+0x1c>
 801724c:	2104      	movs	r1, #4
 801724e:	4638      	mov	r0, r7
 8017250:	f7ff ff62 	bl	8017118 <__sfmoreglue>
 8017254:	4604      	mov	r4, r0
 8017256:	6030      	str	r0, [r6, #0]
 8017258:	2800      	cmp	r0, #0
 801725a:	d1d5      	bne.n	8017208 <__sfp+0x24>
 801725c:	f7ff ff78 	bl	8017150 <__sfp_lock_release>
 8017260:	230c      	movs	r3, #12
 8017262:	603b      	str	r3, [r7, #0]
 8017264:	e7ee      	b.n	8017244 <__sfp+0x60>
 8017266:	bf00      	nop
 8017268:	08017888 	.word	0x08017888
 801726c:	ffff0001 	.word	0xffff0001

08017270 <_fwalk_reent>:
 8017270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017274:	4606      	mov	r6, r0
 8017276:	4688      	mov	r8, r1
 8017278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801727c:	2700      	movs	r7, #0
 801727e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017282:	f1b9 0901 	subs.w	r9, r9, #1
 8017286:	d505      	bpl.n	8017294 <_fwalk_reent+0x24>
 8017288:	6824      	ldr	r4, [r4, #0]
 801728a:	2c00      	cmp	r4, #0
 801728c:	d1f7      	bne.n	801727e <_fwalk_reent+0xe>
 801728e:	4638      	mov	r0, r7
 8017290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017294:	89ab      	ldrh	r3, [r5, #12]
 8017296:	2b01      	cmp	r3, #1
 8017298:	d907      	bls.n	80172aa <_fwalk_reent+0x3a>
 801729a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801729e:	3301      	adds	r3, #1
 80172a0:	d003      	beq.n	80172aa <_fwalk_reent+0x3a>
 80172a2:	4629      	mov	r1, r5
 80172a4:	4630      	mov	r0, r6
 80172a6:	47c0      	blx	r8
 80172a8:	4307      	orrs	r7, r0
 80172aa:	3568      	adds	r5, #104	; 0x68
 80172ac:	e7e9      	b.n	8017282 <_fwalk_reent+0x12>

080172ae <__retarget_lock_init_recursive>:
 80172ae:	4770      	bx	lr

080172b0 <__retarget_lock_acquire_recursive>:
 80172b0:	4770      	bx	lr

080172b2 <__retarget_lock_release_recursive>:
 80172b2:	4770      	bx	lr

080172b4 <__swhatbuf_r>:
 80172b4:	b570      	push	{r4, r5, r6, lr}
 80172b6:	460e      	mov	r6, r1
 80172b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172bc:	2900      	cmp	r1, #0
 80172be:	b096      	sub	sp, #88	; 0x58
 80172c0:	4614      	mov	r4, r2
 80172c2:	461d      	mov	r5, r3
 80172c4:	da08      	bge.n	80172d8 <__swhatbuf_r+0x24>
 80172c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80172ca:	2200      	movs	r2, #0
 80172cc:	602a      	str	r2, [r5, #0]
 80172ce:	061a      	lsls	r2, r3, #24
 80172d0:	d410      	bmi.n	80172f4 <__swhatbuf_r+0x40>
 80172d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172d6:	e00e      	b.n	80172f6 <__swhatbuf_r+0x42>
 80172d8:	466a      	mov	r2, sp
 80172da:	f000 f903 	bl	80174e4 <_fstat_r>
 80172de:	2800      	cmp	r0, #0
 80172e0:	dbf1      	blt.n	80172c6 <__swhatbuf_r+0x12>
 80172e2:	9a01      	ldr	r2, [sp, #4]
 80172e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172ec:	425a      	negs	r2, r3
 80172ee:	415a      	adcs	r2, r3
 80172f0:	602a      	str	r2, [r5, #0]
 80172f2:	e7ee      	b.n	80172d2 <__swhatbuf_r+0x1e>
 80172f4:	2340      	movs	r3, #64	; 0x40
 80172f6:	2000      	movs	r0, #0
 80172f8:	6023      	str	r3, [r4, #0]
 80172fa:	b016      	add	sp, #88	; 0x58
 80172fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08017300 <__smakebuf_r>:
 8017300:	898b      	ldrh	r3, [r1, #12]
 8017302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017304:	079d      	lsls	r5, r3, #30
 8017306:	4606      	mov	r6, r0
 8017308:	460c      	mov	r4, r1
 801730a:	d507      	bpl.n	801731c <__smakebuf_r+0x1c>
 801730c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	6123      	str	r3, [r4, #16]
 8017314:	2301      	movs	r3, #1
 8017316:	6163      	str	r3, [r4, #20]
 8017318:	b002      	add	sp, #8
 801731a:	bd70      	pop	{r4, r5, r6, pc}
 801731c:	ab01      	add	r3, sp, #4
 801731e:	466a      	mov	r2, sp
 8017320:	f7ff ffc8 	bl	80172b4 <__swhatbuf_r>
 8017324:	9900      	ldr	r1, [sp, #0]
 8017326:	4605      	mov	r5, r0
 8017328:	4630      	mov	r0, r6
 801732a:	f7ff f959 	bl	80165e0 <_malloc_r>
 801732e:	b948      	cbnz	r0, 8017344 <__smakebuf_r+0x44>
 8017330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017334:	059a      	lsls	r2, r3, #22
 8017336:	d4ef      	bmi.n	8017318 <__smakebuf_r+0x18>
 8017338:	f023 0303 	bic.w	r3, r3, #3
 801733c:	f043 0302 	orr.w	r3, r3, #2
 8017340:	81a3      	strh	r3, [r4, #12]
 8017342:	e7e3      	b.n	801730c <__smakebuf_r+0xc>
 8017344:	4b0d      	ldr	r3, [pc, #52]	; (801737c <__smakebuf_r+0x7c>)
 8017346:	62b3      	str	r3, [r6, #40]	; 0x28
 8017348:	89a3      	ldrh	r3, [r4, #12]
 801734a:	6020      	str	r0, [r4, #0]
 801734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017350:	81a3      	strh	r3, [r4, #12]
 8017352:	9b00      	ldr	r3, [sp, #0]
 8017354:	6163      	str	r3, [r4, #20]
 8017356:	9b01      	ldr	r3, [sp, #4]
 8017358:	6120      	str	r0, [r4, #16]
 801735a:	b15b      	cbz	r3, 8017374 <__smakebuf_r+0x74>
 801735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017360:	4630      	mov	r0, r6
 8017362:	f000 f8d1 	bl	8017508 <_isatty_r>
 8017366:	b128      	cbz	r0, 8017374 <__smakebuf_r+0x74>
 8017368:	89a3      	ldrh	r3, [r4, #12]
 801736a:	f023 0303 	bic.w	r3, r3, #3
 801736e:	f043 0301 	orr.w	r3, r3, #1
 8017372:	81a3      	strh	r3, [r4, #12]
 8017374:	89a0      	ldrh	r0, [r4, #12]
 8017376:	4305      	orrs	r5, r0
 8017378:	81a5      	strh	r5, [r4, #12]
 801737a:	e7cd      	b.n	8017318 <__smakebuf_r+0x18>
 801737c:	0801710d 	.word	0x0801710d

08017380 <_malloc_usable_size_r>:
 8017380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017384:	1f18      	subs	r0, r3, #4
 8017386:	2b00      	cmp	r3, #0
 8017388:	bfbc      	itt	lt
 801738a:	580b      	ldrlt	r3, [r1, r0]
 801738c:	18c0      	addlt	r0, r0, r3
 801738e:	4770      	bx	lr

08017390 <_raise_r>:
 8017390:	291f      	cmp	r1, #31
 8017392:	b538      	push	{r3, r4, r5, lr}
 8017394:	4604      	mov	r4, r0
 8017396:	460d      	mov	r5, r1
 8017398:	d904      	bls.n	80173a4 <_raise_r+0x14>
 801739a:	2316      	movs	r3, #22
 801739c:	6003      	str	r3, [r0, #0]
 801739e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173a2:	bd38      	pop	{r3, r4, r5, pc}
 80173a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80173a6:	b112      	cbz	r2, 80173ae <_raise_r+0x1e>
 80173a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173ac:	b94b      	cbnz	r3, 80173c2 <_raise_r+0x32>
 80173ae:	4620      	mov	r0, r4
 80173b0:	f000 f830 	bl	8017414 <_getpid_r>
 80173b4:	462a      	mov	r2, r5
 80173b6:	4601      	mov	r1, r0
 80173b8:	4620      	mov	r0, r4
 80173ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173be:	f000 b817 	b.w	80173f0 <_kill_r>
 80173c2:	2b01      	cmp	r3, #1
 80173c4:	d00a      	beq.n	80173dc <_raise_r+0x4c>
 80173c6:	1c59      	adds	r1, r3, #1
 80173c8:	d103      	bne.n	80173d2 <_raise_r+0x42>
 80173ca:	2316      	movs	r3, #22
 80173cc:	6003      	str	r3, [r0, #0]
 80173ce:	2001      	movs	r0, #1
 80173d0:	e7e7      	b.n	80173a2 <_raise_r+0x12>
 80173d2:	2400      	movs	r4, #0
 80173d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80173d8:	4628      	mov	r0, r5
 80173da:	4798      	blx	r3
 80173dc:	2000      	movs	r0, #0
 80173de:	e7e0      	b.n	80173a2 <_raise_r+0x12>

080173e0 <raise>:
 80173e0:	4b02      	ldr	r3, [pc, #8]	; (80173ec <raise+0xc>)
 80173e2:	4601      	mov	r1, r0
 80173e4:	6818      	ldr	r0, [r3, #0]
 80173e6:	f7ff bfd3 	b.w	8017390 <_raise_r>
 80173ea:	bf00      	nop
 80173ec:	24000028 	.word	0x24000028

080173f0 <_kill_r>:
 80173f0:	b538      	push	{r3, r4, r5, lr}
 80173f2:	4d07      	ldr	r5, [pc, #28]	; (8017410 <_kill_r+0x20>)
 80173f4:	2300      	movs	r3, #0
 80173f6:	4604      	mov	r4, r0
 80173f8:	4608      	mov	r0, r1
 80173fa:	4611      	mov	r1, r2
 80173fc:	602b      	str	r3, [r5, #0]
 80173fe:	f7ec fc1b 	bl	8003c38 <_kill>
 8017402:	1c43      	adds	r3, r0, #1
 8017404:	d102      	bne.n	801740c <_kill_r+0x1c>
 8017406:	682b      	ldr	r3, [r5, #0]
 8017408:	b103      	cbz	r3, 801740c <_kill_r+0x1c>
 801740a:	6023      	str	r3, [r4, #0]
 801740c:	bd38      	pop	{r3, r4, r5, pc}
 801740e:	bf00      	nop
 8017410:	24002d0c 	.word	0x24002d0c

08017414 <_getpid_r>:
 8017414:	f7ec bc08 	b.w	8003c28 <_getpid>

08017418 <__sread>:
 8017418:	b510      	push	{r4, lr}
 801741a:	460c      	mov	r4, r1
 801741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017420:	f000 f894 	bl	801754c <_read_r>
 8017424:	2800      	cmp	r0, #0
 8017426:	bfab      	itete	ge
 8017428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801742a:	89a3      	ldrhlt	r3, [r4, #12]
 801742c:	181b      	addge	r3, r3, r0
 801742e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017432:	bfac      	ite	ge
 8017434:	6563      	strge	r3, [r4, #84]	; 0x54
 8017436:	81a3      	strhlt	r3, [r4, #12]
 8017438:	bd10      	pop	{r4, pc}

0801743a <__swrite>:
 801743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801743e:	461f      	mov	r7, r3
 8017440:	898b      	ldrh	r3, [r1, #12]
 8017442:	05db      	lsls	r3, r3, #23
 8017444:	4605      	mov	r5, r0
 8017446:	460c      	mov	r4, r1
 8017448:	4616      	mov	r6, r2
 801744a:	d505      	bpl.n	8017458 <__swrite+0x1e>
 801744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017450:	2302      	movs	r3, #2
 8017452:	2200      	movs	r2, #0
 8017454:	f000 f868 	bl	8017528 <_lseek_r>
 8017458:	89a3      	ldrh	r3, [r4, #12]
 801745a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801745e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017462:	81a3      	strh	r3, [r4, #12]
 8017464:	4632      	mov	r2, r6
 8017466:	463b      	mov	r3, r7
 8017468:	4628      	mov	r0, r5
 801746a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801746e:	f000 b817 	b.w	80174a0 <_write_r>

08017472 <__sseek>:
 8017472:	b510      	push	{r4, lr}
 8017474:	460c      	mov	r4, r1
 8017476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801747a:	f000 f855 	bl	8017528 <_lseek_r>
 801747e:	1c43      	adds	r3, r0, #1
 8017480:	89a3      	ldrh	r3, [r4, #12]
 8017482:	bf15      	itete	ne
 8017484:	6560      	strne	r0, [r4, #84]	; 0x54
 8017486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801748a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801748e:	81a3      	strheq	r3, [r4, #12]
 8017490:	bf18      	it	ne
 8017492:	81a3      	strhne	r3, [r4, #12]
 8017494:	bd10      	pop	{r4, pc}

08017496 <__sclose>:
 8017496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801749a:	f000 b813 	b.w	80174c4 <_close_r>
	...

080174a0 <_write_r>:
 80174a0:	b538      	push	{r3, r4, r5, lr}
 80174a2:	4d07      	ldr	r5, [pc, #28]	; (80174c0 <_write_r+0x20>)
 80174a4:	4604      	mov	r4, r0
 80174a6:	4608      	mov	r0, r1
 80174a8:	4611      	mov	r1, r2
 80174aa:	2200      	movs	r2, #0
 80174ac:	602a      	str	r2, [r5, #0]
 80174ae:	461a      	mov	r2, r3
 80174b0:	f7ec fbf9 	bl	8003ca6 <_write>
 80174b4:	1c43      	adds	r3, r0, #1
 80174b6:	d102      	bne.n	80174be <_write_r+0x1e>
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	b103      	cbz	r3, 80174be <_write_r+0x1e>
 80174bc:	6023      	str	r3, [r4, #0]
 80174be:	bd38      	pop	{r3, r4, r5, pc}
 80174c0:	24002d0c 	.word	0x24002d0c

080174c4 <_close_r>:
 80174c4:	b538      	push	{r3, r4, r5, lr}
 80174c6:	4d06      	ldr	r5, [pc, #24]	; (80174e0 <_close_r+0x1c>)
 80174c8:	2300      	movs	r3, #0
 80174ca:	4604      	mov	r4, r0
 80174cc:	4608      	mov	r0, r1
 80174ce:	602b      	str	r3, [r5, #0]
 80174d0:	f7ec fc05 	bl	8003cde <_close>
 80174d4:	1c43      	adds	r3, r0, #1
 80174d6:	d102      	bne.n	80174de <_close_r+0x1a>
 80174d8:	682b      	ldr	r3, [r5, #0]
 80174da:	b103      	cbz	r3, 80174de <_close_r+0x1a>
 80174dc:	6023      	str	r3, [r4, #0]
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	24002d0c 	.word	0x24002d0c

080174e4 <_fstat_r>:
 80174e4:	b538      	push	{r3, r4, r5, lr}
 80174e6:	4d07      	ldr	r5, [pc, #28]	; (8017504 <_fstat_r+0x20>)
 80174e8:	2300      	movs	r3, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	4608      	mov	r0, r1
 80174ee:	4611      	mov	r1, r2
 80174f0:	602b      	str	r3, [r5, #0]
 80174f2:	f7ec fc00 	bl	8003cf6 <_fstat>
 80174f6:	1c43      	adds	r3, r0, #1
 80174f8:	d102      	bne.n	8017500 <_fstat_r+0x1c>
 80174fa:	682b      	ldr	r3, [r5, #0]
 80174fc:	b103      	cbz	r3, 8017500 <_fstat_r+0x1c>
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	bd38      	pop	{r3, r4, r5, pc}
 8017502:	bf00      	nop
 8017504:	24002d0c 	.word	0x24002d0c

08017508 <_isatty_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4d06      	ldr	r5, [pc, #24]	; (8017524 <_isatty_r+0x1c>)
 801750c:	2300      	movs	r3, #0
 801750e:	4604      	mov	r4, r0
 8017510:	4608      	mov	r0, r1
 8017512:	602b      	str	r3, [r5, #0]
 8017514:	f7ec fbff 	bl	8003d16 <_isatty>
 8017518:	1c43      	adds	r3, r0, #1
 801751a:	d102      	bne.n	8017522 <_isatty_r+0x1a>
 801751c:	682b      	ldr	r3, [r5, #0]
 801751e:	b103      	cbz	r3, 8017522 <_isatty_r+0x1a>
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	bd38      	pop	{r3, r4, r5, pc}
 8017524:	24002d0c 	.word	0x24002d0c

08017528 <_lseek_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d07      	ldr	r5, [pc, #28]	; (8017548 <_lseek_r+0x20>)
 801752c:	4604      	mov	r4, r0
 801752e:	4608      	mov	r0, r1
 8017530:	4611      	mov	r1, r2
 8017532:	2200      	movs	r2, #0
 8017534:	602a      	str	r2, [r5, #0]
 8017536:	461a      	mov	r2, r3
 8017538:	f7ec fbf8 	bl	8003d2c <_lseek>
 801753c:	1c43      	adds	r3, r0, #1
 801753e:	d102      	bne.n	8017546 <_lseek_r+0x1e>
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	b103      	cbz	r3, 8017546 <_lseek_r+0x1e>
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	24002d0c 	.word	0x24002d0c

0801754c <_read_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4d07      	ldr	r5, [pc, #28]	; (801756c <_read_r+0x20>)
 8017550:	4604      	mov	r4, r0
 8017552:	4608      	mov	r0, r1
 8017554:	4611      	mov	r1, r2
 8017556:	2200      	movs	r2, #0
 8017558:	602a      	str	r2, [r5, #0]
 801755a:	461a      	mov	r2, r3
 801755c:	f7ec fb86 	bl	8003c6c <_read>
 8017560:	1c43      	adds	r3, r0, #1
 8017562:	d102      	bne.n	801756a <_read_r+0x1e>
 8017564:	682b      	ldr	r3, [r5, #0]
 8017566:	b103      	cbz	r3, 801756a <_read_r+0x1e>
 8017568:	6023      	str	r3, [r4, #0]
 801756a:	bd38      	pop	{r3, r4, r5, pc}
 801756c:	24002d0c 	.word	0x24002d0c

08017570 <_init>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	bf00      	nop
 8017574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017576:	bc08      	pop	{r3}
 8017578:	469e      	mov	lr, r3
 801757a:	4770      	bx	lr

0801757c <_fini>:
 801757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757e:	bf00      	nop
 8017580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017582:	bc08      	pop	{r3}
 8017584:	469e      	mov	lr, r3
 8017586:	4770      	bx	lr
